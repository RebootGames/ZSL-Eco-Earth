%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: water_bottle_ban.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Larry Rains
%%CreationDate: 12/1/2015
%%BoundingBox: 0 0 560 700
%%HiResBoundingBox: 0 0 559.6385 699.0546
%%CropBox: 0 0 559.6385 699.0546
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.0 x111 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt/>
         </dc:title>
         <dc:description>
            <rdf:Alt/>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li/>
            </rdf:Bag>
         </dc:subject>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-12-01T23:02:52-06:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-12-01T23:02:53-06:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-12-01T23:02:53-06:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>208</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBkAGQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABkAAAAAEA&#xA;AQGQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq+SfO+u+dfzT/NjVPKWm6rLaaFYXc2nWtlFO9vbObNSbie5ePeT4kYr4CgHvlYM&#xA;UeEzlyDgarPMTGOH1Hqm1l/zh1p1zaRXEWuWkscihlkhikljI8Vf1RyHvkjlxDbg+1iMGci/E+xo&#xA;f84t/mDpFH8veY/qpjAKfVb68tXBHTjQMu3+tg4sB6ELwaofxRkt9D/nKvyf8SXt5qloh/u7mKHV&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:915100c7-9e84-ed41-b7bd-60b922917f64</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:915100c7-9e84-ed41-b7bd-60b922917f64</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:bc50a983-2280-c64a-9517-2d79906b7c56</stRef:instanceID>
            <stRef:documentID>xmp.did:bc50a983-2280-c64a-9517-2d79906b7c56</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:bc50a983-2280-c64a-9517-2d79906b7c56</stEvt:instanceID>
                  <stEvt:when>2015-12-01T23:02:25-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:915100c7-9e84-ed41-b7bd-60b922917f64</stEvt:instanceID>
                  <stEvt:when>2015-12-01T23:02:53-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>10.000000</stDim:w>
            <stDim:h>10.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=86 B=119</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>119</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=183 G=235 B=255</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>182</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=207 B=255</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>82</xmpG:red>
                           <xmpG:green>207</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Red</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -699.055 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 699.055 li
559.638 699.055 li
559.638 0 li
cp
clp
294.041 600.389 mo
234.598 604.317 182.47 586.654 137.656 547.399 cv
92.8464 508.14 68.4782 458.79 64.5519 399.346 cv
62.4616 367.71 66.4947 338.144 76.6464 310.648 cv
452.284 514.848 li
449.065 519.054 445.672 523.2 442.095 527.284 cv
402.835 572.094 353.484 596.462 294.041 600.389 cv
cp
265.597 169.901 mo
325.041 165.972 377.169 183.635 421.982 222.89 cv
466.79 262.147 491.158 311.484 495.083 370.9 cv
497.322 404.764 492.541 436.251 480.764 465.367 cv
103.676 260.378 li
107.953 254.471 112.574 248.679 117.544 243.005 cv
156.803 198.195 206.154 173.827 265.597 169.901 cv
cp
472.708 192.28 mo
419.441 139.01 355.145 112.374 279.819 112.372 cv
204.493 112.374 140.197 139.01 86.9304 192.28 cv
33.6593 245.547 7.02334 309.829 7.02291 385.125 cv
7.02425 460.451 33.6602 524.747 86.9304 578.013 cv
140.197 631.284 204.493 657.919 279.819 657.921 cv
355.145 657.919 419.441 631.284 472.708 578.013 cv
525.979 524.747 552.614 460.451 552.616 385.125 cv
552.615 309.829 525.979 245.547 472.708 192.28 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .993988 1 0 cmyk
ef
114.177 258.094 mo
477.059 455.359 li
486.339 429.362 490.045 401.146 488.076 371.363 cv
484.296 314.151 460.501 265.975 417.354 228.173 cv
374.202 190.373 323.299 173.125 266.06 176.908 cv
266.06 176.908 li
208.821 180.689 160.63 204.484 122.827 247.633 cv
119.832 251.052 116.938 254.552 114.177 258.094 cv
cp
484.324 475.296 mo
93.3009 262.732 li
97.9874 256.26 li
102.384 250.187 107.187 244.171 112.261 238.378 cv
152.607 192.327 204.041 166.93 265.127 162.894 cv
265.131 162.893 265.131 162.893 265.134 162.893 cv
265.134 162.893 li
265.134 162.893 li
326.225 158.855 380.553 177.264 426.61 217.607 cv
472.661 257.954 498.056 309.373 502.091 370.437 cv
504.388 405.189 499.403 438.014 487.274 468.001 cv
484.324 475.296 li
cp
80.579 320.779 mo
72.7716 345.092 69.7386 371.322 71.5596 398.883 cv
75.3403 456.123 99.1356 504.313 142.285 542.117 cv
185.435 579.916 236.338 597.164 293.578 593.381 cv
293.578 593.381 li
350.818 589.6 399.009 565.805 436.813 522.656 cv
438.43 520.81 440.025 518.929 441.59 517.028 cv
80.579 320.779 li
cp
294.507 607.396 mo
294.504 607.396 294.508 607.396 294.504 607.396 cv
294.504 607.396 li
294.504 607.396 li
233.412 611.434 179.084 593.025 133.029 552.682 cv
86.9762 512.335 61.5796 460.901 57.5443 399.809 cv
55.3986 367.334 59.609 336.518 70.0584 308.215 cv
72.8695 300.601 li
462.849 512.598 li
457.861 519.116 li
454.534 523.463 451.007 527.769 447.377 531.912 cv
407.033 577.961 355.595 603.36 294.507 607.396 cv
cp
279.819 119.395 mo
206.776 119.397 143.55 145.589 91.8967 197.246 cv
40.239 248.9 14.0463 312.112 14.0458 385.125 cv
14.0471 458.168 40.2399 521.394 91.8963 573.047 cv
143.55 624.704 206.776 650.897 279.819 650.899 cv
352.862 650.897 416.089 624.704 467.741 573.048 cv
519.398 521.396 545.591 458.169 545.593 385.125 cv
545.592 312.111 519.399 248.9 467.742 197.246 cv
467.741 197.246 li
416.088 145.589 352.862 119.397 279.819 119.395 cv
cp
279.819 664.944 mo
202.915 664.943 136.347 637.365 81.9641 582.979 cv
27.5781 528.597 .00128593 462.029 0 385.125 cv
.000428645 308.251 27.5773 241.697 81.9646 187.314 cv
136.347 132.928 202.915 105.351 279.819 105.35 cv
356.723 105.351 423.291 132.928 477.674 187.314 cv
477.673 187.314 li
532.06 241.697 559.638 308.25 559.638 385.125 cv
559.637 462.03 532.06 528.598 477.673 582.98 cv
423.291 637.365 356.723 664.943 279.819 664.944 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
432.37 232.618 mo
390.242 190.494 339.392 169.432 279.819 169.434 cv
220.246 169.432 169.396 190.494 127.268 232.618 cv
85.1455 274.744 64.0841 325.58 64.0841 385.125 cv
64.0828 444.698 85.1442 495.548 127.268 537.675 cv
169.396 579.8 220.246 600.861 279.819 600.86 cv
339.392 600.861 390.242 579.8 432.37 537.675 cv
474.494 495.548 495.555 444.698 495.554 385.125 cv
495.554 325.58 474.492 274.744 432.37 232.618 cv
cp
279.819 112.372 mo
355.145 112.374 419.441 139.01 472.708 192.28 cv
525.979 245.548 552.615 309.829 552.616 385.125 cv
552.614 460.451 525.979 524.747 472.708 578.013 cv
419.441 631.284 355.145 657.919 279.819 657.921 cv
204.493 657.919 140.197 631.284 86.9304 578.013 cv
33.6602 524.747 7.02423 460.451 7.02291 385.125 cv
7.02335 309.829 33.6593 245.548 86.9304 192.28 cv
140.197 139.01 204.493 112.374 279.819 112.372 cv
cp
0 .993988 1 0 cmyk
ef
417.658 27.4487 mo
417.583 27.4068 li
422.389 31.2655 424.861 35.2041 424.992 39.2214 cv
424.991 39.3172 424.99 39.4111 424.987 39.5046 cv
425.008 40.1894 424.948 40.8577 424.809 41.5091 cv
411.563 102.826 li
411.337 103.851 410.941 104.766 410.378 105.569 cv
410.474 106.81 410.395 108.086 410.144 109.397 cv
410.136 109.434 410.129 109.467 410.122 109.496 cv
410.115 109.529 410.108 109.562 410.101 109.595 cv
410.094 109.628 410.085 109.67 410.074 109.718 cv
409.033 113.939 406.525 117.06 402.548 119.082 cv
402.489 119.111 402.437 119.142 402.387 119.177 cv
402.286 119.221 402.185 119.259 402.079 119.291 cv
402.1 119.321 li
407.31 127.288 412.492 136.355 417.646 146.521 cv
417.651 146.496 li
424.884 160.629 432.268 176.885 439.799 195.264 cv
441.444 196.323 442.714 197.399 443.617 198.494 cv
444.358 199.317 444.944 200.177 445.374 201.071 cv
446.412 202.78 446.727 204.632 446.32 206.628 cv
397.957 430.503 li
397.866 430.998 397.588 431.852 397.121 433.062 cv
397.116 433.087 li
396.676 434.215 396.326 435.003 396.07 435.447 cv
396.075 435.422 li
395.023 437.392 393.546 439.185 391.641 440.799 cv
391.914 442.397 392.073 444.103 392.115 445.918 cv
392.11 445.942 li
392.207 450.249 391.745 454.865 390.727 459.788 cv
389.773 464.398 388.504 469.01 386.919 473.627 cv
385.366 478.1 383.696 482.299 381.912 486.224 cv
381.907 486.249 li
380.614 489.07 379.378 491.57 378.199 493.747 cv
379.148 496.546 379.661 499.709 379.734 503.233 cv
379.728 503.258 li
379.825 507.563 379.364 512.18 378.346 517.102 cv
377.391 521.712 376.123 526.325 374.537 530.942 cv
372.985 535.415 371.315 539.614 369.531 543.539 cv
369.526 543.563 li
368.156 546.512 366.858 549.128 365.628 551.409 cv
366.843 554.19 367.562 557.397 367.785 561.029 cv
367.788 561.134 367.796 561.239 367.801 561.343 cv
368.038 565.55 367.657 570.147 366.655 575.136 cv
365.72 579.844 364.428 584.563 362.779 589.296 cv
362.773 589.32 li
361.108 593.926 359.316 598.22 357.393 602.199 cv
357.376 602.228 357.361 602.258 357.347 602.292 cv
355.692 605.529 354.107 608.333 352.594 610.704 cv
352.485 610.455 352.379 610.208 352.274 609.963 cv
352.428 608.777 352.197 608.28 351.581 608.469 cv
351.821 608.958 352.051 609.455 352.274 609.963 cv
352.236 610.216 352.186 610.498 352.119 610.808 cv
352.001 611.365 351.785 611.887 351.47 612.375 cv
351.837 611.845 352.21 611.288 352.594 610.704 cv
353.68 613.502 354.362 616.658 354.641 620.171 cv
354.636 620.194 li
354.945 624.318 354.706 628.775 353.922 633.565 cv
353.188 638.054 352.063 642.602 350.55 647.213 cv
350.54 647.263 li
349.018 651.775 347.284 656.097 345.338 660.231 cv
345.321 660.251 345.308 660.274 345.296 660.299 cv
343.187 664.537 340.974 668.335 338.656 671.69 cv
338.62 671.735 li
333.914 678.371 327.6 683.782 319.675 687.965 cv
319.637 688.009 li
312.169 691.857 303.595 694.711 293.91 696.57 cv
293.878 696.589 li
284.593 698.311 274.623 699.13 263.967 699.049 cv
253.546 698.965 242.835 698.072 231.834 696.374 cv
231.808 696.368 li
220.901 694.639 210.122 692.233 199.47 689.149 cv
188.743 686.058 178.558 682.341 168.914 677.997 cv
168.887 677.992 li
159.065 673.55 150.17 668.611 142.199 663.177 cv
142.172 663.171 li
133.895 657.476 127.024 651.355 121.556 644.806 cv
121.535 644.775 li
115.624 637.794 111.628 630.466 109.548 622.792 cv
108.634 619.497 108.09 615.483 107.915 610.752 cv
107.931 610.807 li
107.706 606.335 107.833 601.614 108.31 596.642 cv
108.294 596.715 li
108.709 591.7 109.509 586.823 110.693 582.082 cv
110.704 582.033 li
111.928 576.964 113.599 572.496 115.715 568.634 cv
115.678 568.678 li
117.444 565.362 119.502 562.678 121.848 560.625 cv
121.444 557.853 121.211 554.709 121.149 551.191 cv
121.165 551.246 li
121.04 546.888 121.228 542.275 121.728 537.404 cv
122.234 532.51 123.042 527.772 124.15 523.189 cv
125.311 518.35 126.835 514.042 128.72 510.264 cv
128.754 510.165 128.793 510.07 128.837 509.979 cv
130.467 506.718 132.352 504.005 134.491 501.84 cv
134.532 502.368 134.582 502.878 134.639 503.372 cv
134.645 503.747 134.71 504.182 134.836 504.682 cv
134.801 504.519 134.772 504.349 134.749 504.171 cv
134.715 503.913 134.678 503.647 134.639 503.372 cv
134.646 503.037 134.707 502.757 134.821 502.533 cv
134.838 502.453 134.856 502.371 134.874 502.285 cv
135.027 501.733 135.267 501.233 135.593 500.786 cv
135.214 501.123 134.846 501.475 134.491 501.84 cv
134.222 499.174 134.06 496.139 134.002 492.736 cv
134.023 492.767 li
133.918 488.34 134.073 483.703 134.489 478.852 cv
134.501 478.933 li
134.863 473.956 135.55 469.123 136.561 464.431 cv
137.652 459.382 139.195 454.94 141.188 451.107 cv
142.76 448.023 144.627 445.478 146.789 443.473 cv
146.57 441.078 146.434 438.395 146.384 435.422 cv
146.405 435.451 li
146.299 431.026 146.455 426.388 146.871 421.538 cv
146.882 421.617 li
147.245 416.641 147.931 411.808 148.942 407.117 cv
150.034 402.067 151.576 397.625 153.57 393.793 cv
154.504 391.972 155.543 390.343 156.686 388.905 cv
156.552 388.592 156.424 388.271 156.301 387.943 cv
156.35 388.109 li
156.132 387.628 155.734 386.378 155.156 384.36 cv
155.177 384.391 li
154.606 382.763 154.601 380.649 155.163 378.053 cv
190.504 214.458 li
190.513 214.324 190.523 214.188 190.536 214.051 cv
190.612 213.423 190.755 212.851 190.963 212.333 cv
203.526 154.178 li
203.72 152.793 204.577 151.348 206.099 149.847 cv
206.11 149.831 206.123 149.817 206.136 149.803 cv
207.867 148.08 209.966 146.99 212.431 146.534 cv
212.398 146.554 li
213.082 146.421 213.661 146.314 214.133 146.231 cv
227.958 132.587 240.82 120.903 252.723 111.178 cv
252.717 111.202 li
261.388 104.041 269.647 97.9033 277.496 92.7916 cv
277.22 92.4683 276.953 92.1345 276.696 91.7918 cv
276.672 91.7392 276.646 91.6898 276.614 91.6444 cv
276.571 91.5836 li
274.003 88.1984 273.069 84.4624 273.771 80.3773 cv
273.783 80.3175 273.795 80.2599 273.808 80.2033 cv
273.822 80.138 273.837 80.0718 273.851 80.0065 cv
273.861 79.9484 273.875 79.8831 273.894 79.8087 cv
274.222 78.603 274.67 77.4838 275.239 76.4541 cv
275.038 75.4588 275.051 74.4358 275.281 73.3853 cv
288.527 12.0688 li
288.703 11.2879 288.989 10.5743 289.385 9.92688 cv
291.142 6.4224 294.71 3.84009 300.09 2.1809 cv
300.33 2.06143 300.587 1.96154 300.86 1.88176 cv
304.747 .738808 309.575 .118184 315.346 .0199147 cv
320.562 -.0812276 326.306 .202903 332.575 .871987 cv
332.516 .885014 li
338.606 1.48745 344.957 2.39414 351.571 3.60508 cv
351.6 3.61133 351.628 3.61725 351.653 3.62271 cv
351.693 3.63025 351.729 3.63806 351.761 3.64601 cv
351.815 3.65762 li
358.223 4.8677 364.639 6.30511 371.063 7.97111 cv
377.489 9.64652 383.611 11.4861 389.428 13.4894 cv
395.311 15.5 400.556 17.6076 405.167 19.8117 cv
405.323 19.8712 li
405.348 19.8874 405.373 19.9008 405.398 19.9132 cv
410.539 22.3952 414.625 24.907 417.658 27.4487 cv
cp
.75021 .679683 .670222 .90164 cmyk
ef
421.187 265.48 mo
396.989 377.491 li
396.796 377.455 396.593 377.436 396.381 377.437 cv
365.619 377.261 329.106 372.605 286.842 363.471 cv
244.528 354.328 208.408 343.284 178.482 330.341 cv
178.298 330.262 178.112 330.204 177.926 330.168 cv
202.145 218.059 li
202.252 218.078 202.362 218.093 202.474 218.104 cv
237.193 221.688 273.945 227.585 312.731 235.794 cv
312.758 235.8 li
354.64 244.641 390.658 254.499 420.816 265.374 cv
420.938 265.418 421.065 265.455 421.187 265.48 cv
cp
395.647 96.2847 mo
287.786 72.984 li
289.248 66.2143 li
401.802 90.5287 li
400.34 97.2984 li
395.754 96.3079 li
395.717 96.2989 395.682 96.2913 395.647 96.2847 cv
cp
412.812 39.564 mo
403.083 84.6 li
290.529 60.2856 li
300.269 15.1995 li
301.165 14.069 302.682 13.1895 304.819 12.5618 cv
304.786 12.5814 li
307.801 11.7394 311.551 11.2742 316.038 11.1857 cv
320.74 11.0963 325.935 11.3481 331.624 11.9402 cv
337.379 12.5417 343.372 13.4134 349.601 14.5571 cv
349.628 14.5629 li
355.829 15.7332 362.004 17.1186 368.148 18.7192 cv
374.254 20.3075 380.053 22.0346 385.543 23.8991 cv
390.975 25.7755 395.822 27.7277 400.083 29.7545 cv
400.057 29.7487 li
404.133 31.7246 407.385 33.6936 409.816 35.6579 cv
411.46 37.0033 412.457 38.3049 412.812 39.564 cv
cp
0 0 0 0 cmyk
ef
174.869 595.298 mo
183.346 598.451 192.396 601.415 202.018 604.189 cv
202.045 604.195 li
211.688 606.935 221.562 609.395 231.667 611.576 cv
241.769 613.76 251.761 615.591 261.639 617.069 cv
261.666 617.074 li
271.575 618.52 281.04 619.555 290.065 620.183 cv
290.07 620.158 li
299.175 620.761 307.471 620.855 314.958 620.442 cv
314.929 620.435 li
322.596 620.043 329.065 619.01 334.34 617.337 cv
334.36 617.334 334.38 617.33 334.399 617.323 cv
337.06 616.511 339.36 615.534 341.297 614.392 cv
341.978 616.212 342.405 618.252 342.572 620.51 cv
342.577 620.486 li
342.797 623.898 342.585 627.576 341.944 631.521 cv
341.306 635.507 340.313 639.532 338.968 643.599 cv
337.605 647.697 336.022 651.63 334.218 655.399 cv
332.398 659.119 330.465 662.451 328.418 665.394 cv
328.423 665.369 li
324.69 670.604 319.675 674.873 313.38 678.176 cv
306.911 681.54 299.479 684.02 291.084 685.616 cv
282.556 687.204 273.418 687.953 263.672 687.866 cv
253.854 687.773 243.771 686.931 233.427 685.34 cv
233.4 685.334 li
223.036 683.706 212.795 681.424 202.676 678.49 cv
192.571 675.563 182.963 672.048 173.851 667.946 cv
164.761 663.854 156.527 659.291 149.15 654.256 cv
141.88 649.263 135.816 643.886 130.959 638.123 cv
126.206 632.501 122.976 626.597 121.267 620.411 cv
121.288 620.442 li
120.594 617.791 120.168 614.536 120.011 610.676 cv
120.017 610.651 li
119.813 606.667 119.915 602.448 120.323 597.995 cv
120.328 597.97 li
120.716 593.488 121.442 589.129 122.505 584.892 cv
122.51 584.866 li
123.511 580.729 124.864 577.074 126.572 573.902 cv
126.578 573.876 li
127.709 571.733 129.031 570.01 130.545 568.708 cv
131.839 570.604 133.555 572.502 135.694 574.398 cv
139.845 578.081 145.328 581.705 152.142 585.269 cv
158.754 588.729 166.331 592.064 174.874 595.273 cv
174.869 595.298 li
cp
147.61 516.75 mo
151.637 520.691 157.017 524.577 163.749 528.407 cv
163.77 528.437 li
170.329 532.137 177.859 535.695 186.358 539.109 cv
194.793 542.496 203.845 545.666 213.514 548.622 cv
213.509 548.647 li
223.133 551.556 233.035 554.144 243.217 556.409 cv
253.388 558.714 263.462 560.596 273.437 562.056 cv
283.432 563.549 292.984 564.525 302.1 564.992 cv
311.285 565.504 319.674 565.419 327.272 564.741 cv
335.047 564.025 341.629 562.609 347.014 560.498 cv
350.065 559.314 352.647 557.907 354.755 556.275 cv
355.275 557.763 355.592 559.427 355.71 561.265 cv
355.899 564.781 355.58 568.608 354.753 572.746 cv
353.915 576.98 352.742 581.226 351.241 585.484 cv
349.736 589.729 348.096 593.659 346.323 597.273 cv
344.545 600.828 342.843 603.772 341.226 606.103 cv
340.874 606.555 340.488 606.988 340.07 607.404 cv
340.046 607.423 340.022 607.444 340 607.465 cv
339.978 607.488 339.954 607.51 339.93 607.528 cv
338.052 609.179 335.438 610.511 332.095 611.524 cv
332.036 611.538 li
327.225 613.053 321.322 613.993 314.325 614.357 cv
314.296 614.351 li
307.08 614.759 299.084 614.677 290.305 614.108 cv
290.31 614.083 li
281.471 613.47 272.195 612.456 262.486 611.045 cv
252.751 609.595 242.904 607.794 232.948 605.647 cv
222.998 603.494 213.278 601.068 203.784 598.364 cv
194.349 595.642 185.476 592.734 177.163 589.641 cv
177.158 589.665 li
168.926 586.56 161.627 583.337 155.257 579.994 cv
149.019 576.74 143.994 573.44 140.18 570.092 cv
137.641 567.839 135.847 565.607 134.797 563.396 cv
134.775 563.31 134.746 563.226 134.71 563.145 cv
134.449 562.552 134.258 561.951 134.14 561.341 cv
133.592 558.563 133.282 555.246 133.213 551.392 cv
133.218 551.367 li
133.117 547.432 133.283 543.269 133.714 538.882 cv
134.199 534.454 134.95 530.151 135.966 525.974 cv
136.959 521.874 138.248 518.214 139.835 514.993 cv
140.691 513.288 141.639 511.812 142.682 510.566 cv
143.884 512.605 145.52 514.656 147.59 516.719 cv
147.61 516.75 li
cp
154.581 452.474 mo
155.832 454.773 157.628 457.083 159.971 459.405 cv
159.992 459.435 li
164.019 463.375 169.398 467.262 176.13 471.092 cv
176.151 471.123 li
182.71 474.822 190.24 478.38 198.739 481.794 cv
207.174 485.18 216.226 488.351 225.896 491.306 cv
225.89 491.332 li
235.514 494.242 245.417 496.829 255.598 499.094 cv
265.77 501.398 275.843 503.282 285.818 504.742 cv
295.814 506.234 305.366 507.211 314.481 507.677 cv
323.667 508.188 332.055 508.104 339.653 507.427 cv
347.429 506.71 354.01 505.295 359.395 503.183 cv
359.39 503.208 li
362.471 502.016 365.075 500.588 367.203 498.922 cv
367.469 500.204 367.615 501.579 367.637 503.051 cv
367.631 503.075 li
367.708 506.653 367.322 510.492 366.471 514.59 cv
365.599 518.798 364.439 522.995 362.988 527.18 cv
361.563 531.357 360.016 535.254 358.346 538.873 cv
356.693 542.473 355.142 545.508 353.698 547.979 cv
353.442 548.366 353.171 548.747 352.887 549.122 cv
352.814 549.21 352.748 549.297 352.687 549.39 cv
350.761 551.626 347.955 553.459 344.274 554.89 cv
339.389 556.765 333.428 558.019 326.384 558.654 cv
319.093 559.31 311.041 559.397 302.227 558.917 cv
293.334 558.456 284.012 557.494 274.259 556.03 cv
274.232 556.024 li
264.436 554.593 254.542 552.749 244.551 550.491 cv
234.555 548.259 224.832 545.71 215.383 542.846 cv
215.378 542.87 li
205.916 539.969 197.058 536.857 188.804 533.536 cv
180.615 530.242 173.359 526.813 167.037 523.248 cv
167.058 523.279 li
160.923 519.778 156.016 516.235 152.335 512.651 cv
149.601 509.919 147.842 507.22 147.056 504.555 cv
147.041 504.5 li
147.03 504.463 147.019 504.426 147.007 504.389 cv
146.986 504.321 146.963 504.255 146.937 504.193 cv
146.86 503.879 146.806 503.566 146.773 503.253 cv
146.751 503.222 li
146.385 500.363 146.156 496.936 146.066 492.937 cv
145.989 488.873 146.143 484.588 146.529 480.083 cv
146.534 480.058 li
146.881 475.576 147.511 471.221 148.425 466.994 cv
149.313 462.903 150.554 459.293 152.148 456.163 cv
152.868 454.746 153.679 453.516 154.581 452.474 cv
cp
225.154 422.624 mo
234.534 425.695 244.346 428.53 254.587 431.129 cv
264.785 433.748 275.05 436.051 285.382 438.04 cv
295.764 440.035 305.851 441.637 315.643 442.845 cv
325.501 444.073 334.718 444.831 343.29 445.12 cv
352.023 445.412 359.778 445.14 366.555 444.301 cv
371.589 443.683 375.926 442.732 379.561 441.449 cv
379.842 442.768 379.996 444.198 380.018 445.735 cv
380.013 445.76 li
380.089 449.339 379.703 453.177 378.853 457.275 cv
377.981 461.483 376.821 465.681 375.37 469.865 cv
373.945 474.042 372.398 477.94 370.727 481.558 cv
369.088 485.125 367.553 488.137 366.122 490.596 cv
366.109 490.618 366.093 490.641 366.08 490.663 cv
365.945 490.878 365.802 491.097 365.654 491.323 cv
365.649 491.347 li
365.636 491.368 365.623 491.389 365.606 491.416 cv
365.601 491.44 li
365.566 491.481 365.541 491.518 365.52 491.552 cv
363.584 494.032 360.629 496.031 356.661 497.549 cv
356.655 497.576 li
351.771 499.45 345.81 500.704 338.766 501.338 cv
331.475 501.995 323.422 502.082 314.609 501.601 cv
305.715 501.141 296.394 500.179 286.64 498.714 cv
286.613 498.708 li
276.818 497.278 266.924 495.434 256.932 493.176 cv
246.936 490.945 237.213 488.396 227.765 485.531 cv
227.76 485.554 li
218.297 482.654 209.44 479.542 201.185 476.22 cv
192.996 472.927 185.741 469.497 179.418 465.932 cv
179.439 465.963 li
173.305 462.462 168.397 458.921 164.716 455.336 cv
161.842 452.488 160.041 449.676 159.313 446.902 cv
159.307 446.834 159.295 446.762 159.275 446.688 cv
159.274 446.664 159.271 446.637 159.264 446.608 cv
159.257 446.583 159.254 446.556 159.253 446.528 cv
159.231 446.497 li
159.195 446.334 159.167 446.164 159.144 445.988 cv
159.139 445.962 159.135 445.936 159.133 445.906 cv
158.766 443.049 158.538 439.621 158.448 435.622 cv
158.371 431.557 158.525 427.273 158.91 422.767 cv
158.915 422.743 li
159.263 418.261 159.893 413.906 160.806 409.68 cv
161.692 405.597 162.931 401.994 164.524 398.873 cv
165.371 397.21 166.353 395.801 167.468 394.648 cv
170.262 397.281 173.858 399.928 178.256 402.59 cv
184.112 406.12 191.041 409.583 199.042 412.975 cv
206.994 416.325 215.698 419.542 225.154 422.624 cv
cp
395.911 382.482 mo
386.091 427.939 li
385.999 428.367 385.72 429.057 385.251 430.007 cv
384.26 431.712 382.633 433.152 380.366 434.33 cv
380.334 434.348 li
380.293 434.366 380.251 434.381 380.21 434.399 cv
380.176 434.419 li
380.113 434.447 380.053 434.476 379.99 434.507 cv
379.921 434.539 379.858 434.567 379.8 434.596 cv
376.093 436.325 371.304 437.549 365.431 438.266 cv
358.988 439.052 351.613 439.304 343.312 439.021 cv
334.921 438.748 325.906 438.016 316.269 436.825 cv
306.635 435.629 296.712 434.046 286.502 432.076 cv
276.313 430.113 266.192 427.841 256.138 425.258 cv
246.052 422.706 236.39 419.92 227.152 416.902 cv
227.125 416.896 li
217.88 413.869 209.37 410.713 201.597 407.424 cv
193.944 404.196 187.318 400.902 181.717 397.545 cv
176.678 394.486 172.825 391.464 170.156 388.48 cv
169.975 388.271 169.81 388.08 169.658 387.908 cv
169.729 387.975 li
168.211 386.174 167.313 384.409 167.033 382.685 cv
166.895 381.931 166.893 381.241 167.028 380.616 cv
176.843 335.184 li
206.968 348.158 243.279 359.234 285.775 368.412 cv
328.225 377.578 364.935 382.268 395.911 382.482 cv
cp
313 163.606 mo
302.999 161.514 293.28 159.604 283.841 157.876 cv
274.418 156.149 265.579 154.688 257.327 153.493 cv
249.034 152.293 241.656 151.433 235.193 150.909 cv
232.102 150.659 229.284 150.507 226.74 150.453 cv
229.118 148.143 231.467 145.892 233.787 143.701 cv
234.432 143.094 235.07 142.49 235.702 141.891 cv
236.343 141.301 236.978 140.714 237.607 140.131 cv
245.753 132.542 253.521 125.714 260.914 119.644 cv
265.771 115.711 273.019 110.424 282.656 103.785 cv
283.22 103.4 283.782 103.022 284.341 102.648 cv
284.604 102.462 284.87 102.278 285.138 102.096 cv
288.927 99.5084 292.406 97.1226 295.574 94.9391 cv
384.505 114.15 li
384.551 114.254 386.878 117.894 391.489 125.071 cv
391.663 125.345 391.836 125.624 392.013 125.908 cv
392.316 126.376 392.625 126.856 392.942 127.351 cv
399.153 137.276 403.755 145.148 406.75 150.966 cv
411.224 159.689 415.747 169.233 420.321 179.602 cv
420.672 180.397 421.025 181.197 421.383 182.003 cv
421.731 182.814 422.081 183.631 422.434 184.453 cv
423.84 187.699 425.25 191.02 426.661 194.417 cv
424.322 193.452 421.689 192.443 418.762 191.392 cv
412.697 189.244 405.648 186.99 397.617 184.626 cv
389.629 182.245 381.003 179.846 371.74 177.432 cv
362.485 175.02 352.887 172.636 342.943 170.281 cv
342.917 170.275 li
332.974 167.955 323.012 165.733 313.027 163.612 cv
313 163.606 li
cp
311.773 169.546 mo
321.703 171.657 331.612 173.868 341.499 176.175 cv
351.389 178.519 360.934 180.89 370.132 183.291 cv
379.321 185.69 387.875 188.073 395.797 190.439 cv
403.689 192.757 410.615 194.968 416.577 197.074 cv
422.257 199.108 426.775 200.972 430.13 202.665 cv
430.205 202.717 430.287 202.769 430.377 202.822 cv
430.487 202.882 430.606 202.943 430.732 203.002 cv
431.898 203.578 432.849 204.138 433.588 204.679 cv
433.797 204.835 434.012 204.969 434.235 205.077 cv
422.259 260.515 li
391.963 249.609 355.809 239.722 313.799 230.852 cv
313.772 230.847 li
274.888 222.623 238.035 216.713 203.212 213.118 cv
215.236 157.458 li
215.51 157.438 215.784 157.387 216.06 157.3 cv
216.919 157.029 218.004 156.84 219.315 156.736 cv
219.345 156.734 219.374 156.731 219.401 156.729 cv
219.435 156.726 219.463 156.724 219.488 156.721 cv
219.516 156.721 219.545 156.719 219.574 156.714 cv
219.599 156.714 219.628 156.713 219.66 156.707 cv
219.69 156.707 219.718 156.705 219.746 156.699 cv
219.838 156.69 219.926 156.674 220.01 156.654 cv
223.819 156.379 228.762 156.489 234.84 156.986 cv
241.173 157.503 248.404 158.35 256.532 159.526 cv
264.7 160.706 273.448 162.148 282.776 163.851 cv
292.153 165.568 301.81 167.464 311.746 169.541 cv
311.773 169.546 li
cp
397.522 104.188 mo
398.19 105.019 398.433 105.933 398.258 106.933 cv
398.249 106.966 398.242 106.999 398.237 107.032 cv
397.982 108.014 397.382 108.747 396.433 109.228 cv
396.407 109.241 396.376 109.252 396.344 109.261 cv
395.25 109.82 394.014 109.967 392.634 109.7 cv
289.71 87.466 li
288.33 87.1412 287.257 86.4953 286.487 85.5289 cv
286.466 85.4984 li
285.793 84.6471 285.535 83.7041 285.694 82.6679 cv
285.977 81.6594 286.601 80.906 287.565 80.4091 cv
287.597 80.3903 li
288.653 79.8529 289.853 79.6991 291.197 79.9272 cv
291.233 79.935 291.27 79.9428 291.305 79.9505 cv
394.069 102.15 li
394.127 102.16 394.189 102.173 394.257 102.191 cv
394.366 102.214 li
395.683 102.561 396.714 103.197 397.454 104.122 cv
397.48 104.143 397.503 104.165 397.522 104.188 cv
cp
.539391 0 0 0 cmyk
ef
421.187 265.48 mo
396.989 377.491 li
396.796 377.455 396.593 377.436 396.381 377.437 cv
365.619 377.261 329.106 372.605 286.842 363.471 cv
244.528 354.328 208.408 343.284 178.482 330.341 cv
178.298 330.262 178.112 330.204 177.926 330.168 cv
202.145 218.059 li
202.252 218.078 202.362 218.093 202.474 218.104 cv
237.193 221.688 273.945 227.585 312.731 235.794 cv
312.758 235.8 li
354.64 244.641 390.658 254.499 420.816 265.374 cv
420.938 265.418 421.065 265.455 421.187 265.48 cv
cp
395.647 96.2847 mo
287.786 72.984 li
289.248 66.2143 li
401.802 90.5287 li
400.34 97.2984 li
395.754 96.3079 li
395.717 96.2989 395.682 96.2913 395.647 96.2847 cv
cp
412.812 39.564 mo
403.083 84.6 li
290.529 60.2856 li
300.269 15.1995 li
301.165 14.069 302.682 13.1895 304.819 12.5618 cv
304.786 12.5814 li
307.801 11.7394 311.551 11.2742 316.038 11.1857 cv
320.74 11.0963 325.935 11.3481 331.624 11.9402 cv
337.379 12.5417 343.372 13.4134 349.601 14.5571 cv
349.628 14.5629 li
355.829 15.7332 362.004 17.1186 368.148 18.7192 cv
374.254 20.3075 380.053 22.0346 385.543 23.8991 cv
390.975 25.7755 395.822 27.7277 400.083 29.7545 cv
400.057 29.7487 li
404.133 31.7246 407.385 33.6936 409.816 35.6579 cv
411.46 37.0033 412.457 38.3049 412.812 39.564 cv
cp
0 0 0 0 cmyk
ef
185.75 611.948 mo
184.708 611.723 183.735 611.875 182.83 612.403 cv
181.926 612.932 181.37 613.674 181.164 614.63 cv
180.957 615.584 181.157 616.49 181.762 617.345 cv
182.369 618.2 183.192 618.739 184.235 618.964 cv
185.278 619.189 186.251 619.038 187.155 618.51 cv
188.06 617.981 188.616 617.239 188.822 616.284 cv
189.028 615.328 188.829 614.424 188.223 613.568 cv
187.618 612.713 186.794 612.174 185.75 611.948 cv
cp
179.094 639.367 mo
179.243 638.675 179.102 638.024 178.669 637.413 cv
178.265 636.844 177.686 636.477 176.931 636.314 cv
176.176 636.151 175.479 636.242 174.84 636.586 cv
174.23 636.971 173.85 637.51 173.701 638.202 cv
173.551 638.895 173.679 639.524 174.082 640.095 cv
174.515 640.705 175.108 641.092 175.863 641.255 cv
176.619 641.418 177.301 641.307 177.911 640.922 cv
178.55 640.577 178.944 640.06 179.094 639.367 cv
cp
322.239 483.391 mo
323.402 482.712 324.119 481.746 324.389 480.494 cv
324.66 479.243 324.406 478.067 323.627 476.969 cv
322.848 475.87 321.775 475.172 320.408 474.877 cv
319.043 474.582 317.777 474.774 316.615 475.454 cv
315.452 476.133 314.735 477.099 314.465 478.35 cv
314.194 479.602 314.448 480.778 315.227 481.876 cv
316.006 482.975 317.079 483.673 318.444 483.968 cv
319.811 484.263 321.076 484.071 322.239 483.391 cv
cp
316.023 421.231 mo
315.052 421.022 314.162 421.139 313.35 421.586 cv
312.567 422.07 312.081 422.758 311.888 423.648 cv
311.696 424.537 311.858 425.35 312.379 426.081 cv
312.927 426.855 313.686 427.347 314.657 427.556 cv
315.627 427.766 316.505 427.628 317.286 427.141 cv
318.098 426.698 318.601 426.029 318.793 425.139 cv
318.985 424.25 318.806 423.418 318.257 422.646 cv
317.739 421.912 316.994 421.441 316.023 421.231 cv
cp
297.342 401.889 mo
296.88 401.237 296.218 400.819 295.354 400.632 cv
294.491 400.446 293.697 400.55 292.972 400.945 cv
292.277 401.38 291.842 401.993 291.671 402.784 cv
291.5 403.574 291.647 404.295 292.107 404.946 cv
292.598 405.638 293.274 406.078 294.138 406.265 cv
295.001 406.451 295.781 406.326 296.478 405.89 cv
297.201 405.495 297.649 404.902 297.82 404.112 cv
297.99 403.321 297.831 402.579 297.342 401.889 cv
cp
231.287 461.778 mo
232.277 461.2 232.886 460.383 233.114 459.33 cv
233.342 458.275 233.124 457.28 232.461 456.344 cv
231.797 455.407 230.891 454.815 229.74 454.566 cv
228.59 454.318 227.519 454.483 226.528 455.062 cv
225.538 455.641 224.929 456.457 224.701 457.512 cv
224.473 458.566 224.691 459.561 225.354 460.497 cv
226.017 461.433 226.925 462.024 228.075 462.273 cv
229.226 462.521 230.296 462.357 231.287 461.778 cv
cp
262.215 535.483 mo
263.473 535.754 264.641 535.575 265.719 534.947 cv
266.795 534.317 267.459 533.427 267.708 532.273 cv
267.957 531.12 267.721 530.034 267 529.018 cv
266.277 527.999 265.288 527.355 264.03 527.084 cv
262.772 526.812 261.605 526.99 260.529 527.62 cv
259.45 528.247 258.789 529.139 258.539 530.293 cv
258.29 531.446 258.525 532.531 259.248 533.549 cv
259.968 534.566 260.958 535.211 262.215 535.483 cv
cp
295.934 523.372 mo
295.741 524.263 295.906 525.075 296.424 525.807 cv
296.972 526.581 297.731 527.071 298.702 527.281 cv
299.673 527.491 300.548 527.353 301.332 526.867 cv
302.143 526.422 302.644 525.754 302.837 524.864 cv
303.028 523.975 302.851 523.144 302.303 522.371 cv
301.782 521.637 301.039 521.167 300.068 520.957 cv
299.097 520.747 298.207 520.865 297.395 521.311 cv
296.614 521.796 296.126 522.484 295.934 523.372 cv
cp
221.563 501.826 mo
220.7 501.64 219.906 501.744 219.181 502.139 cv
218.485 502.575 218.051 503.187 217.88 503.978 cv
217.71 504.768 217.855 505.49 218.316 506.141 cv
218.807 506.832 219.483 507.272 220.346 507.459 cv
221.209 507.645 221.988 507.519 222.685 507.085 cv
223.41 506.69 223.858 506.096 224.028 505.306 cv
224.199 504.515 224.04 503.774 223.55 503.082 cv
223.087 502.431 222.426 502.013 221.563 501.826 cv
cp
227.101 529.759 mo
226.495 528.903 225.671 528.364 224.628 528.138 cv
223.585 527.913 222.612 528.064 221.707 528.594 cv
220.803 529.122 220.247 529.864 220.041 530.819 cv
219.834 531.775 220.035 532.679 220.64 533.534 cv
221.246 534.389 222.07 534.929 223.113 535.154 cv
224.155 535.379 225.129 535.228 226.034 534.699 cv
226.937 534.17 227.492 533.429 227.699 532.474 cv
227.905 531.518 227.706 530.614 227.101 529.759 cv
cp
320.789 525.639 mo
319.836 524.297 318.517 523.441 316.827 523.076 cv
315.138 522.711 313.564 522.942 312.104 523.763 cv
310.679 524.628 309.796 525.833 309.461 527.381 cv
309.127 528.93 309.437 530.376 310.386 531.718 cv
311.369 533.103 312.704 533.977 314.393 534.342 cv
316.083 534.707 317.641 534.458 319.071 533.595 cv
320.528 532.772 321.422 531.586 321.757 530.037 cv
322.091 528.489 321.77 527.024 320.789 525.639 cv
cp
304.584 579.75 mo
304.755 578.96 304.595 578.218 304.105 577.526 cv
303.642 576.874 302.981 576.455 302.119 576.269 cv
301.256 576.083 300.462 576.187 299.736 576.582 cv
299.039 577.018 298.606 577.631 298.435 578.421 cv
298.265 579.211 298.409 579.933 298.871 580.585 cv
299.362 581.277 300.039 581.715 300.902 581.902 cv
301.764 582.088 302.543 581.964 303.24 581.529 cv
303.965 581.133 304.414 580.54 304.584 579.75 cv
cp
329.216 588.535 mo
329.765 589.309 330.523 589.802 331.494 590.011 cv
332.465 590.221 333.34 590.081 334.124 589.595 cv
334.933 589.151 335.436 588.484 335.628 587.594 cv
335.82 586.706 335.641 585.874 335.095 585.1 cv
334.574 584.367 333.831 583.895 332.86 583.685 cv
331.89 583.476 330.999 583.594 330.187 584.04 cv
329.403 584.526 328.918 585.214 328.726 586.103 cv
328.533 586.993 328.695 587.804 329.216 588.535 cv
cp
294.267 654.68 mo
295.257 654.101 295.867 653.285 296.095 652.231 cv
296.323 651.177 296.103 650.181 295.441 649.245 cv
294.778 648.309 293.871 647.717 292.72 647.468 cv
291.57 647.22 290.499 647.384 289.509 647.964 cv
288.519 648.543 287.91 649.359 287.683 650.413 cv
287.455 651.467 287.672 652.463 288.335 653.398 cv
288.997 654.335 289.905 654.928 291.055 655.176 cv
292.206 655.425 293.277 655.259 294.267 654.68 cv
cp
217.708 657.897 mo
218.699 657.319 219.307 656.501 219.535 655.447 cv
219.763 654.393 219.545 653.399 218.882 652.461 cv
218.219 651.526 217.313 650.933 216.162 650.684 cv
215.012 650.436 213.94 650.601 212.95 651.18 cv
211.959 651.76 211.35 652.576 211.123 653.63 cv
210.895 654.684 211.113 655.68 211.776 656.615 cv
212.439 657.552 213.346 658.144 214.496 658.393 cv
215.647 658.641 216.717 658.476 217.708 657.897 cv
cp
237.159 638.413 mo
236.655 638.304 236.169 638.372 235.703 638.616 cv
235.264 638.899 234.997 639.274 234.897 639.734 cv
234.798 640.196 234.89 640.629 235.18 641.036 cv
235.497 641.484 235.908 641.763 236.412 641.872 cv
236.914 641.98 237.384 641.892 237.822 641.607 cv
238.29 641.363 238.573 641.012 238.673 640.55 cv
238.773 640.089 238.663 639.634 238.345 639.187 cv
238.057 638.78 237.661 638.521 237.159 638.413 cv
cp
174.869 595.298 mo
183.346 598.451 192.396 601.415 202.018 604.189 cv
202.045 604.195 li
211.688 606.935 221.562 609.395 231.667 611.576 cv
241.769 613.76 251.761 615.591 261.639 617.069 cv
261.666 617.074 li
271.575 618.52 281.04 619.555 290.065 620.183 cv
290.07 620.158 li
299.175 620.761 307.471 620.855 314.958 620.442 cv
314.929 620.435 li
322.596 620.043 329.065 619.01 334.34 617.337 cv
334.36 617.334 334.38 617.33 334.399 617.323 cv
337.06 616.511 339.36 615.534 341.297 614.392 cv
341.978 616.212 342.405 618.252 342.572 620.51 cv
342.577 620.486 li
342.797 623.898 342.585 627.576 341.944 631.521 cv
341.306 635.507 340.313 639.532 338.968 643.599 cv
337.605 647.697 336.022 651.63 334.218 655.399 cv
332.398 659.119 330.465 662.451 328.418 665.394 cv
328.423 665.369 li
324.69 670.604 319.675 674.873 313.38 678.176 cv
306.911 681.54 299.479 684.02 291.084 685.616 cv
282.556 687.204 273.418 687.953 263.672 687.866 cv
253.854 687.773 243.771 686.931 233.427 685.34 cv
233.4 685.334 li
223.036 683.706 212.795 681.424 202.676 678.49 cv
192.571 675.563 182.963 672.048 173.851 667.946 cv
164.761 663.854 156.527 659.291 149.15 654.256 cv
141.88 649.263 135.816 643.886 130.959 638.123 cv
126.206 632.501 122.976 626.597 121.267 620.411 cv
121.288 620.442 li
120.594 617.791 120.168 614.536 120.011 610.676 cv
120.017 610.651 li
119.813 606.667 119.915 602.448 120.323 597.995 cv
120.328 597.97 li
120.716 593.488 121.442 589.129 122.505 584.892 cv
122.51 584.866 li
123.511 580.729 124.864 577.074 126.572 573.902 cv
126.578 573.876 li
127.709 571.733 129.031 570.01 130.545 568.708 cv
131.839 570.604 133.555 572.502 135.694 574.398 cv
139.845 578.081 145.328 581.705 152.142 585.269 cv
158.754 588.729 166.331 592.064 174.874 595.273 cv
174.869 595.298 li
cp
184.02 554.636 mo
184.486 554.391 184.773 554.023 184.88 553.529 cv
184.987 553.033 184.881 552.565 184.564 552.116 cv
184.276 551.709 183.861 551.447 183.322 551.331 cv
182.783 551.214 182.28 551.278 181.814 551.522 cv
181.375 551.808 181.104 552.195 180.997 552.69 cv
180.89 553.184 180.981 553.634 181.269 554.042 cv
181.587 554.489 182.015 554.772 182.554 554.889 cv
183.093 555.005 183.582 554.921 184.02 554.636 cv
cp
183.721 570.656 mo
182.938 571.141 182.451 571.828 182.259 572.719 cv
182.067 573.607 182.23 574.418 182.749 575.151 cv
183.297 575.924 184.057 576.416 185.027 576.625 cv
185.997 576.835 186.874 576.697 187.656 576.211 cv
188.468 575.765 188.97 575.098 189.161 574.21 cv
189.354 573.32 189.176 572.489 188.627 571.716 cv
188.109 570.982 187.364 570.511 186.393 570.301 cv
185.423 570.092 184.532 570.209 183.721 570.656 cv
cp
147.61 516.75 mo
151.637 520.691 157.017 524.577 163.749 528.407 cv
163.77 528.437 li
170.329 532.137 177.859 535.695 186.358 539.109 cv
194.793 542.496 203.845 545.666 213.514 548.622 cv
213.509 548.647 li
223.133 551.556 233.035 554.144 243.217 556.409 cv
253.388 558.714 263.462 560.596 273.437 562.056 cv
283.432 563.549 292.984 564.525 302.1 564.992 cv
311.285 565.504 319.674 565.419 327.272 564.741 cv
335.047 564.025 341.629 562.609 347.014 560.498 cv
350.065 559.314 352.647 557.907 354.755 556.275 cv
355.275 557.763 355.592 559.427 355.71 561.265 cv
355.899 564.781 355.58 568.608 354.753 572.746 cv
353.915 576.98 352.742 581.226 351.241 585.484 cv
349.736 589.729 348.096 593.659 346.323 597.273 cv
344.545 600.828 342.843 603.772 341.226 606.103 cv
340.874 606.555 340.488 606.988 340.07 607.404 cv
340.046 607.423 340.022 607.444 340 607.465 cv
339.978 607.488 339.954 607.51 339.93 607.528 cv
338.052 609.179 335.438 610.511 332.095 611.524 cv
332.036 611.538 li
327.225 613.053 321.322 613.993 314.325 614.357 cv
314.296 614.351 li
307.08 614.759 299.084 614.677 290.305 614.108 cv
290.31 614.083 li
281.471 613.47 272.195 612.456 262.486 611.045 cv
252.751 609.595 242.904 607.794 232.948 605.647 cv
222.998 603.494 213.278 601.068 203.784 598.364 cv
194.349 595.642 185.476 592.734 177.163 589.641 cv
177.158 589.665 li
168.926 586.56 161.627 583.337 155.257 579.994 cv
149.019 576.74 143.994 573.44 140.18 570.092 cv
137.641 567.839 135.847 565.607 134.797 563.396 cv
134.775 563.31 134.746 563.226 134.71 563.145 cv
134.449 562.552 134.258 561.951 134.14 561.341 cv
133.592 558.563 133.282 555.246 133.213 551.392 cv
133.218 551.367 li
133.117 547.432 133.283 543.269 133.714 538.882 cv
134.199 534.454 134.95 530.151 135.966 525.974 cv
136.959 521.874 138.248 518.214 139.835 514.993 cv
140.691 513.288 141.639 511.812 142.682 510.566 cv
143.884 512.605 145.52 514.656 147.59 516.719 cv
147.61 516.75 li
cp
204.494 431.116 mo
203.484 429.691 202.081 428.784 200.283 428.396 cv
198.486 428.008 196.816 428.25 195.272 429.124 cv
193.758 430.036 192.823 431.317 192.467 432.964 cv
192.111 434.611 192.438 436.148 193.447 437.573 cv
194.485 439.038 195.903 439.964 197.701 440.353 cv
199.499 440.741 201.154 440.479 202.669 439.565 cv
204.213 438.691 205.162 437.431 205.518 435.783 cv
205.874 434.136 205.533 432.58 204.494 431.116 cv
cp
180.267 494.663 mo
181.258 494.085 181.866 493.268 182.094 492.214 cv
182.322 491.16 182.104 490.165 181.441 489.228 cv
180.778 488.292 179.872 487.699 178.721 487.45 cv
177.57 487.202 176.499 487.368 175.509 487.947 cv
174.519 488.526 173.909 489.342 173.682 490.396 cv
173.454 491.45 173.672 492.446 174.335 493.382 cv
174.998 494.318 175.905 494.91 177.055 495.159 cv
178.206 495.407 179.276 495.242 180.267 494.663 cv
cp
186.475 513.484 mo
186.941 513.24 187.228 512.87 187.334 512.376 cv
187.441 511.883 187.336 511.411 187.019 510.965 cv
186.731 510.557 186.316 510.296 185.777 510.179 cv
185.238 510.063 184.735 510.125 184.268 510.37 cv
183.831 510.654 183.559 511.044 183.452 511.538 cv
183.345 512.032 183.436 512.483 183.724 512.89 cv
184.041 513.338 184.47 513.619 185.009 513.736 cv
185.548 513.852 186.037 513.769 186.475 513.484 cv
cp
202.755 524.086 mo
201.605 523.837 200.534 524.003 199.544 524.581 cv
198.553 525.16 197.944 525.977 197.716 527.031 cv
197.489 528.084 197.707 529.08 198.369 530.017 cv
199.033 530.953 199.94 531.546 201.09 531.794 cv
202.24 532.042 203.311 531.877 204.302 531.299 cv
205.293 530.718 205.902 529.901 206.13 528.848 cv
206.358 527.794 206.14 526.798 205.476 525.863 cv
204.812 524.927 203.906 524.334 202.755 524.086 cv
cp
154.581 452.474 mo
155.832 454.773 157.628 457.083 159.971 459.405 cv
159.992 459.435 li
164.019 463.375 169.398 467.262 176.13 471.092 cv
176.151 471.123 li
182.71 474.822 190.24 478.38 198.739 481.794 cv
207.174 485.18 216.226 488.351 225.896 491.306 cv
225.89 491.332 li
235.514 494.242 245.417 496.829 255.598 499.094 cv
265.77 501.398 275.843 503.282 285.818 504.742 cv
295.814 506.234 305.366 507.211 314.481 507.677 cv
323.667 508.188 332.055 508.104 339.653 507.427 cv
347.429 506.71 354.01 505.295 359.395 503.183 cv
359.39 503.208 li
362.471 502.016 365.075 500.588 367.203 498.922 cv
367.469 500.204 367.615 501.579 367.637 503.051 cv
367.631 503.075 li
367.708 506.653 367.322 510.492 366.471 514.59 cv
365.599 518.798 364.439 522.995 362.988 527.18 cv
361.563 531.357 360.016 535.254 358.346 538.873 cv
356.693 542.473 355.142 545.508 353.698 547.979 cv
353.442 548.366 353.171 548.747 352.887 549.122 cv
352.814 549.21 352.748 549.297 352.687 549.39 cv
350.761 551.626 347.955 553.459 344.274 554.89 cv
339.389 556.765 333.428 558.019 326.384 558.654 cv
319.093 559.31 311.041 559.397 302.227 558.917 cv
293.334 558.456 284.012 557.494 274.259 556.03 cv
274.232 556.024 li
264.436 554.593 254.542 552.749 244.551 550.491 cv
234.555 548.259 224.832 545.71 215.383 542.846 cv
215.378 542.87 li
205.916 539.969 197.058 536.857 188.804 533.536 cv
180.615 530.242 173.359 526.813 167.037 523.248 cv
167.058 523.279 li
160.923 519.778 156.016 516.235 152.335 512.651 cv
149.601 509.919 147.842 507.22 147.056 504.555 cv
147.041 504.5 li
147.03 504.463 147.019 504.426 147.007 504.389 cv
146.986 504.321 146.963 504.255 146.937 504.193 cv
146.86 503.879 146.806 503.566 146.773 503.253 cv
146.751 503.222 li
146.385 500.363 146.156 496.936 146.066 492.937 cv
145.989 488.873 146.143 484.588 146.529 480.083 cv
146.534 480.058 li
146.881 475.576 147.511 471.221 148.425 466.994 cv
149.313 462.903 150.554 459.293 152.148 456.163 cv
152.868 454.746 153.679 453.516 154.581 452.474 cv
cp
225.154 422.624 mo
234.534 425.695 244.346 428.53 254.587 431.129 cv
264.785 433.748 275.05 436.051 285.382 438.04 cv
295.764 440.035 305.851 441.637 315.643 442.845 cv
325.501 444.073 334.718 444.831 343.29 445.12 cv
352.023 445.412 359.778 445.14 366.555 444.301 cv
371.589 443.683 375.926 442.732 379.561 441.449 cv
379.842 442.768 379.996 444.198 380.018 445.735 cv
380.013 445.76 li
380.089 449.339 379.703 453.177 378.853 457.275 cv
377.981 461.483 376.821 465.681 375.37 469.865 cv
373.945 474.042 372.398 477.94 370.727 481.558 cv
369.088 485.125 367.553 488.137 366.122 490.596 cv
366.109 490.618 366.093 490.641 366.08 490.663 cv
365.945 490.878 365.802 491.097 365.654 491.323 cv
365.649 491.347 li
365.636 491.368 365.623 491.389 365.606 491.416 cv
365.601 491.44 li
365.566 491.481 365.541 491.518 365.52 491.552 cv
363.584 494.032 360.629 496.031 356.661 497.549 cv
356.655 497.576 li
351.771 499.45 345.81 500.704 338.766 501.338 cv
331.475 501.995 323.422 502.082 314.609 501.601 cv
305.715 501.141 296.394 500.179 286.64 498.714 cv
286.613 498.708 li
276.818 497.278 266.924 495.434 256.932 493.176 cv
246.936 490.945 237.213 488.396 227.765 485.531 cv
227.76 485.554 li
218.297 482.654 209.44 479.542 201.185 476.22 cv
192.996 472.927 185.741 469.497 179.418 465.932 cv
179.439 465.963 li
173.305 462.462 168.397 458.921 164.716 455.336 cv
161.842 452.488 160.041 449.676 159.313 446.902 cv
159.307 446.834 159.295 446.762 159.275 446.688 cv
159.274 446.664 159.271 446.637 159.264 446.608 cv
159.257 446.583 159.254 446.556 159.253 446.528 cv
159.231 446.497 li
159.195 446.334 159.167 446.164 159.144 445.988 cv
159.139 445.962 159.135 445.936 159.133 445.906 cv
158.766 443.049 158.538 439.621 158.448 435.622 cv
158.371 431.557 158.525 427.273 158.91 422.767 cv
158.915 422.743 li
159.263 418.261 159.893 413.906 160.806 409.68 cv
161.692 405.597 162.931 401.994 164.524 398.873 cv
165.371 397.21 166.353 395.801 167.468 394.648 cv
170.262 397.281 173.858 399.928 178.256 402.59 cv
184.112 406.12 191.041 409.583 199.042 412.975 cv
206.994 416.325 215.698 419.542 225.154 422.624 cv
cp
280.233 129.635 mo
279.339 128.373 278.102 127.571 276.519 127.229 cv
274.937 126.888 273.461 127.104 272.09 127.876 cv
270.748 128.689 269.92 129.821 269.607 131.27 cv
269.294 132.72 269.584 134.076 270.478 135.337 cv
271.401 136.64 272.653 137.462 274.235 137.804 cv
275.817 138.145 277.279 137.91 278.621 137.096 cv
279.993 136.324 280.835 135.213 281.148 133.763 cv
281.461 132.314 281.156 130.938 280.233 129.635 cv
cp
280.52 177.172 mo
280.691 176.381 280.531 175.64 280.04 174.948 cv
279.579 174.296 278.917 173.878 278.054 173.692 cv
277.191 173.505 276.397 173.609 275.672 174.005 cv
274.976 174.44 274.543 175.053 274.372 175.844 cv
274.201 176.634 274.347 177.355 274.808 178.006 cv
275.298 178.699 275.974 179.138 276.837 179.324 cv
277.7 179.51 278.479 179.387 279.176 178.95 cv
279.901 178.555 280.349 177.962 280.52 177.172 cv
cp
254.663 182.938 mo
254.516 182.665 254.349 182.396 254.16 182.131 cv
253.093 180.625 251.607 179.666 249.701 179.254 cv
247.796 178.843 246.028 179.099 244.399 180.022 cv
242.799 180.987 241.809 182.341 241.432 184.087 cv
241.055 185.834 241.4 187.459 242.467 188.965 cv
243.563 190.512 245.063 191.492 246.969 191.903 cv
248.051 192.137 249.082 192.153 250.063 191.951 cv
250.815 191.783 251.536 191.491 252.228 191.074 cv
253.858 190.15 254.861 188.816 255.238 187.07 cv
255.55 185.624 255.359 184.247 254.663 182.938 cv
cp
395.911 382.482 mo
386.091 427.939 li
385.999 428.367 385.72 429.057 385.251 430.007 cv
384.26 431.712 382.633 433.152 380.366 434.33 cv
380.334 434.348 li
380.293 434.366 380.251 434.381 380.21 434.399 cv
380.176 434.419 li
380.113 434.447 380.053 434.476 379.99 434.507 cv
379.921 434.539 379.858 434.567 379.8 434.596 cv
376.093 436.325 371.304 437.549 365.431 438.266 cv
358.988 439.052 351.613 439.304 343.312 439.021 cv
334.921 438.748 325.906 438.016 316.269 436.825 cv
306.635 435.629 296.712 434.046 286.502 432.076 cv
276.313 430.113 266.192 427.841 256.138 425.258 cv
246.052 422.706 236.39 419.92 227.152 416.902 cv
227.125 416.896 li
217.88 413.869 209.37 410.713 201.597 407.424 cv
193.944 404.196 187.318 400.902 181.717 397.545 cv
176.678 394.486 172.825 391.464 170.156 388.48 cv
169.975 388.271 169.81 388.08 169.658 387.908 cv
169.729 387.975 li
168.211 386.174 167.313 384.409 167.033 382.685 cv
166.895 381.931 166.893 381.241 167.028 380.616 cv
176.843 335.184 li
206.968 348.158 243.279 359.234 285.775 368.412 cv
328.225 377.578 364.935 382.268 395.911 382.482 cv
cp
400.411 239.634 mo
401.05 239.29 401.443 238.77 401.592 238.079 cv
401.742 237.387 401.601 236.736 401.169 236.126 cv
400.764 235.556 400.184 235.189 399.43 235.026 cv
398.674 234.863 397.978 234.954 397.339 235.298 cv
396.729 235.683 396.351 236.223 396.201 236.914 cv
396.052 237.606 396.177 238.237 396.582 238.807 cv
397.014 239.417 397.607 239.804 398.363 239.967 cv
399.117 240.13 399.8 240.019 400.411 239.634 cv
cp
338.657 199.919 mo
338.253 199.348 337.675 198.983 336.919 198.819 cv
336.165 198.656 335.467 198.746 334.828 199.091 cv
334.219 199.478 333.839 200.016 333.69 200.707 cv
333.54 201.399 333.668 202.03 334.07 202.6 cv
334.502 203.21 335.098 203.597 335.852 203.76 cv
336.608 203.923 337.289 203.812 337.899 203.427 cv
338.538 203.082 338.933 202.564 339.083 201.872 cv
339.232 201.181 339.09 200.53 338.657 199.919 cv
cp
282.358 209.426 mo
282.507 208.734 282.366 208.082 281.933 207.472 cv
281.529 206.902 280.95 206.535 280.195 206.372 cv
279.44 206.209 278.743 206.3 278.104 206.645 cv
277.495 207.03 277.114 207.569 276.965 208.261 cv
276.816 208.952 276.943 209.583 277.346 210.153 cv
277.779 210.764 278.372 211.15 279.128 211.314 cv
279.882 211.477 280.565 211.366 281.175 210.98 cv
281.814 210.635 282.208 210.117 282.358 209.426 cv
cp
319.93 393.477 mo
318.767 394.157 318.051 395.122 317.78 396.375 cv
317.51 397.626 317.764 398.802 318.542 399.901 cv
319.321 401 320.394 401.697 321.759 401.992 cv
323.125 402.287 324.392 402.095 325.553 401.415 cv
326.718 400.736 327.434 399.77 327.705 398.519 cv
327.975 397.266 327.721 396.091 326.94 394.992 cv
326.164 393.893 325.089 393.195 323.723 392.9 cv
322.358 392.605 321.093 392.798 319.93 393.477 cv
cp
362.698 199.682 mo
362.926 198.628 362.709 197.633 362.044 196.697 cv
361.382 195.76 360.474 195.168 359.323 194.92 cv
358.173 194.671 357.102 194.836 356.112 195.415 cv
355.122 195.994 354.511 196.811 354.284 197.865 cv
354.056 198.919 354.275 199.914 354.938 200.85 cv
355.6 201.786 356.508 202.379 357.658 202.627 cv
358.809 202.876 359.88 202.711 360.87 202.132 cv
361.862 201.553 362.47 200.736 362.698 199.682 cv
cp
384.834 171.159 mo
385.472 170.815 385.865 170.297 386.015 169.604 cv
386.164 168.913 386.024 168.262 385.591 167.652 cv
385.187 167.081 384.609 166.716 383.853 166.552 cv
383.099 166.389 382.401 166.479 381.762 166.824 cv
381.153 167.21 380.773 167.749 380.624 168.439 cv
380.475 169.132 380.602 169.763 381.004 170.332 cv
381.437 170.943 382.032 171.33 382.786 171.493 cv
383.542 171.656 384.223 171.545 384.834 171.159 cv
cp
311.773 169.546 mo
321.703 171.657 331.612 173.868 341.499 176.175 cv
351.389 178.519 360.934 180.89 370.132 183.291 cv
379.321 185.69 387.875 188.073 395.797 190.439 cv
403.689 192.757 410.615 194.968 416.577 197.074 cv
422.257 199.108 426.775 200.972 430.13 202.665 cv
430.205 202.717 430.287 202.769 430.377 202.822 cv
430.487 202.882 430.606 202.943 430.732 203.002 cv
431.898 203.578 432.849 204.138 433.588 204.679 cv
433.797 204.835 434.012 204.969 434.235 205.077 cv
422.259 260.515 li
391.963 249.609 355.809 239.722 313.799 230.852 cv
313.772 230.847 li
274.888 222.623 238.035 216.713 203.212 213.118 cv
215.236 157.458 li
215.51 157.438 215.784 157.387 216.06 157.3 cv
216.919 157.029 218.004 156.84 219.315 156.736 cv
219.345 156.734 219.374 156.731 219.401 156.729 cv
219.435 156.726 219.463 156.724 219.488 156.721 cv
219.516 156.721 219.545 156.719 219.574 156.714 cv
219.599 156.714 219.628 156.713 219.66 156.707 cv
219.69 156.707 219.718 156.705 219.746 156.699 cv
219.838 156.69 219.926 156.674 220.01 156.654 cv
223.819 156.379 228.762 156.489 234.84 156.986 cv
241.173 157.503 248.404 158.35 256.532 159.526 cv
264.7 160.706 273.448 162.148 282.776 163.851 cv
292.153 165.568 301.81 167.464 311.746 169.541 cv
311.773 169.546 li
cp
313 163.606 mo
302.999 161.514 293.28 159.604 283.841 157.876 cv
274.418 156.149 265.579 154.688 257.327 153.493 cv
249.034 152.293 241.656 151.433 235.193 150.909 cv
232.102 150.659 229.284 150.507 226.74 150.453 cv
238.916 138.623 250.307 128.353 260.914 119.644 cv
265.771 115.711 273.019 110.424 282.656 103.785 cv
287.422 100.539 291.728 97.5901 295.574 94.9391 cv
384.505 114.15 li
384.556 114.264 387.369 118.665 392.942 127.351 cv
399.153 137.276 403.755 145.148 406.75 150.966 cv
413.278 163.697 419.915 178.18 426.661 194.417 cv
424.322 193.452 421.689 192.443 418.762 191.392 cv
412.697 189.244 405.648 186.99 397.617 184.626 cv
389.629 182.245 381.003 179.846 371.74 177.432 cv
362.485 175.02 352.887 172.636 342.943 170.281 cv
342.917 170.275 li
332.974 167.955 323.012 165.733 313.027 163.612 cv
313 163.606 li
cp
349.811 143.062 mo
348.012 142.674 346.34 142.917 344.799 143.79 cv
343.284 144.704 342.349 145.984 341.993 147.632 cv
341.637 149.278 341.965 150.814 342.973 152.239 cv
344.01 153.704 345.429 154.631 347.228 155.02 cv
349.025 155.408 350.682 155.145 352.196 154.231 cv
353.738 153.357 354.689 152.098 355.044 150.451 cv
355.4 148.803 355.057 147.248 354.021 145.782 cv
353.012 144.358 351.608 143.451 349.811 143.062 cv
cp
332.763 126.865 mo
333.488 126.47 333.935 125.876 334.106 125.086 cv
334.277 124.296 334.118 123.555 333.628 122.863 cv
333.166 122.211 332.504 121.793 331.641 121.607 cv
330.778 121.42 329.984 121.524 329.259 121.919 cv
328.563 122.355 328.129 122.968 327.958 123.758 cv
327.788 124.548 327.933 125.27 328.394 125.921 cv
328.885 126.613 329.561 127.053 330.424 127.239 cv
331.287 127.425 332.066 127.301 332.763 126.865 cv
cp
319.434 139.965 mo
318.996 140.25 318.724 140.64 318.617 141.133 cv
318.51 141.628 318.601 142.079 318.889 142.486 cv
319.206 142.933 319.635 143.215 320.174 143.332 cv
320.713 143.448 321.202 143.364 321.64 143.08 cv
322.107 142.836 322.393 142.467 322.5 141.972 cv
322.607 141.478 322.502 141.007 322.184 140.559 cv
321.895 140.153 321.482 139.891 320.943 139.774 cv
320.404 139.658 319.9 139.722 319.434 139.965 cv
cp
397.522 104.188 mo
398.19 105.019 398.433 105.933 398.258 106.933 cv
398.249 106.966 398.242 106.999 398.237 107.032 cv
397.982 108.014 397.382 108.747 396.433 109.228 cv
396.407 109.241 396.376 109.252 396.344 109.261 cv
395.25 109.82 394.014 109.967 392.634 109.7 cv
289.71 87.466 li
288.33 87.1412 287.257 86.4953 286.487 85.5289 cv
286.466 85.4984 li
285.793 84.6471 285.535 83.7041 285.694 82.6679 cv
285.977 81.6594 286.601 80.906 287.565 80.4091 cv
287.597 80.3903 li
288.653 79.8529 289.853 79.6991 291.197 79.9272 cv
291.233 79.935 291.27 79.9428 291.305 79.9505 cv
394.069 102.15 li
394.127 102.16 394.189 102.173 394.257 102.191 cv
394.366 102.214 li
395.683 102.561 396.714 103.197 397.454 104.122 cv
397.48 104.143 397.503 104.165 397.522 104.188 cv
cp
.539391 0 0 0 cmyk
ef
237.159 638.413 mo
237.661 638.521 238.057 638.78 238.345 639.187 cv
238.663 639.634 238.773 640.089 238.673 640.55 cv
238.573 641.012 238.29 641.363 237.822 641.607 cv
237.384 641.892 236.914 641.98 236.412 641.872 cv
235.908 641.763 235.497 641.484 235.18 641.036 cv
234.89 640.629 234.798 640.196 234.897 639.734 cv
234.997 639.274 235.264 638.899 235.703 638.616 cv
236.169 638.372 236.655 638.304 237.159 638.413 cv
cp
217.708 657.897 mo
216.717 658.476 215.647 658.641 214.496 658.393 cv
213.346 658.144 212.439 657.552 211.776 656.615 cv
211.113 655.68 210.895 654.684 211.123 653.63 cv
211.35 652.576 211.959 651.76 212.95 651.18 cv
213.94 650.601 215.012 650.436 216.162 650.684 cv
217.313 650.933 218.219 651.526 218.882 652.461 cv
219.545 653.399 219.763 654.393 219.535 655.447 cv
219.307 656.501 218.699 657.319 217.708 657.897 cv
cp
294.267 654.68 mo
293.277 655.259 292.206 655.425 291.055 655.176 cv
289.905 654.928 288.997 654.335 288.335 653.398 cv
287.672 652.463 287.455 651.467 287.683 650.413 cv
287.91 649.359 288.519 648.543 289.509 647.964 cv
290.499 647.384 291.57 647.22 292.72 647.468 cv
293.871 647.717 294.778 648.309 295.441 649.245 cv
296.103 650.181 296.323 651.177 296.095 652.231 cv
295.867 653.285 295.257 654.101 294.267 654.68 cv
cp
329.216 588.535 mo
328.695 587.804 328.533 586.993 328.726 586.103 cv
328.918 585.214 329.403 584.526 330.187 584.04 cv
330.999 583.594 331.89 583.476 332.86 583.685 cv
333.831 583.895 334.574 584.367 335.095 585.1 cv
335.641 585.874 335.82 586.706 335.628 587.594 cv
335.436 588.484 334.933 589.151 334.124 589.595 cv
333.34 590.081 332.465 590.221 331.494 590.011 cv
330.523 589.802 329.765 589.309 329.216 588.535 cv
cp
304.584 579.75 mo
304.414 580.54 303.965 581.133 303.24 581.529 cv
302.543 581.964 301.764 582.088 300.902 581.902 cv
300.039 581.715 299.362 581.277 298.871 580.585 cv
298.409 579.933 298.265 579.211 298.435 578.421 cv
298.606 577.631 299.039 577.018 299.736 576.582 cv
300.462 576.187 301.256 576.083 302.119 576.269 cv
302.981 576.455 303.642 576.874 304.105 577.526 cv
304.595 578.218 304.755 578.96 304.584 579.75 cv
cp
320.789 525.639 mo
321.77 527.024 322.091 528.489 321.757 530.037 cv
321.422 531.586 320.528 532.772 319.071 533.595 cv
317.641 534.458 316.083 534.707 314.393 534.342 cv
312.704 533.977 311.369 533.103 310.386 531.718 cv
309.437 530.376 309.127 528.93 309.461 527.381 cv
309.796 525.833 310.679 524.628 312.104 523.763 cv
313.564 522.942 315.138 522.711 316.827 523.076 cv
318.517 523.441 319.836 524.297 320.789 525.639 cv
cp
227.101 529.759 mo
227.706 530.614 227.905 531.518 227.699 532.474 cv
227.492 533.429 226.937 534.17 226.034 534.699 cv
225.129 535.228 224.155 535.379 223.113 535.154 cv
222.07 534.929 221.246 534.389 220.64 533.534 cv
220.035 532.679 219.834 531.775 220.041 530.819 cv
220.247 529.864 220.803 529.122 221.707 528.594 cv
222.612 528.064 223.585 527.913 224.628 528.138 cv
225.671 528.364 226.495 528.903 227.101 529.759 cv
cp
221.563 501.826 mo
222.426 502.013 223.087 502.431 223.55 503.082 cv
224.04 503.774 224.199 504.515 224.028 505.306 cv
223.858 506.096 223.41 506.69 222.685 507.085 cv
221.988 507.519 221.209 507.645 220.346 507.459 cv
219.483 507.272 218.807 506.832 218.316 506.141 cv
217.855 505.49 217.71 504.768 217.88 503.978 cv
218.051 503.187 218.485 502.575 219.181 502.139 cv
219.906 501.744 220.7 501.64 221.563 501.826 cv
cp
295.934 523.372 mo
296.126 522.484 296.614 521.796 297.395 521.311 cv
298.207 520.865 299.097 520.747 300.068 520.957 cv
301.039 521.167 301.782 521.637 302.303 522.371 cv
302.851 523.144 303.028 523.975 302.837 524.864 cv
302.644 525.754 302.143 526.422 301.332 526.867 cv
300.548 527.353 299.673 527.491 298.702 527.281 cv
297.731 527.071 296.972 526.581 296.424 525.807 cv
295.906 525.075 295.741 524.263 295.934 523.372 cv
cp
262.215 535.483 mo
260.958 535.211 259.968 534.566 259.248 533.549 cv
258.525 532.531 258.29 531.446 258.539 530.293 cv
258.789 529.139 259.45 528.247 260.529 527.62 cv
261.605 526.99 262.772 526.812 264.03 527.084 cv
265.288 527.355 266.277 527.999 267 529.018 cv
267.721 530.034 267.957 531.12 267.708 532.273 cv
267.459 533.427 266.795 534.317 265.719 534.947 cv
264.641 535.575 263.473 535.754 262.215 535.483 cv
cp
231.287 461.778 mo
230.296 462.357 229.226 462.521 228.075 462.273 cv
226.925 462.024 226.017 461.433 225.354 460.497 cv
224.691 459.561 224.473 458.566 224.701 457.512 cv
224.929 456.457 225.538 455.641 226.528 455.062 cv
227.519 454.483 228.59 454.318 229.74 454.566 cv
230.891 454.815 231.797 455.407 232.461 456.344 cv
233.124 457.28 233.342 458.275 233.114 459.33 cv
232.886 460.383 232.277 461.2 231.287 461.778 cv
cp
297.342 401.889 mo
297.831 402.579 297.99 403.321 297.82 404.112 cv
297.649 404.902 297.201 405.495 296.478 405.89 cv
295.781 406.326 295.001 406.451 294.138 406.265 cv
293.274 406.078 292.598 405.638 292.107 404.946 cv
291.647 404.295 291.5 403.574 291.671 402.784 cv
291.842 401.993 292.277 401.38 292.972 400.945 cv
293.697 400.55 294.491 400.446 295.354 400.632 cv
296.218 400.819 296.88 401.237 297.342 401.889 cv
cp
316.023 421.231 mo
316.994 421.441 317.739 421.912 318.257 422.646 cv
318.806 423.418 318.985 424.25 318.793 425.139 cv
318.601 426.029 318.098 426.698 317.286 427.141 cv
316.505 427.628 315.627 427.766 314.657 427.556 cv
313.686 427.347 312.927 426.855 312.379 426.081 cv
311.858 425.35 311.696 424.537 311.888 423.648 cv
312.081 422.758 312.567 422.07 313.35 421.586 cv
314.162 421.139 315.052 421.022 316.023 421.231 cv
cp
322.239 483.391 mo
321.076 484.071 319.811 484.263 318.444 483.968 cv
317.079 483.673 316.006 482.975 315.227 481.876 cv
314.448 480.778 314.194 479.602 314.465 478.35 cv
314.735 477.099 315.452 476.133 316.615 475.454 cv
317.777 474.774 319.043 474.582 320.408 474.877 cv
321.775 475.172 322.848 475.87 323.627 476.969 cv
324.406 478.067 324.66 479.243 324.389 480.494 cv
324.119 481.746 323.402 482.712 322.239 483.391 cv
cp
179.094 639.367 mo
178.944 640.06 178.55 640.577 177.911 640.922 cv
177.301 641.307 176.619 641.418 175.863 641.255 cv
175.108 641.092 174.515 640.705 174.082 640.095 cv
173.679 639.524 173.551 638.895 173.701 638.202 cv
173.85 637.51 174.23 636.971 174.84 636.586 cv
175.479 636.242 176.176 636.151 176.931 636.314 cv
177.686 636.477 178.265 636.844 178.669 637.413 cv
179.102 638.024 179.243 638.675 179.094 639.367 cv
cp
185.75 611.948 mo
186.794 612.174 187.618 612.713 188.223 613.568 cv
188.829 614.424 189.028 615.328 188.822 616.284 cv
188.616 617.239 188.06 617.981 187.155 618.51 cv
186.251 619.038 185.278 619.189 184.235 618.964 cv
183.192 618.739 182.369 618.2 181.762 617.345 cv
181.157 616.49 180.957 615.584 181.164 614.63 cv
181.37 613.674 181.926 612.932 182.83 612.403 cv
183.735 611.875 184.708 611.723 185.75 611.948 cv
cp
183.721 570.656 mo
184.532 570.209 185.423 570.092 186.393 570.301 cv
187.364 570.511 188.109 570.982 188.627 571.716 cv
189.176 572.489 189.354 573.32 189.161 574.21 cv
188.97 575.098 188.468 575.765 187.656 576.211 cv
186.874 576.697 185.997 576.835 185.027 576.625 cv
184.057 576.416 183.297 575.924 182.749 575.151 cv
182.23 574.418 182.067 573.607 182.259 572.719 cv
182.451 571.828 182.938 571.141 183.721 570.656 cv
cp
184.02 554.636 mo
183.582 554.921 183.093 555.005 182.554 554.889 cv
182.015 554.772 181.587 554.489 181.269 554.042 cv
180.981 553.634 180.89 553.184 180.997 552.69 cv
181.104 552.195 181.375 551.808 181.814 551.522 cv
182.28 551.278 182.783 551.214 183.322 551.331 cv
183.861 551.447 184.276 551.709 184.564 552.116 cv
184.881 552.565 184.987 553.033 184.88 553.529 cv
184.773 554.023 184.486 554.391 184.02 554.636 cv
cp
202.755 524.086 mo
203.906 524.334 204.812 524.927 205.476 525.863 cv
206.14 526.798 206.358 527.794 206.13 528.848 cv
205.902 529.901 205.293 530.718 204.302 531.299 cv
203.311 531.877 202.24 532.042 201.09 531.794 cv
199.94 531.546 199.033 530.953 198.369 530.017 cv
197.707 529.08 197.489 528.084 197.716 527.031 cv
197.944 525.977 198.553 525.16 199.544 524.581 cv
200.534 524.003 201.605 523.837 202.755 524.086 cv
cp
186.475 513.484 mo
186.037 513.769 185.548 513.852 185.009 513.736 cv
184.47 513.619 184.041 513.338 183.724 512.89 cv
183.436 512.483 183.345 512.032 183.452 511.538 cv
183.559 511.044 183.831 510.654 184.268 510.37 cv
184.735 510.125 185.238 510.063 185.777 510.179 cv
186.316 510.296 186.731 510.557 187.019 510.965 cv
187.336 511.411 187.441 511.883 187.334 512.376 cv
187.228 512.87 186.941 513.24 186.475 513.484 cv
cp
180.267 494.663 mo
179.276 495.242 178.206 495.407 177.055 495.159 cv
175.905 494.91 174.998 494.318 174.335 493.382 cv
173.672 492.446 173.454 491.45 173.682 490.396 cv
173.909 489.342 174.519 488.526 175.509 487.947 cv
176.499 487.368 177.57 487.202 178.721 487.45 cv
179.872 487.699 180.778 488.292 181.441 489.228 cv
182.104 490.165 182.322 491.16 182.094 492.214 cv
181.866 493.268 181.258 494.085 180.267 494.663 cv
cp
204.494 431.116 mo
205.533 432.58 205.874 434.136 205.518 435.783 cv
205.162 437.431 204.213 438.691 202.669 439.565 cv
201.154 440.479 199.499 440.741 197.701 440.353 cv
195.903 439.964 194.485 439.038 193.447 437.573 cv
192.438 436.148 192.111 434.611 192.467 432.964 cv
192.823 431.317 193.758 430.036 195.272 429.124 cv
196.816 428.25 198.486 428.008 200.283 428.396 cv
202.081 428.784 203.484 429.691 204.494 431.116 cv
cp
254.663 182.938 mo
255.359 184.247 255.55 185.624 255.238 187.07 cv
254.861 188.816 253.858 190.15 252.228 191.074 cv
251.536 191.491 250.815 191.783 250.063 191.951 cv
249.082 192.153 248.051 192.137 246.969 191.903 cv
245.063 191.492 243.563 190.512 242.467 188.965 cv
241.4 187.459 241.055 185.834 241.432 184.087 cv
241.809 182.341 242.799 180.987 244.399 180.022 cv
246.028 179.099 247.796 178.843 249.701 179.254 cv
251.607 179.666 253.093 180.625 254.16 182.131 cv
254.349 182.396 254.516 182.665 254.663 182.938 cv
cp
280.52 177.172 mo
280.349 177.962 279.901 178.555 279.176 178.95 cv
278.479 179.387 277.7 179.51 276.837 179.324 cv
275.974 179.138 275.298 178.699 274.808 178.006 cv
274.347 177.355 274.201 176.634 274.372 175.844 cv
274.543 175.053 274.976 174.44 275.672 174.005 cv
276.397 173.609 277.191 173.505 278.054 173.692 cv
278.917 173.878 279.579 174.296 280.04 174.948 cv
280.531 175.64 280.691 176.381 280.52 177.172 cv
cp
280.233 129.635 mo
281.156 130.938 281.461 132.314 281.148 133.763 cv
280.835 135.213 279.993 136.324 278.621 137.096 cv
277.279 137.91 275.817 138.145 274.235 137.804 cv
272.653 137.462 271.401 136.64 270.478 135.337 cv
269.584 134.076 269.294 132.72 269.607 131.27 cv
269.92 129.821 270.748 128.689 272.09 127.876 cv
273.461 127.104 274.937 126.888 276.519 127.229 cv
278.102 127.571 279.339 128.373 280.233 129.635 cv
cp
319.93 393.477 mo
321.093 392.798 322.358 392.605 323.723 392.9 cv
325.089 393.195 326.164 393.893 326.94 394.992 cv
327.721 396.091 327.975 397.266 327.705 398.519 cv
327.434 399.77 326.718 400.736 325.553 401.415 cv
324.392 402.095 323.125 402.287 321.759 401.992 cv
320.394 401.697 319.321 401 318.542 399.901 cv
317.764 398.802 317.51 397.626 317.78 396.375 cv
318.051 395.122 318.767 394.157 319.93 393.477 cv
cp
282.358 209.426 mo
282.208 210.117 281.814 210.635 281.175 210.98 cv
280.565 211.366 279.882 211.477 279.128 211.314 cv
278.372 211.15 277.779 210.764 277.346 210.153 cv
276.943 209.583 276.816 208.952 276.965 208.261 cv
277.114 207.569 277.495 207.03 278.104 206.645 cv
278.743 206.3 279.44 206.209 280.195 206.372 cv
280.95 206.535 281.529 206.902 281.933 207.472 cv
282.366 208.082 282.507 208.734 282.358 209.426 cv
cp
338.657 199.919 mo
339.09 200.53 339.232 201.181 339.083 201.872 cv
338.933 202.564 338.538 203.082 337.899 203.427 cv
337.289 203.812 336.608 203.923 335.852 203.76 cv
335.098 203.597 334.502 203.21 334.07 202.6 cv
333.668 202.03 333.54 201.399 333.69 200.707 cv
333.839 200.016 334.219 199.478 334.828 199.091 cv
335.467 198.746 336.165 198.656 336.919 198.819 cv
337.675 198.983 338.253 199.348 338.657 199.919 cv
cp
400.411 239.634 mo
399.8 240.019 399.117 240.13 398.363 239.967 cv
397.607 239.804 397.014 239.417 396.582 238.807 cv
396.177 238.237 396.052 237.606 396.201 236.914 cv
396.351 236.223 396.729 235.683 397.339 235.298 cv
397.978 234.954 398.674 234.863 399.43 235.026 cv
400.184 235.189 400.764 235.556 401.169 236.126 cv
401.601 236.736 401.742 237.387 401.592 238.079 cv
401.443 238.77 401.05 239.29 400.411 239.634 cv
cp
384.834 171.159 mo
384.223 171.545 383.542 171.656 382.786 171.493 cv
382.032 171.33 381.437 170.943 381.004 170.332 cv
380.602 169.763 380.475 169.132 380.624 168.439 cv
380.773 167.749 381.153 167.21 381.762 166.824 cv
382.401 166.479 383.099 166.389 383.853 166.552 cv
384.609 166.716 385.187 167.081 385.591 167.652 cv
386.024 168.262 386.164 168.913 386.015 169.604 cv
385.865 170.297 385.472 170.815 384.834 171.159 cv
cp
362.698 199.682 mo
362.47 200.736 361.862 201.553 360.87 202.132 cv
359.88 202.711 358.809 202.876 357.658 202.627 cv
356.508 202.379 355.6 201.786 354.938 200.85 cv
354.275 199.914 354.056 198.919 354.284 197.865 cv
354.511 196.811 355.122 195.994 356.112 195.415 cv
357.102 194.836 358.173 194.671 359.323 194.92 cv
360.474 195.168 361.382 195.76 362.044 196.697 cv
362.709 197.633 362.926 198.628 362.698 199.682 cv
cp
319.434 139.965 mo
319.9 139.722 320.404 139.658 320.943 139.774 cv
321.482 139.891 321.895 140.153 322.184 140.559 cv
322.502 141.007 322.607 141.478 322.5 141.972 cv
322.393 142.467 322.107 142.836 321.64 143.08 cv
321.202 143.364 320.713 143.448 320.174 143.332 cv
319.635 143.215 319.206 142.933 318.889 142.486 cv
318.601 142.079 318.51 141.628 318.617 141.133 cv
318.724 140.64 318.996 140.25 319.434 139.965 cv
cp
332.763 126.865 mo
332.066 127.301 331.287 127.425 330.424 127.239 cv
329.561 127.053 328.885 126.613 328.394 125.921 cv
327.933 125.27 327.788 124.548 327.958 123.758 cv
328.129 122.968 328.563 122.355 329.259 121.919 cv
329.984 121.524 330.778 121.42 331.641 121.607 cv
332.504 121.793 333.166 122.211 333.628 122.863 cv
334.118 123.555 334.277 124.296 334.106 125.086 cv
333.935 125.876 333.488 126.47 332.763 126.865 cv
cp
349.811 143.062 mo
351.608 143.451 353.012 144.358 354.021 145.782 cv
355.057 147.248 355.4 148.803 355.044 150.451 cv
354.689 152.098 353.738 153.357 352.196 154.231 cv
350.682 155.145 349.025 155.408 347.228 155.02 cv
345.429 154.631 344.01 153.704 342.973 152.239 cv
341.965 150.814 341.637 149.278 341.993 147.632 cv
342.349 145.984 343.284 144.704 344.799 143.79 cv
346.34 142.917 348.012 142.674 349.811 143.062 cv
cp
.246494 0 .00125124 0 cmyk
ef
174.869 595.298 mo
174.874 595.273 li
166.331 592.064 158.754 588.729 152.142 585.269 cv
145.328 581.705 139.845 578.081 135.694 574.398 cv
133.555 572.502 131.839 570.604 130.545 568.708 cv
129.031 570.01 127.709 571.733 126.578 573.876 cv
126.572 573.902 li
124.864 577.074 123.511 580.729 122.51 584.866 cv
122.505 584.892 li
121.442 589.129 120.716 593.488 120.328 597.97 cv
120.323 597.995 li
119.915 602.448 119.813 606.667 120.017 610.651 cv
120.011 610.676 li
120.168 614.536 120.594 617.791 121.288 620.442 cv
121.267 620.411 li
122.976 626.597 126.206 632.501 130.959 638.123 cv
135.816 643.886 141.88 649.263 149.15 654.256 cv
156.527 659.291 164.761 663.854 173.851 667.946 cv
182.963 672.048 192.571 675.563 202.676 678.49 cv
212.795 681.424 223.036 683.706 233.4 685.334 cv
233.427 685.34 li
243.771 686.931 253.854 687.773 263.672 687.866 cv
273.418 687.953 282.556 687.204 291.084 685.616 cv
299.479 684.02 306.911 681.54 313.38 678.176 cv
319.675 674.873 324.69 670.604 328.423 665.369 cv
328.418 665.394 li
330.465 662.451 332.398 659.119 334.218 655.399 cv
336.022 651.63 337.605 647.697 338.968 643.599 cv
340.313 639.532 341.306 635.507 341.944 631.521 cv
342.585 627.576 342.797 623.898 342.577 620.486 cv
342.572 620.51 li
342.405 618.252 341.978 616.212 341.297 614.392 cv
339.36 615.534 337.06 616.511 334.399 617.323 cv
334.38 617.33 334.36 617.334 334.34 617.337 cv
329.065 619.01 322.596 620.043 314.929 620.435 cv
314.958 620.442 li
307.471 620.855 299.175 620.761 290.07 620.158 cv
290.065 620.183 li
281.04 619.555 271.575 618.52 261.666 617.074 cv
261.639 617.069 li
251.761 615.591 241.769 613.76 231.667 611.576 cv
221.562 609.395 211.688 606.935 202.045 604.195 cv
202.018 604.189 li
192.396 601.415 183.346 598.451 174.869 595.298 cv
cp
147.61 516.75 mo
147.59 516.719 li
145.52 514.656 143.884 512.605 142.682 510.566 cv
141.639 511.812 140.691 513.288 139.835 514.993 cv
138.248 518.214 136.959 521.874 135.966 525.974 cv
134.95 530.151 134.199 534.454 133.714 538.882 cv
133.283 543.269 133.117 547.432 133.218 551.367 cv
133.213 551.392 li
133.282 555.246 133.592 558.563 134.14 561.341 cv
134.258 561.951 134.449 562.552 134.71 563.145 cv
134.746 563.226 134.775 563.31 134.797 563.396 cv
135.847 565.607 137.641 567.839 140.18 570.092 cv
143.994 573.44 149.019 576.74 155.257 579.994 cv
161.627 583.337 168.926 586.56 177.158 589.665 cv
177.163 589.641 li
185.476 592.734 194.349 595.642 203.784 598.364 cv
213.278 601.068 222.998 603.494 232.948 605.647 cv
242.904 607.794 252.751 609.595 262.486 611.045 cv
272.195 612.456 281.471 613.47 290.31 614.083 cv
290.305 614.108 li
299.084 614.677 307.08 614.759 314.296 614.351 cv
314.325 614.357 li
321.322 613.993 327.225 613.053 332.036 611.538 cv
332.095 611.524 li
335.438 610.511 338.052 609.179 339.93 607.528 cv
339.954 607.51 339.978 607.488 340 607.465 cv
340.022 607.444 340.046 607.423 340.07 607.404 cv
340.488 606.988 340.874 606.555 341.226 606.103 cv
342.843 603.772 344.545 600.828 346.323 597.273 cv
348.096 593.659 349.736 589.729 351.241 585.484 cv
352.742 581.226 353.915 576.98 354.753 572.746 cv
355.58 568.608 355.899 564.781 355.71 561.265 cv
355.592 559.427 355.275 557.763 354.755 556.275 cv
352.647 557.907 350.065 559.314 347.014 560.498 cv
341.629 562.609 335.047 564.025 327.272 564.741 cv
319.674 565.419 311.285 565.504 302.1 564.992 cv
292.984 564.525 283.432 563.549 273.437 562.056 cv
263.462 560.596 253.388 558.714 243.217 556.409 cv
233.035 554.144 223.133 551.556 213.509 548.647 cv
213.514 548.622 li
203.845 545.666 194.793 542.496 186.358 539.109 cv
177.859 535.695 170.329 532.137 163.77 528.437 cv
163.749 528.407 li
157.017 524.577 151.637 520.691 147.61 516.75 cv
cp
225.154 422.624 mo
215.698 419.542 206.994 416.325 199.042 412.975 cv
191.041 409.583 184.112 406.12 178.256 402.59 cv
173.858 399.928 170.262 397.281 167.468 394.648 cv
166.353 395.801 165.371 397.21 164.524 398.873 cv
162.931 401.994 161.692 405.597 160.806 409.68 cv
159.893 413.906 159.263 418.261 158.915 422.743 cv
158.91 422.767 li
158.525 427.273 158.371 431.557 158.448 435.622 cv
158.538 439.621 158.766 443.049 159.133 445.906 cv
159.135 445.936 159.139 445.962 159.144 445.988 cv
159.167 446.164 159.195 446.334 159.231 446.497 cv
159.253 446.528 li
159.254 446.556 159.257 446.583 159.264 446.608 cv
159.271 446.637 159.274 446.664 159.275 446.688 cv
159.295 446.762 159.307 446.834 159.313 446.902 cv
160.041 449.676 161.842 452.488 164.716 455.336 cv
168.397 458.921 173.305 462.462 179.439 465.963 cv
179.418 465.932 li
185.741 469.497 192.996 472.927 201.185 476.22 cv
209.44 479.542 218.297 482.654 227.76 485.554 cv
227.765 485.531 li
237.213 488.396 246.936 490.945 256.932 493.176 cv
266.924 495.434 276.818 497.278 286.613 498.708 cv
286.64 498.714 li
296.394 500.179 305.715 501.141 314.609 501.601 cv
323.422 502.082 331.475 501.995 338.766 501.338 cv
345.81 500.704 351.771 499.45 356.655 497.576 cv
356.661 497.549 li
360.629 496.031 363.584 494.032 365.52 491.552 cv
365.541 491.518 365.566 491.481 365.601 491.44 cv
365.606 491.416 li
365.623 491.389 365.636 491.368 365.649 491.347 cv
365.654 491.323 li
365.802 491.097 365.945 490.878 366.08 490.663 cv
366.093 490.641 366.109 490.618 366.122 490.596 cv
367.553 488.137 369.088 485.125 370.727 481.558 cv
372.398 477.94 373.945 474.042 375.37 469.865 cv
376.821 465.681 377.981 461.483 378.853 457.275 cv
379.703 453.177 380.089 449.339 380.013 445.76 cv
380.018 445.735 li
379.996 444.198 379.842 442.768 379.561 441.449 cv
375.926 442.732 371.589 443.683 366.555 444.301 cv
359.778 445.14 352.023 445.412 343.29 445.12 cv
334.718 444.831 325.501 444.073 315.643 442.845 cv
305.851 441.637 295.764 440.035 285.382 438.04 cv
275.05 436.051 264.785 433.748 254.587 431.129 cv
244.346 428.53 234.534 425.695 225.154 422.624 cv
cp
154.581 452.474 mo
153.679 453.516 152.868 454.746 152.148 456.163 cv
150.554 459.293 149.313 462.903 148.425 466.994 cv
147.511 471.221 146.881 475.576 146.534 480.058 cv
146.529 480.083 li
146.143 484.588 145.989 488.873 146.066 492.937 cv
146.156 496.936 146.385 500.363 146.751 503.222 cv
146.773 503.253 li
146.806 503.566 146.86 503.879 146.937 504.193 cv
146.963 504.255 146.986 504.321 147.007 504.389 cv
147.019 504.426 147.03 504.463 147.041 504.5 cv
147.056 504.555 li
147.842 507.22 149.601 509.919 152.335 512.651 cv
156.016 516.235 160.923 519.778 167.058 523.279 cv
167.037 523.248 li
173.359 526.813 180.615 530.242 188.804 533.536 cv
197.058 536.857 205.916 539.969 215.378 542.87 cv
215.383 542.846 li
224.832 545.71 234.555 548.259 244.551 550.491 cv
254.542 552.749 264.436 554.593 274.232 556.024 cv
274.259 556.03 li
284.012 557.494 293.334 558.456 302.227 558.917 cv
311.041 559.397 319.093 559.31 326.384 558.654 cv
333.428 558.019 339.389 556.765 344.274 554.89 cv
347.955 553.459 350.761 551.626 352.687 549.39 cv
352.748 549.297 352.814 549.21 352.887 549.122 cv
353.171 548.747 353.442 548.366 353.698 547.979 cv
355.142 545.508 356.693 542.473 358.346 538.873 cv
360.016 535.254 361.563 531.357 362.988 527.18 cv
364.439 522.995 365.599 518.798 366.471 514.59 cv
367.322 510.492 367.708 506.653 367.631 503.075 cv
367.637 503.051 li
367.615 501.579 367.469 500.204 367.203 498.922 cv
365.075 500.588 362.471 502.016 359.39 503.208 cv
359.395 503.183 li
354.01 505.295 347.429 506.71 339.653 507.427 cv
332.055 508.104 323.667 508.188 314.481 507.677 cv
305.366 507.211 295.814 506.234 285.818 504.742 cv
275.843 503.282 265.77 501.398 255.598 499.094 cv
245.417 496.829 235.514 494.242 225.89 491.332 cv
225.896 491.306 li
216.226 488.351 207.174 485.18 198.739 481.794 cv
190.24 478.38 182.71 474.822 176.151 471.123 cv
176.13 471.092 li
169.398 467.262 164.019 463.375 159.992 459.435 cv
159.971 459.405 li
157.628 457.083 155.832 454.773 154.581 452.474 cv
cp
395.911 382.482 mo
364.935 382.268 328.225 377.578 285.775 368.412 cv
243.279 359.234 206.968 348.158 176.843 335.184 cv
167.028 380.616 li
166.893 381.241 166.895 381.931 167.033 382.685 cv
167.313 384.409 168.211 386.174 169.729 387.975 cv
169.658 387.908 li
169.81 388.08 169.975 388.271 170.156 388.48 cv
172.825 391.464 176.678 394.486 181.717 397.545 cv
187.318 400.902 193.944 404.196 201.597 407.424 cv
209.37 410.713 217.88 413.869 227.125 416.896 cv
227.152 416.902 li
236.39 419.92 246.052 422.706 256.138 425.258 cv
266.192 427.841 276.313 430.113 286.502 432.076 cv
296.712 434.046 306.635 435.629 316.269 436.825 cv
325.906 438.016 334.921 438.748 343.312 439.021 cv
351.613 439.304 358.988 439.052 365.431 438.266 cv
371.304 437.549 376.093 436.325 379.8 434.596 cv
379.858 434.567 379.921 434.539 379.99 434.507 cv
380.053 434.476 380.113 434.447 380.176 434.419 cv
380.21 434.399 li
380.251 434.381 380.293 434.366 380.334 434.348 cv
380.366 434.33 li
382.633 433.152 384.26 431.712 385.251 430.007 cv
385.72 429.057 385.999 428.367 386.091 427.939 cv
395.911 382.482 li
cp
421.187 265.48 mo
421.065 265.455 420.938 265.418 420.816 265.374 cv
390.658 254.499 354.64 244.641 312.758 235.8 cv
312.731 235.794 li
273.945 227.585 237.193 221.688 202.474 218.104 cv
202.362 218.093 202.252 218.078 202.145 218.059 cv
177.926 330.168 li
178.112 330.204 178.298 330.262 178.482 330.341 cv
208.408 343.284 244.528 354.328 286.842 363.471 cv
329.106 372.605 365.619 377.261 396.381 377.437 cv
396.593 377.436 396.796 377.455 396.989 377.491 cv
421.187 265.48 li
cp
313 163.606 mo
313.027 163.612 li
323.012 165.733 332.974 167.955 342.917 170.275 cv
342.943 170.281 li
352.887 172.636 362.485 175.02 371.74 177.432 cv
381.003 179.846 389.629 182.245 397.617 184.626 cv
405.648 186.99 412.697 189.244 418.762 191.392 cv
421.689 192.443 424.322 193.452 426.661 194.417 cv
419.915 178.18 413.278 163.697 406.75 150.966 cv
403.755 145.148 399.153 137.276 392.942 127.351 cv
387.369 118.665 384.556 114.264 384.505 114.15 cv
295.574 94.9391 li
291.728 97.5901 287.422 100.539 282.656 103.785 cv
273.019 110.424 265.771 115.711 260.914 119.644 cv
250.307 128.353 238.916 138.623 226.74 150.453 cv
229.284 150.507 232.102 150.659 235.193 150.909 cv
241.656 151.433 249.034 152.293 257.327 153.493 cv
265.579 154.688 274.418 156.149 283.841 157.876 cv
293.28 159.604 302.999 161.514 313 163.606 cv
cp
311.773 169.546 mo
311.746 169.541 li
301.81 167.464 292.153 165.568 282.776 163.851 cv
273.448 162.148 264.7 160.706 256.532 159.526 cv
248.404 158.35 241.173 157.503 234.84 156.986 cv
228.762 156.489 223.819 156.379 220.01 156.654 cv
219.926 156.674 219.838 156.69 219.746 156.699 cv
219.718 156.705 219.69 156.707 219.66 156.707 cv
219.628 156.713 219.599 156.714 219.574 156.714 cv
219.545 156.719 219.516 156.721 219.488 156.721 cv
219.463 156.724 219.435 156.726 219.401 156.729 cv
219.374 156.731 219.345 156.734 219.315 156.736 cv
218.004 156.84 216.919 157.029 216.06 157.3 cv
215.784 157.387 215.51 157.438 215.236 157.458 cv
203.212 213.118 li
238.035 216.713 274.888 222.623 313.772 230.847 cv
313.799 230.852 li
355.809 239.722 391.963 249.609 422.259 260.515 cv
434.235 205.077 li
434.012 204.969 433.797 204.835 433.588 204.679 cv
432.849 204.138 431.898 203.578 430.732 203.002 cv
430.606 202.943 430.487 202.882 430.377 202.822 cv
430.287 202.769 430.205 202.717 430.13 202.665 cv
426.775 200.972 422.257 199.108 416.577 197.074 cv
410.615 194.968 403.689 192.757 395.797 190.439 cv
387.875 188.073 379.321 185.69 370.132 183.291 cv
360.934 180.89 351.389 178.519 341.499 176.175 cv
331.612 173.868 321.703 171.657 311.773 169.546 cv
cp
397.522 104.188 mo
397.503 104.165 397.48 104.143 397.454 104.122 cv
396.714 103.197 395.683 102.561 394.366 102.214 cv
394.257 102.191 li
394.189 102.173 394.127 102.16 394.069 102.15 cv
291.305 79.9505 li
291.27 79.9428 291.233 79.935 291.197 79.9272 cv
289.853 79.6991 288.653 79.8529 287.597 80.3903 cv
287.565 80.4091 li
286.601 80.906 285.977 81.6594 285.694 82.6679 cv
285.535 83.7041 285.793 84.6471 286.466 85.4984 cv
286.487 85.5289 li
287.257 86.4953 288.33 87.1412 289.71 87.466 cv
392.634 109.7 li
394.014 109.967 395.25 109.82 396.344 109.261 cv
396.376 109.252 396.407 109.241 396.433 109.228 cv
397.382 108.747 397.982 108.014 398.237 107.032 cv
398.242 106.999 398.249 106.966 398.258 106.933 cv
398.433 105.933 398.19 105.019 397.522 104.188 cv
cp
395.647 96.2847 mo
395.682 96.2913 395.717 96.2989 395.754 96.3079 cv
400.34 97.2984 li
401.802 90.5287 li
289.248 66.2143 li
287.786 72.984 li
395.647 96.2847 li
cp
419.474 39.4258 mo
419.502 39.7377 419.483 40.0437 419.416 40.3441 cv
406.17 101.661 li
405.993 102.481 405.528 103.112 404.773 103.556 cv
404.669 103.616 404.564 103.672 404.454 103.721 cv
404.951 105.176 405.04 106.712 404.729 108.331 cv
404.722 108.364 404.715 108.397 404.708 108.43 cv
404.045 111.202 402.386 113.257 399.733 114.596 cv
399.827 114.564 li
397.895 115.619 395.757 116.071 393.408 115.918 cv
399.869 125.088 406.298 135.957 412.696 148.528 cv
420.098 162.942 427.642 179.587 435.327 198.461 cv
435.343 198.515 li
437.138 199.524 438.472 200.536 439.344 201.552 cv
439.833 202.072 440.197 202.607 440.435 203.159 cv
440.941 203.875 441.104 204.643 440.925 205.462 cv
392.563 429.337 li
392.484 429.699 392.275 430.326 391.932 431.216 cv
391.597 432.076 391.335 432.666 391.153 432.988 cv
389.966 435.152 388.112 437.028 385.593 438.613 cv
386.23 440.778 386.566 443.187 386.6 445.838 cv
386.697 449.813 386.276 454.075 385.335 458.623 cv
384.413 463.06 383.183 467.483 381.651 471.893 cv
380.173 476.26 378.569 480.336 376.835 484.119 cv
375.191 487.685 373.641 490.729 372.18 493.25 cv
373.489 496.046 374.168 499.347 374.219 503.153 cv
374.316 507.128 373.895 511.39 372.953 515.937 cv
372.031 520.375 370.802 524.797 369.269 529.209 cv
367.792 533.576 366.187 537.651 364.453 541.434 cv
362.703 545.234 361.059 548.439 359.525 551.047 cv
359.507 551.072 359.493 551.095 359.482 551.116 cv
361.106 553.856 362.041 557.195 362.286 561.135 cv
362.281 561.159 li
362.511 565.104 362.167 569.399 361.248 574.044 cv
360.353 578.539 359.105 583.044 357.508 587.563 cv
355.927 592.03 354.206 596.166 352.344 599.971 cv
350.416 603.821 348.569 607.007 346.807 609.531 cv
346.782 609.559 346.756 609.587 346.732 609.619 cv
346.622 609.768 346.504 609.914 346.381 610.061 cv
347.931 612.955 348.858 616.38 349.161 620.332 cv
349.155 620.356 li
349.413 624.148 349.189 628.238 348.482 632.622 cv
347.785 636.897 346.711 641.217 345.259 645.578 cv
343.822 649.908 342.153 654.064 340.25 658.047 cv
338.292 662.058 336.208 665.65 333.999 668.822 cv
333.993 668.847 li
329.731 674.848 323.999 679.737 316.798 683.518 cv
309.783 687.17 301.724 689.859 292.618 691.585 cv
283.658 693.253 274.064 694.043 263.828 693.95 cv
253.673 693.863 243.248 692.998 232.551 691.357 cv
232.524 691.351 li
221.858 689.677 211.321 687.332 200.91 684.315 cv
190.474 681.287 180.554 677.653 171.147 673.411 cv
161.647 669.142 153.043 664.378 145.333 659.121 cv
137.53 653.756 131.027 647.973 125.825 641.771 cv
120.447 635.412 116.801 628.729 114.887 621.723 cv
114.866 621.691 li
114.068 618.713 113.579 615.058 113.397 610.721 cv
113.195 606.488 113.316 602.005 113.761 597.275 cv
114.172 592.493 114.942 587.841 116.07 583.321 cv
117.193 578.677 118.718 574.577 120.647 571.018 cv
120.642 571.043 li
122.584 567.371 124.955 564.625 127.755 562.805 cv
127.712 562.613 127.67 562.414 127.63 562.21 cv
127.031 559.16 126.698 555.52 126.631 551.289 cv
126.528 547.119 126.709 542.712 127.173 538.063 cv
127.678 533.386 128.461 528.842 129.527 524.427 cv
130.626 519.887 132.056 515.834 133.818 512.271 cv
133.824 512.246 li
135.617 508.67 137.746 505.872 140.208 503.852 cv
140.201 503.797 140.193 503.744 140.187 503.692 cv
140.208 503.723 li
139.816 500.698 139.574 497.069 139.484 492.835 cv
139.49 492.81 li
139.405 488.573 139.56 484.108 139.956 479.413 cv
140.322 474.672 140.988 470.067 141.953 465.596 cv
142.944 460.992 144.339 456.932 146.137 453.417 cv
147.853 450.067 149.971 447.49 152.491 445.686 cv
152.157 442.81 151.949 439.42 151.866 435.52 cv
151.871 435.495 li
151.786 431.259 151.942 426.792 152.338 422.098 cv
152.704 417.357 153.369 412.752 154.335 408.282 cv
155.325 403.678 156.72 399.618 158.518 396.102 cv
158.524 396.078 li
159.832 393.54 161.375 391.451 163.151 389.81 cv
162.513 388.845 161.955 387.725 161.478 386.451 cv
161.304 386.033 160.972 384.961 160.479 383.234 cv
160.175 382.203 160.201 380.865 160.557 379.218 cv
196.004 215.129 li
196.002 215.019 196.007 214.908 196.02 214.795 cv
196.052 214.515 196.127 214.256 196.244 214.017 cv
208.919 155.343 li
209.055 154.718 209.481 154.051 210.198 153.344 cv
211.159 152.38 212.325 151.769 213.697 151.514 cv
215.897 151.093 217.036 150.866 217.119 150.831 cv
231.232 136.88 244.339 124.939 256.44 115.006 cv
267.326 106.068 277.536 98.74 287.07 93.0236 cv
284.573 92.226 282.6 90.8687 281.147 88.9525 cv
281.126 88.9212 li
279.358 86.6527 278.716 84.1344 279.201 81.3683 cv
279.213 81.3026 279.228 81.2363 279.244 81.1714 cv
279.65 79.5954 280.364 78.2493 281.386 77.1352 cv
281.309 77.0485 281.236 76.9553 281.164 76.8537 cv
280.659 76.1375 280.496 75.3704 280.674 74.5502 cv
293.92 13.2338 li
293.982 12.9382 294.088 12.6601 294.241 12.3982 cv
295.629 9.86756 298.424 7.98971 302.628 6.76272 cv
302.66 6.7438 li
306.139 5.7475 310.471 5.20095 315.658 5.1044 cv
320.631 5.00697 326.124 5.27165 332.139 5.89763 cv
338.079 6.51337 344.264 7.40975 350.694 8.58685 cv
350.72 8.59265 li
357.084 9.79203 363.418 11.2129 369.725 12.8535 cv
369.754 12.8597 li
376.034 14.4977 382.001 16.2779 387.65 18.1994 cv
387.677 18.2052 li
393.381 20.1821 398.469 22.2379 402.939 24.373 cv
402.968 24.3793 li
407.611 26.6311 411.311 28.8873 414.064 31.1456 cv
417.472 33.9139 419.273 36.6738 419.474 39.4258 cv
cp
412.812 39.564 mo
412.457 38.3049 411.46 37.0033 409.816 35.6579 cv
407.385 33.6936 404.133 31.7246 400.057 29.7487 cv
400.083 29.7545 li
395.822 27.7277 390.975 25.7755 385.543 23.8991 cv
380.053 22.0346 374.254 20.3075 368.148 18.7192 cv
362.004 17.1186 355.829 15.7332 349.628 14.5629 cv
349.601 14.5571 li
343.372 13.4134 337.379 12.5417 331.624 11.9402 cv
325.935 11.3481 320.74 11.0963 316.038 11.1857 cv
311.551 11.2742 307.801 11.7394 304.786 12.5814 cv
304.819 12.5618 li
302.682 13.1895 301.165 14.069 300.269 15.1995 cv
290.529 60.2856 li
403.083 84.6 li
412.812 39.564 li
cp
.958648 .626856 .3458 .153414 cmyk
ef
298.273 65.7644 mo
296.784 65.4427 295.816 64.0767 296.11 62.7124 cv
304.992 21.5982 li
305.287 20.2329 306.733 19.3886 308.222 19.7103 cv
309.712 20.0321 310.68 21.3979 310.385 22.7632 cv
301.503 63.8774 li
301.209 65.2417 299.763 66.0862 298.273 65.7644 cv
cp
f
315.647 23.9841 mo
315.942 22.6188 317.388 21.7735 318.877 22.0952 cv
320.367 22.417 321.335 23.7838 321.04 25.1491 cv
312.158 66.2624 li
311.863 67.6276 310.418 68.4721 308.928 68.1503 cv
307.439 67.8286 306.47 66.4626 306.765 65.0974 cv
315.647 23.9841 li
cp
f
326.302 26.369 mo
326.597 25.0046 328.043 24.1594 329.533 24.4812 cv
331.022 24.8029 331.989 26.1696 331.695 27.534 cv
322.813 68.6482 li
322.518 70.0126 321.073 70.8579 319.583 70.5362 cv
318.094 70.2144 317.125 68.8476 317.42 67.4832 cv
326.302 26.369 li
cp
f
336.957 28.7549 mo
337.252 27.3896 338.698 26.5452 340.187 26.8671 cv
341.676 27.1888 342.645 28.5547 342.35 29.92 cv
333.468 71.0342 li
333.174 72.3986 331.727 73.2438 330.238 72.9221 cv
328.749 72.6003 327.78 71.2334 328.075 69.8691 cv
336.957 28.7549 li
cp
f
347.612 31.14 mo
347.907 29.7756 349.353 28.9302 350.842 29.2521 cv
352.331 29.5738 353.3 30.9406 353.005 32.305 cv
344.123 73.4191 li
343.828 74.7844 342.382 75.6287 340.893 75.307 cv
339.404 74.9852 338.436 73.6194 338.73 72.2541 cv
347.612 31.14 li
cp
f
358.267 33.5269 mo
358.562 32.1616 360.007 31.3161 361.496 31.6378 cv
362.988 31.96 363.955 33.3266 363.66 34.6919 cv
354.779 75.8051 li
354.484 77.1694 353.039 78.0149 351.547 77.6928 cv
350.058 77.3711 349.091 76.0044 349.386 74.6401 cv
358.267 33.5269 li
cp
f
368.922 35.9118 mo
369.217 34.5475 370.662 33.702 372.151 34.0237 cv
373.64 34.3454 374.61 35.7124 374.315 37.0768 cv
365.433 78.1909 li
365.139 79.5553 363.691 80.4003 362.202 80.0786 cv
360.713 79.7569 359.746 78.3903 360.041 77.0259 cv
368.922 35.9118 li
cp
f
379.577 38.2977 mo
379.872 36.9333 381.317 36.0878 382.808 36.41 cv
384.297 36.7317 385.265 38.0983 384.97 39.4627 cv
376.088 80.5768 li
375.793 81.9411 374.348 82.7866 372.859 82.4649 cv
371.368 82.1428 370.401 80.7762 370.695 79.4118 cv
379.577 38.2977 li
cp
f
390.232 40.6835 mo
390.527 39.3182 391.972 38.4727 393.461 38.7944 cv
394.95 39.1161 395.92 40.4832 395.625 41.8485 cv
386.743 82.9627 li
386.448 84.3261 385.001 85.1712 383.512 84.8495 cv
382.023 84.5278 381.056 83.1611 381.35 81.7977 cv
390.232 40.6835 li
cp
f
394.169 87.2358 mo
392.678 86.9136 391.71 85.547 392.005 84.1827 cv
400.887 43.0684 li
401.182 41.7041 402.627 40.8586 404.118 41.1807 cv
405.607 41.5024 406.574 42.8691 406.28 44.2334 cv
397.398 85.3477 li
397.103 86.712 395.658 87.5575 394.169 87.2358 cv
cp
f
241.3 312.527 mo
235.875 311.096 230.461 309.625 225.057 308.115 cv
225.229 300.37 225.385 292.697 225.524 285.105 cv
225.312 285.057 225.099 285.011 224.887 284.963 cv
222.125 291.956 219.378 298.881 216.647 305.732 cv
211.228 304.174 205.821 302.576 200.425 300.939 cv
202.061 285.009 203.637 269.357 205.148 254.008 cv
209.58 254.571 214.009 255.16 218.433 255.775 cv
217.323 264.257 216.201 272.796 215.067 281.389 cv
215.332 281.447 215.597 281.505 215.863 281.563 cv
218.805 273.349 221.765 265.049 224.743 256.667 cv
229.245 257.318 233.742 257.994 238.236 258.698 cv
237.564 267.735 236.875 276.848 236.171 286.032 cv
236.437 286.09 236.703 286.149 236.968 286.207 cv
239.376 277.38 241.789 268.527 244.208 259.647 cv
248.455 260.335 252.699 261.045 256.938 261.78 cv
251.698 278.821 246.484 295.742 241.3 312.527 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
275.219 281.534 mo
275.034 281.496 274.846 281.457 274.66 281.419 cv
272.356 287.571 270.055 293.71 267.758 299.83 cv
269.804 300.289 271.85 300.746 273.895 301.2 cv
274.34 294.632 274.781 288.075 275.219 281.534 cv
cp
272.925 320.397 mo
273.029 317.465 273.132 314.534 273.234 311.607 cv
270.103 310.889 266.973 310.163 263.847 309.427 cv
262.741 312.098 261.636 314.763 260.532 317.426 cv
256.328 316.393 252.129 315.337 247.935 314.257 cv
254.692 297.669 261.503 280.832 268.354 263.815 cv
275.157 265.064 281.949 266.373 288.728 267.743 cv
287.909 286.236 287.069 304.821 286.225 323.428 cv
281.786 322.443 277.352 321.433 272.925 320.397 cv
cp
f
318.717 287.891 mo
315.798 301.403 312.879 314.916 309.96 328.429 cv
305.395 327.516 300.833 326.577 296.279 325.609 cv
299.213 312.031 302.146 298.453 305.079 284.875 cv
301.806 284.162 298.533 283.455 295.257 282.758 cv
296.465 278.452 297.674 274.147 298.881 269.842 cv
309.806 272.151 320.694 274.617 331.548 277.239 cv
330.352 281.485 329.156 285.733 327.958 289.984 cv
324.881 289.28 321.8 288.583 318.717 287.891 cv
cp
f
323.19 330.993 mo
327.006 313.325 330.823 295.659 334.639 277.991 cv
343.791 280.23 352.915 282.579 362.012 285.039 cv
360.846 289.144 359.68 293.254 358.511 297.371 cv
354.149 296.311 349.786 295.262 345.415 294.228 cv
344.853 296.828 344.292 299.429 343.73 302.029 cv
347.528 302.882 351.323 303.739 355.117 304.599 cv
354.335 308.219 353.553 311.839 352.771 315.459 cv
348.96 314.677 345.149 313.892 341.338 313.104 cv
340.715 315.984 340.093 318.864 339.471 321.744 cv
344.148 322.649 348.825 323.539 353.507 324.412 cv
352.413 328.182 351.319 331.958 350.223 335.74 cv
341.192 334.264 332.181 332.682 323.19 330.993 cv
cp
f
379.355 302.46 mo
378.643 302.28 377.932 302.1 377.221 301.92 cv
376.43 305.579 375.64 309.238 374.85 312.897 cv
375.539 313.049 376.228 313.201 376.917 313.353 cv
379.625 313.947 380.987 313.035 381.936 308.645 cv
382.767 304.796 381.885 303.106 379.355 302.46 cv
cp
388.678 321.046 mo
389.465 328.082 390.282 334.966 391.134 341.681 cv
386.135 341.045 381.14 340.377 376.151 339.678 cv
375.718 333.703 375.305 327.639 374.908 321.491 cv
374.297 321.37 373.683 321.25 373.071 321.13 cv
371.806 326.984 370.542 332.838 369.277 338.692 cv
364.749 338.029 360.226 337.339 355.707 336.623 cv
359.331 319.845 362.956 303.065 366.581 286.286 cv
372.672 287.961 378.751 289.685 384.814 291.459 cv
395.154 294.551 398.987 300.314 396.799 310.442 cv
395.58 316.086 393.062 318.887 388.678 321.046 cv
cp
f
130.256 303.137 mo
127.887 307.833 126.33 312.874 124.413 317.758 cv
122.578 322.432 120.182 326.859 118.003 331.377 cv
117.78 331.839 117.559 332.304 117.337 332.768 cv
417.516 495.948 li
429.83 480.764 445.283 466.817 450.35 448.833 cv
145.619 283.179 li
140.834 290.12 133.641 296.426 130.256 303.137 cv
cp
0 .993988 1 0 cmyk
ef
114.41 339.17 mo
413.171 501.579 li
415.935 497.786 418.983 494.104 422.121 490.458 cv
120.434 326.458 li
119.62 328.096 118.797 329.731 118.003 331.377 cv
116.769 333.937 115.546 336.534 114.41 339.17 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
148.991 277.019 mo
147.365 281.178 144.419 285.043 141.245 288.795 cv
447.939 455.517 li
449.866 451.134 451.218 446.528 451.768 441.611 cv
148.991 277.019 li
cp
f
34.2841 287.619 mo
61.5432 237.475 li
525.76 489.827 li
498.501 539.972 li
34.2841 287.619 li
cp
0 .993988 1 0 cmyk
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.0
%%For: (Larry Rains) ()
%%Title: (water_bottle_ban.eps)
%%CreationDate: 12/1/2015 11:02 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9=]fC8[Jf@Bn/Z`ciedEG,m#[ir`bS&-cKb.Z#0R/MB[)n*d\%f8?O_ej8oM0.j\nt@Bph9@]q`1+8goN?Uq*OmpZh!j2
%_R1#7bdJ/6i?)n%cT`a(h\8h;H5fc)FtK%j>$d(/L(b8J.G+9TGUDN+`5I:4Q!CX0PT.ZN8hR'oe!4C=<aSUt^\d-2JUb^inItAD
%@^5K*@^G:]*r.T2HfTLN:^hLs[?BE<d$,i-pf]k/<p*9K#/k-\B@hJV%a#!8"s4e&>7NW@nG[:3:C^,S@Nh6@T/)J==FRIc6MuIK
%g!iU;a:ZXRa6*Vf\C>L%)PSjXqu_+uphgc3fGsj#eOo22\hp\&C>5>*%QW&/S:njG>*b-Rmo&)t]Z],2KF(.=KG\f_4mWIp9Aq<V
%Mm]:9nSgVB9rR2t2\RQ)55\DDI;rV-"K(:PoDNnHg_K+6RboMmb#e/ENBO;m3?(qGo`JRSA_sJYR,L7V[Xq_u=_t#G8;(+C@q.Ej
%\j!,$86nEuf1eGFRo-2([VGm4n"ME5$dkPp&t`#&-QL[_naVq/""=@f,ojdO7f!/_8I';#j<2E]3Xn^3U>H7;EQ4736t0$l0DYj6
%q14cdPk$'f3!i3I"EO.<i@,;O'nX2d'5mq:+4TpkhP`<;Kcg6>11Z5+)LTsa#.:dXTqTg!`h')orh,DbML8mlj#]\:T'XP2jPLm9
%e?@[3%=UYp`MQa_EBE-g_e(@XIh0JoZZRWceY%:n3L9hRF=b-B[bMULXb:>6YVhB32>pBjTPdXi0:moAj[DDrGOVP3\1<f1(BrWf
%eC)ri[oUS*\!*M=X8\8<8@ajI*rOCfjjS*(Jhi;?7b?mWa?@"1#?fIIFuc1tPf3FM`Rdh5W6>,,(Fs_+fC4^rNAo7dlFBI$ojNP=
%:ah6Vs8:nRrT7E.(Rt?Ch--XXh(.A`rqp8<,@@tf&t)'H8>mUDo%2R5N.h#7`a>"b,QG?A&,_NDV>NZ&[R[+Ga.SR,Df8ZDs-JJd
%K3Y0Lj6&(f34aCn?UQDr@O=icIZDaAIlB?,)W\M.KDG+Oj]D5,SEDm9iI_X[:seV#\"Hj&7N,<PEEYIWqIRER((GHO)umn?],ERV
%&;.u6X>]n%Y4?.dXgDt<:P?ebZ+BKFpRM*aja>mkY.fW8(UHuC3%_$+@^0lRo;hV>>[k%jXPYC#/!ZiC]u0<9Vs&'i-h1`kBf(EF
%q5CCWo<_SYd,#qDDsE_km`dlEW@.]*0_GJTZ^ic=9AeiM5Dta(bNDhR;n.[,(pi*m2jIjG?8AWQ+ig+]'lq89qn:hl@bp`o:(FGU
%)R]QTek(LDC6a6l04N[R$Y:q:,dL,f[@+X0.92(pS]K[beNg8K?tR;'aYi6s;80HJ(k\U*hrFe1#4mD9Q-4W51C#u<Vj5p0o+*?k
%q:D6g2!'4\&9[eSI,!hV*]WMiKTeAdI(Z`tH2c1Pae+&6@P08@d7O;?,Tn^J>Y!]bTE]#^JQtTc0iDu^GXnEU]W=VG`;`G,O&<ik
%=A+bP+Bg-Zo&YoD+\C=RE?SM55W5;KJr&G5/q"QE(<rTg(V"HqeAQAagqd;`!KlKr!beK:jKM&<<9t<?4H`6&$P)<NPX9O)L))nq
%<3t4(ctme(r:+"AJsTrrP<WJ>)Ag6B3#iO1*q<KIlUBouWo\P+iB%goYh2b*aZpXVV(Cain.VFul@SRM;p/3\XoZY\F!,L>VLTF/
%.%r\EZ)&C00%WhG0GqM[6k>"p-QFDjUJZYf)++D5q+(K<<>>[JM!E!bj2pD/3bG^-P[djfh@"'Q=>::U(i-YIlKM\?&n3bT&.R^c
%&^`1Tr0]CK?kG7j%]@q`AE!YEdK4K_"l=+KK$=f=^_tSA>Zpb#8-.@$Ms(;u)DAoj]%DbW/IW:$B8o'g:sTZU%3?Q'LC]R4T9tN\
%X"$&)_RV^D[M#K##HeAF\mHh=OJe3qeg'6-Mln<:g":kl3;gk5h;S6+2)9>`!Jue<U>snSO^Sp+HL&1TRAJofLpJVJ[ca)VF#\=7
%7C80^UNS1)O=cXZe8BAP4@-F:?oVS8HZpoWN2?f`,fmt$*Y?@HZXd1qGcm)red5JM;^m[L3nY@\0G/B'g4g@`2)@C!/r=Bt[2];p
%csgrP)7"CGHp9Ga?55>0d6`)TKR$,**C6XrO_;*d*M0L7F<!Y/6DA9,BE2Bk(6U),:t^kmZ96_F#mkZX^aDu=Dc`,ZO6OLMRFu=.
%q&Cg!M2j`RK;"G)lL;cH_,/tu^^8Q'7b(HPJ[(UF5\fUp`fH6b/##"\6H74XS++Thor2R@6R0%l6ZlNd,DhFjM[mA$;_r6FC]&L:
%)8B&eKC=)/Gf2J`JMq?,Trt^.Y9/=DYW+-CO-QW`/e0l4_TP34"_?H+3/"cK'+uW=D?u=1E<8c5a,Zo2Sf_B^hcPb=[U*I\0F?]T
%m=\cT.E@!03/+i8$Wf$&h1a*bNe@IS/qB2ej&+lNT]<UC,1WK_"fCA`_*U"<F]0@ToLS'%&O;CaA"^0\[W'lNLKk[KlbF@)9l2#P
%'S(&,#e.p6r$7>$$/enk/c%jk:QGWe:BMV-F2;b3'?G,60k2mRcB@+I$6*0h0r-$uCtUG23\MHoLHC/,_Q7VT;hREl+_lOt0^9\s
%j[:F)/_G_B$_AA!,dn^+CJ:F5b%q%j44/%ad:)W)>`e6@aN<f".COa?E,j=RmIL\j<1hhb!',nd5fs^"BY^l9%raD2k,fg35Sl_e
%D*s5E$"+BTFC'VoGTJ`KG7i'U!\%*o^>"eNZJts=8XMtU*5iDs[Ln1F,Q&T[h))H#(`VGH#M?J_mf4(MdaKtNV1a&Qa=Nu/KXruc
%]Ne1XHiYs2O?F/C/V2\k"M)Uj\[D[V#U1;;<t'`A!h(.X=#f[hhfaRd&l.=@@3c\G3g\nbd)##0G3gpsh*irGkt_'6KS+RHLrOX$
%4W#[B/CUGd-rjfJLhj;W)%ER>VkFB)+;nGad]H1%!E?i<m7QRhL1GfsaS?=n66^?tZLlhdSd0q3\hIgaYm=@+"RZ:l*<;LpgFKrZ
%*Tn!I]q/k30qgRsSn3)dk$!:Qa$R<7k&DMu[Bj.sKu9*Z;@S]1F:%.@O:cM#@*9D2n<b?)7PLSO2H[aH\3.i4dNAca29lcs,!?Mm
%c87A.go$MJL4MJ+O<fq?+?"mK[gaj6?FXgJf@ghBQW[/*ZU*4i*\]*am5-TG[+:5\%3m7+h[XZl;PDV,2h=uKSqDB[(hR1q\oRn?
%)<0e'#1thl-l;Q8lm8Je_aQ`3eXXlOL'P:Jbf-kA!1B,qKmnq(=+Y]?7.Q=jqr:PTRCq%24,tI)=b"_&TQ.-j71Q[:cn1u+*sW/+
%8-'`CJCJ!-N(Ph5c!Z.ALci+_7!t'D7)q%#)4k]0%B2I*aU9m+\&BRTNX'3:^h!)&OMc\WJo0\])bUU0=H6N.#7*U$lS:\R1H;G%
%UEGGGQj`4pNKsse[N]oh88(Umk1ZB$oFqeB49V$<'[V&!R(7$mXRuQ?A5<EBM]pm9`Z+2.D#0B,:e%,ZW?3QQCKlo:Lt6FJd5Le3
%>Xt>8biKJdJk[4J0#jCeh4P8.Q6MC#J4p6t[Od:V!&?.KnRf>U&/g+UT`nZB-]Hq[KXH8BCKZp:X.'7_/W5R]D'q(CcDY&V\7eS*
%$cEb+Zcqdip,LiV@If$!,#&n#J31j'oL'T'1'ZV\L5/Vr0.@P8!W'm:>:I!a>:FF.c,+>Ja'N"9S%uHF@!FSQT-NHF"NV-Ne2">\
%R:IKUOC;T,"$!#F\-*j]e:G^a"S*'/D4Zjp`L1]i"HYUGQHq8;mQ=7gO]E7nr<*`_T@3k"U$taCJ3hoY6Ce3]+O&5p1,J!Zq-c??
%#+$3kO!Z*C\Yt+g0MmM88N%%^!T,S[hQ1A2#dH['lH0CVJ1VR'$_YlkAc1):iu(Oaa.!jCB3L<t9VQL\ZGK(inmU4BJ52nKM@>Jd
%@4`o_`*90$Y\srG)VWVk@Epd`@75$2<<jje\tU7'Xq!:)A10*OB93O$H?)jLaQd^f%!K]Xk!2`ZXp=5L!Y'7qBaRiR)b#:JQS?@c
%:q-K.GM&8m]DE!o6"UI%YYm`E!JupD^#KiF0d(0Z`8U8`BEk/br<nf@"%C3FgSKECSPWn-<1M)eZs1='?fB)"roO:HG$N:bT*ul(
%3ipqtZV2>Z*S,$t(f1MI"RH.a.")D]OUqtDQoPl!(op%4iD^@BKo"mFD17dFoN]TXjQ\%BAhB>f>FGpn;f\FJKs3::MV3\UU_\B4
%oi0B^)Gsb%j+.g\RRD#=MR6'b(b'hU/kgrI3mD2@+K\F?\5dbU!C."H7X3rp)GI1I0kr!Ne[3(bZhk=%0oaM4aCX9F_:n2XIP`4b
%)%E37C6YmPOgM&\/h!$O0l]]?-6Y]P(:*n#FrAo^P=>uP@tG>HD?=S,(Q9-"*m?P)*[-7t<:as&lr']R44&[ooA-:$dL.!%eLJ%Y
%;r%W;CZ=V.#WNtq__"Z%UBG>`"U>Yh=`e=;D)ru_c7J=!^sjZ8)`fG*'At,;%WVg9OpQ+A)MhdSg25K9A[>I00J+3\'!^CRF#Yu4
%=6;!+`j6m^&$co*(I2a%M8VCD4<`f0_a9@O;7:;NW9$=gKGlF:#YlD\B%G,aJtp4??"&a&CF.omVVrs#Y6#=Ikba96I7XJX#l/ji
%g6F/Hg?]r8:^<(&/c%J"3)Ms-L#gn*@1/SQl*1hs;oiRY@9j;tL1]1P&Y1%hHMK;4joel+3-7,ojd/gd"qJ,LFMk)5+s`lp/pMUJ
%W5sCBL/":rMh2A_Nak1d!`$-PN[]fL")pqrJP1;@J4(=uR:<lN>;c`5[?MmW\(OhBgqaO8@!RXnE$2R(`bH[VBV;^hlN:_J/^]/_
%Ui"@:7!HYh!g;cr0gmZ@35/5-#:8eXW1l@Gi"A:O`OUT@UjskEB$=/h9:M6,SX1fL6io)6LKm;+^t(5nX(Oq-VNsZd:s7gb)Z<e8
%F9N5.:"!Ln"mQHndkYAC"(dh:_9md,r./WP9HfR#5JR2h(0#uXcA]TjZDXKP!,S-Y=arrO>s(h7\b)YR]nAJMTt$8T8g(Hr#.bsS
%9>SKK!<,k&f>NW!]gDiM+DWF3_\gVe`+=#*$jVM8Gr6I!Xn`2^%M#iTS)[T&dm+:f=q6i:7iGR8N3]1[!jVu>&uWl$pgaNI9[3oF
%-4S_9_3<'Y2?B_BoXAR?%ACo\s5`Edk=.hAlj/f0(8rVtoq=UjQj3d4;9fpXADdZ"g*e4sRc=e/_q7(2QpRGT1QQ=3cJ)mPC\2]K
%Agq!D<hPn/b>g/434!T-%R:SRbm=iMlPc-K/R[%Z<XC)!"(\9^hPXjS7s6B3%r=<a=ceFh/NpiULhoEp_2(KQCkHp&S*`P^Sn9El
%,+CIT?_lA`0gpe0Rg9nX16*jSLu)9CDD`f`Z5?CDXLL@L)NTJ(_>g0ICHVpDM6">F&fKa:(G!hUdkO7G7nd0L-R'q^n=5S@@13Nt
%)2,EeKAuQ+4g#,'5aDJ;"QIcrCjS<_$T#<6%)FY!4.Oq*Y\b"lGe";nSDQ_oU',G:,=Y)NJg)rOBIeLh^n`7f\H'!&>7tmF)hGB-
%Vh*Qb-Wlo"],em&$BSN)dL;BKa.`B"_CYh.[8$e%0*);=b*FQ.`.Jglq,-'*)o/lk\2nSg!tbR$%VO`SiKm8_)4;XK*[dE1d`=ji
%#$fUj\u*oAKJ-2n7k`@aKg;h.BV+J;F4K72Mltl\SN9_;R;49L^uLTF$X?1-LF%J'R`dYpaB]cZOZHOG$<9th:O@:&p]b9H>!s+q
%SEVZ>#p=_R&firhBaD'_0Nedrq#X=!CrV^556Gk:!M`&A66cm^NJn04)X(@jek!#tES*%pJW.GlLE2B@BV-OZa$u$t8gn')KMW!k
%Ts3i8#\IJ!i$ss"<TpN@Bkbaq!%N@07bnEtY3]<m>t^$*<7*JW!jr"6e3IbW>']1]YZr))geGPiOD?J!R^HW,4o%uX>,UFrKT8?n
%b#><%FH"HgZ>R;YmEqUWJ4-m)!iElJYQ7QIWH-$i!,af9qMDNCW8:pK>fSRi&`#)20F8]<g,mSUYi>a>f&7NH"gJCWf,Pc'+)Bqf
%<$:*OK-Me8*Z9K\GJ[A.Oocg/-XNBX!T`5Q6i([+$4JL2/f#m]S[X+a!ORRE!EtK-(bs:hYb;nmK*#rFaG*&j41[Mq,8JSS+L'p)
%&P(o:,6526T<lPU*^D:.[P\Wo@`#j0,8618&iLYq?5bm\#9j4W1f1@W;g(D0,a@Mt]#MB0i"-bT/.O;`aP\W`d5(Qgg?Q;nCpPUW
%$"i7f^_"s*4$%,BM3)6O'TqOD"5OMIC]Or&+uW[es1'\rmujg!Z_qKF!88U@-5947j`3f.elRhc7Q%I[\CB9p63CEJi6,TretN3-
%)X;o*UOKhp?U0nGWI[+oN.Q!sJI^o)Ti4Y#*<sTLl,gJjG#E;p2%4^a<Gl?rJ393Voal78/9*[Xd<187BCV!f\>dOqAp*ksog1]=
%d5QuPk[H7rFm]F[!ha0gK*![m^5B:BlB#4:(BX#"*3<<dK!K-J`"dJIh93AqF9%aD!2sc<_Sc^^UH4lD'V$$ASg^Y'["Wb_L]hHB
%N$__I&HTXQU]mh1RY]Ci^l9p3,V<jgop?2S(G8U;5Ld#d)2tfN$q1:UJ[%M&RKLqtZ<7D*D/;3`Ck8YN`oLY412(uoE['g][DKcs
%NO"Anb:t&<41%dDg,H.QqSd(VB>@V;bBCD48FI/`PgV(4L<rR*e$S&e7\]PiKojP_\lfPhY`_t$7f<1O_uU1rk&/Ru#OB/Vi*r"-
%@:3Is(T`UW4(h`iPe`87k!,RhWc/oE]l:>a5tKOt(YMNb+D=XaSeDXQ;41aaiA`$#1Z=5BE+Jn8<97L9+OW<;O:KcpfS7!EM^:0d
%au5PFTa#72Cr>ZSbsqmJJIEdFCA>I8N"ZJW(BXs1N%/($^o/TG@V5OMjBr2M&^mB!)Q6dV<E=DLF==5MCZEJA*,&H/f4GG]JIRgB
%fJbf"![Ar4?mpP1R3`tsKoA9!]jP_UJeLE.eFW<!fYC*17:\9T6=t&"M+aM!/Ld?P&.goB!KcLZ)QIVB@1*L6"qXYuGp^a;lg>)c
%Oc:X'Ns.WkMk6abM]>8>!4p+'AuPl2Z]L"lic)!*QjBdhlZ''pi7`6X*,2'Y@18sbA<63q/DC1@74n!_EI8m/6MJm='K)aSWi1s[
%6DPFL4cT"`^^emF6'-6r#SmSIV5'8]$1uH$$\K>,1?L7t<[M8WmQ$f)p`;pc#mAUu5XRmEoh\B!;FRubaqO%]JV0h1D9c?ZX<CT#
%6K\+5<'#n1#p;"A<kAed-A)29+Pk4^Pke+7e^G0Ce<<A0Hj)oAaUoaO\La=^@Ub=u/Wh'K]IJ*GM(9CYJBW_9RR";45UNpLO>.#s
%%`?YpN;1m=':E!2PsqJ17ZD?7'-7:VHdn4?7&G^)+<.nEN#]A=VHoul=VP]9SCI/5%EY7]jB/)B;oaP=H,qtDW)=%_j3"^PjX)H*
%aHM`WRNoGKAqK;m!#3Jj\AXJP:CD@U"(\AGlciC`G#-$p+n48pC0'.G+VI0g%8r1%@n00=<(G*BJn?,2b=3i4Lr4cQ@:>SSPB5Oo
%"Fs(c3<R?2(kAH92piWO)am-o-t#TG$)9$k0JXGF`^qYQ6U=nAAd@.n%6VE6K<P(f+?PaS!(,)7YnK)^q(1W`<^:Xo9FJKn%1e/9
%$27P[i%NZ4B\GsV/s$9PV,Efh'.i'f-=`2f\\L&GPpuoq:YEJ#=u,$L&0J_m`Ya7djr(bs$FL^!51)8lf/8RW5rJ^25\OeRk^1]H
%*/1CaSBF;C"A%,Q!KalFH?.G=fA,hn=<d7n+phV^$J+B*n14l8UmFtq\@IA)2.NC.\5>XYBU_">(/u&%=_P6PMT_A&#QoYh;4F:_
%"F^E=WR*Mh)Ik;4"^^EKU*dQ.b]S&b$%?r[=^M3+oW=KL(dm?s'ecHPZE4pABI@c8Pmp-iC6emY.r-%G#ZOA7Htc"1E2nU;(:8rd
%Nm:=sSL^'0aJp#!$o.q\b(0XG(_POi^;jiL*ML5^iL9&%'j#'"/oW26kc_%dRh?E?'=6^+Wt2Q[\Z,j;7LVd>3']S=$8El3`H@-M
%Js`J`=4/Ft.R=u))^[@%.au<q@;HT1"1_2/BRq?58\,q50ENjNeqe3pBt;.shCtt-Ahc`cK`BJ6*qIGmGA2<6OeY5fKP+6l0KRjD
%6X4Be/Yeme+"G@sP!g`AV(V7If)l79S7o1Vi;bEm/jW/lS8c=00K[*[*Rh)!e4eS;9FF6YoFN^:aC_iI92*Vf$_o&*P3oWk__^Ei
%7iCdgJ9?1Cd0o&`)<`g'()<tS_g:2`79$e[D'R*c=;9nsF9Qf>4VLu>>V>Y8MEE/.EFd/A'G?95,5+E,$H-9(L1N)J5IUZ]C*/Ro
%J[-D'cdC/#ba=f[ZFT9:KW\b3nQkMb@hEigWGVbAH2-CAKF>n\cVm5&,?H,%(atNCP6Ak7-j'r2LoG*>R=nj^ik*.a[$o<`>,:op
%DZf&a#>F7]#j,A^fm(d<g(nc9)9#:(3p@E9Q=1UbD@3,D=cHM,Tb(W7U9a:)=Vcr^;fCo$K0(%k9Ou<^LaAQNRn,2A6j5kU4RgTu
%`iU6N"+j!r<D^GEg!V#qfL/Xna(1Wr!,;^'n.j'N!YKXae?@B$ZA;Y/a.tiUn00k^CQN^WVL^M]?=Pam:('&PTEVFf/K$GfQS9\L
%M.dh9j?[8I+V&]N89ltY,6Mn?6<]GJASVd_9]Rd7('NZMlUY^UL&s0,MK*%gZR%*0OTWL4PImW@T&u-GWeY9hlnQSkil)h*#SPF)
%W0oE:&@&HuJQQ:b]X;"EL7j&fd_AOTAWFmmOQ@eDYQ\W+GlsD%/IJ9B/RlW5\iR3('AI,'`jLh#Cn#2mLZLetSh,C'3Ij#@@3]h(
%/8F`o20\9JYm4eF6'g)XeoQh84^/$+C`AM3&@TAJni7."qofa8d,M*r"bd^3)I3T3]S/%j]l4jB1LS7>OR#/RPXE;$73W'--Hh)"
%HO@lO>R1Lg]Gm`R45i4s'hL(;OBKPYi@gp.j1TY"87RnChPLIT1Ot`&-tD0F"?]QC:6IFU6/!Po/I5%6#\8W50VcYR,3%6gKKMVV
%^TFeb'[R-oT)`S9jq`cZC;^*<i%Y?o0M#hr<Q^!/"oA/<!+$=oBiqTMTQ&gd=R\eq.>5@W"-<P\:CUs$mV:#=&R85[f(*&>:buS/
%b7V#\fsTai@%nrhELKQ>1Cf[ROZ6jeC)CjO,3'*9V:T"0JCoJ%&!6;E@M<H*ka**J/0Vg`;RYgY-2F%3HA^65k!0KXCaF6D)4b4L
%#+QOd;b67`n-h&*M@FdRU.-s0/->^b_E%2i`uoM2AmQ;X%FWX/URa\IRl#D@jp7[)84odLm/p?)JI>h"R:\B41>4.bi+tpS_d).]
%K:nQendE9or/sqsbQ,k_P<(*KY??u*lY'L2-@o/5gr+s"A(trTa#<LPJ3+=Tkh$;QN$5PM.:I"s`DhJaR04-?19$t;O6d?9)V207
%!bcUJUm)o=HWZXCN*sG/lp8cDZe-SL=X-k/iXI'YTFiDIX%*/p)1gE1]ZDaJ/2IN?Y.^T_RRBhmR$eeglTZ'#m<W_rZqEiW_Vk'4
%B#:,Gj-<b)`lJ?B.pKts-t!nbLfL+VCr(hUTq:5N'%pgJ1];\<+:0>C4L''kQc-FUjEUtrZ9Qhji':+[77N'@XC@q,TkLa%-hL7A
%eo`k3'@oprje1<-#MLLf6V@'lL`.&DJTPR6L,IYOg)VRr[4ioV*Q+p@XmmmNAHO]q>Z6g%!Fmt=LBY),,%L+9=W6P_0NN57#e576
%,B/BF0$$Ih4m..pe]K9@+<eP<M.cC44_fX*Ci\E%m$0#Y@'#78KR;ZkXWmjjW)<,E,jS=f]8]LSRIE-YlOs8Mb_oKjZ#2R\K0j>(
%MomKD0.9jeGM7a]6FCOWWrkdJYWA'O'C(:>A3pSZ="=\?'QC:cMt:G0InW>+W0JW?!8o>iM7*rrAKdhhlV@in]5/u:P&`^?;<!`X
%UlA$q$1n)fJ?_`>Mop,SkWrQRBJ_;K,M$RS;ZMXXEg-,_C*5<qBuG:Q%=\un!5X3%ULSq;6h[>Y95N\q$D$/dj;YY'903R0VkITA
%<-,/+#FQA"=d%*]He;iDa"X;g^tN7_EG;-b/.BX">+$'iKV8[;Xi"]oSo5cdH>]M^#B#EQC^@d@%\/VO9Ep0?M`V[Me7Eka%%'!c
%eNl;rKnXgQ"Q:7h6h2eeS:h;p%'EK?=:PNCX8min:10ME1(L2tcmU=TA,m[>M]h`7EXeWW=5M=YLHodBR6W2OXL'7i^.dUXj[HK0
%Uf+.$IgE-\Y-KH0_^'F<@$?<LR(;^\pl&og"sd[n>[g"+&i#f-3c@te8sto(aIcGQ^^dWL'5:p^+O\O9V+nsA)-WiZD91onUC/8^
%]`#:QBDN\6(cU3F?l2'ZJ1^pt$S`R.5W&ueJt$OZ0K`+Z6\,Qkb"+s.Ke6-Z^CE[Dpa.:CX<YSj(/U:6Nhg$>coJ=>g0mkfNo[t=
%X:lIh(m\>kk.o`3M7H)*[o*7ECj[+0WIRD"T8QY-6sB(Hk(6l0Tp$Y<C=.iTQ::uZ<s5,Y(2-+DEihkR&-/+^P[0K*BLFi-=W/Io
%eonilAKfCN5\s%Z36^k(&Yk7,@c"LMZ59L]J6Y5A02`:<):-$PXGH8^2*&qpDK>EG+54M9(W9=Ei9DII6>o"W`R>sa"<h3m#]u,N
%`*n^KLb5ol914ROMY@E"0i\E_&8"%X,!n6Lboh"QS@4\Q30NJEg,B0TfjOcD0i'.L%;L?#E79-S1%dM"GndF*):,A9I7"2Bgo*;.
%.\78b<#rJT8>I(^;$O0B#ZH/U:=8ftTXg^c+rsF2>SDjD77+@!JV[V8G2c=3g<:N+&/5;ARY5ZkcNZb?N4`.UUA_6TMWQ]HHeR*r
%N28"s(O7Kd?8`2==<%T(?a6Wo&[jrTc,_Xu)1]>"a;SX?*)8ghBJefHVuj4:BE?MHKr7nnfJYSi0PJuX`XtXukWgK](cdWZ/JB+Z
%SOe$3=]S1T/Wst%<<4u[GGsb'Krt\(1"E4%l@OOPo"Nu[ZtUAnM:L-A"d"9`TOY,.aFfBreS>%F2$(?Z&X&mrD5!7'UB27?-okkA
%,,Rj#&;hfk9[.&o(D0#t[D3:\"f[E<WDU=49(Q+LL>e"o[V[pZ7FZ\Bc<*IVKCYrk<_5tPXpC%G@"HuEp/?:99slEmjZ(Ts)`8?E
%"l(s]KnM`;"(2CP_^act^cgF.!gee>a0&#V<Fj3-*I>^1/anFWE&k46K98JJ_g"on7tIAZM#b,IAJh'HJp0Np",:P(!XRa8=G<pa
%TTBn=Wo5Yier`QbW'SRU+Fk5Z3_(q[?3))/6ICNAb0WF$U_#!6<rfMa1YT.3JCFa+k86Wm,*T70OeP%"'@lreeA-Wq.CMX7E"'U>
%$lY_43OV3H/Ap>$UOgWHLK$K49E^$Mih0mKQ)@KMIh/ME0ba>@<1-M;JtS`D)J,@:EZd.^ZDB$!92#OR*+[2IM%nFCBV+#$%)A:A
%ZZ=;Id)c'D%d\=#<AHpI+DB>a=LWBc4,8MnM(YJL&P\*('^i+P-L.$\-`Xbb(;bW%l]>?hpgGYdfd7S'\;`(]b,K8E"C8mO+A&)F
%bCq5S\O(Xo,dIMe[]M3D!8?R!(r*EfmkGP"9cU-+k64!SCPbKW:RU9L*QLk/La!&R/eg&ci2]5B>nOb;UN]/#,3'ouR?8,\!t:qj
%&Ln4?KGg^:)\p'qM&i845nnk'!GoX'KsTTi:co[15_e8&'VZ:PBE/C'Ik2:J_;n$eRek07(DsA/n"_-Y>TIl09+pJ)*6$E,GJMV&
%]EM/Z[^,6MV?Y.;\u)g6irK0V/iG^r6DE#N7u,T)!)BbT%Rp4rfoa2[U+3OL9'7PpcPRC.+^bFm$':r,'Ij7ESs8HFAh.AZg,T4s
%Q*NIYiS:Tej;]fcp*!r.'bD?4<#+@&0<GH]L*_"0NKbnY;us65Od4A1?s5fB6%^<dI$Idj1SI>`1tthEf7nN"8,:[<OIB]%m>I,m
%4ZfONTqPiO;AIkZRc(ft.*,@Bl,>9soKWG6L-$l@;%[&8Gu%FpP_><ir'g.m/CO[]2,cr01-hC]SXE/N61gih(fR"qi%J])NC-[\
%_2q5g"D7ou(HAORdXr:]%3nlPVQ[l7k*VXriK/BfAJ,#_aO#>L#s?e$$j%7M`d/aH+CbkTMTqNSTmeUoS4:[+SdEA)ci@`m<7tc?
%DugA9>V]Rl_,c](H?)WqGANHG:R"4?[pU)1MCO`G")t8/$/s6B>/UI-'2c#o!bAnS$6PtP6:>8oIgX^@`1%<D#hJPP1k62)KFEae
%P+H:p_TX:gE+o_#d3djN!/1WOmm&:?#a#Ta:c(OC55-8cJ<2"3?/t\mj"^aD+DZ-L_IO4"#8D`fdSY<!Rb1%r7-,7JLo\Br*Q6rT
%k``1@*&0;d*3-YcTtj>E8<mkhZin5H!H'J7AdmoW;(Y3JAOpVKH*.KD9WQgO>Re'b=_&\H_F-Cpe;@D%V(`ir^j\!m-)(NF2Co26
%;^@5M@qqs=:foLo`@DZW(KOV@X[l5C+aVWl:SA%,#fEI<["23-9V-i0pK['J)6_ta#oU0O#afGZJq-%X(IGYhJ[T!SPYsPnrTZEL
%EXjFT?,"3DXTF.k;>'2V1BnX]jKu(7-thKV8u0>'V.uqR?^Q_>aG$rSM,2j:J7Z<s$-:[?a8r.&AN493?j;lVLLu$hBcb]iFk"'#
%a^()s@1FP@Ku@]DLEtedobNslQN9&h^uD:bWY%L@^CV(PHSl7C=;HgZT+o?hbV3Hp-5mbL/Xf3[9]Q5:QI1u/"f.<He2AOgE'VQd
%/Xt8k:;SjH:e(U.AjcVMh?j?p+Bj!*aOD>@:b,m\]#ZU["cVs]LK.LqeG9bBYimg?La7N/.q_^H(q,C2M&E!PZk-9j;-=tB1JDYO
%q5U:q&H>j'$cMpDiNVV!PR&D1++e7#a;A_,bfo0iA$FtBP<p`Te6CtK#Z54!INm+&+4_,M%4sOd0uaY?Y:ra\TO1T"2fK^iM]^Nc
%$HlCIAW'DN@Y@mTpPW;J:*ZW")7u50i/0faS1r$PG\nI;-%Oq*drKLJXEW;f_`Hd]g'&YiaO[4j-DD=7IQ8GYT*HI0.#sr?>tDV)
%$OS%#BG/IEMTmicFJ:91V/t'O2)9uP@4<N(e5CK`1;B3E%]Ek%<?V]_R1kOe!?2>#64D4tQq"o//)NSmh*Ek4K+LM_$FZp>@@>#j
%KTp"8,84!*i1S9X$k&%7B!l:e7[RhF\T/:?10*"UC40&T^ApTbT"$R/(k,bc&O[Uq!q&BaMZkJ4"M4_pcuhG3^_"jQP?TXkc]l4W
%@WSK)#nREH3!qN*V@9@0#Sq!VLW3\R*)dd.2>R+tFM*?"kJD[CJ_59\eZh]V'`3a'1loo*_"oMHnmM\+(BTnUEM%PB=-4u@,i&GY
%cuqkuE((<Y>00`D@,lC6%4dQt]Z-QE75:0;`Sc`KVTaqC\WEBn#;Tsq.,>8,M95FG$sM&[Td3`/<skU1:*lUm\[G0\#r-%7G%=Sh
%TP;iMX+7u`os*+t+A\df)e%>4MntXGH4h8!gZlYOAW[lmYm%j%nG?$^6a-]4*1h)M9B#-^AK8hGP#X>T83la)>=-j+0NZT*9[+%p
%X<47_<)8:22?ac!#ppmSa-Qeol<Hu%]6)&51`(j+-;PW4R]&!>-C2Ks8s;q:KiePG)Kc(DUS!JgD5pPi("n;+n_JhaGXsf]mBD%V
%<?tR0pbm9U1lK;`a`k=mT`k[j]#>/1n5,([n;#6ZXWpYpZde]k(k*9+OYUdZADee\"]@c8&0,%Zk:R,b0sPgi%[CuDS97Y/8VFl'
%GY*m))K8D5ML6A(Bu!.;-eJN3B"YuWamnU@>0em7OjI_3?5ojg;2Ete\2pmZ/bLs:'I2-OfH"oX5A=6m4*P9P=9a%Q`9@%M%;V8]
%Fe=Dn'ESR9Pd3Khij4=P+CJ)d.td1kVNQKDemiA66TSELdo>&;_?=-Oi?/HJkX#_(:q$VPj5!;>&K)an!/5td$n@Ha//$ZV@&AsN
%89V=*n"AXAEWs>_E?,OJ!.#u?;BOu_ZL]'"_PuFV+Bia#HjV0iT8k)-oN5[r@2[<$^>b".8G[j1JhW#ubV_S2,qqt7@Ltg6R1ZRK
%;.4X.n1_]E_-Hps8;8@-.FXQ_3fGX1[Uh"eNmaW<=")]4Ud>ZE(LUX7F$l?'YGArLA5^kF'oE'Q^jRb.3oR+L*+g[nk_oVePTY-C
%T'4Y.79:Fr2m5h"_Q5ZJZ*c?dJ5EZSX'u^".ZK.6lR\"KO`1tgkic*L#b^_$&e,/"8)#**nDYHZLQqTl-4\6H!,S,k3'1XPriu"s
%RB"l#AVIrE-hDG%6p2#o2DTPZihhE$/!;;JA-3P+6qRkbaABJ;aV`Hg.ZCNe2+Ajm_$H;O&6'sA5S*E'R$&72:n-n?<$[H_R*$qf
%1>upkDdFDL&EL.(oH-42:oMuCGK--[Rm8EM)<GAr?s'\*KWd1Zg.itu^XHEg`$1IB+_4,V%\$-G./W,)Uh:.D9l@",^6Eb8i>P-@
%ba97k<2u$iJ;ceYXlqUGFL54eZt2%&:8"<QOlJa1'<$\\)SKp:iVQqPQnm\=F-pIsr'dq%>\"dE`7)8N7+8fq5a"L@@1YFADSE*o
%0,*ch>:ki`R4dl[)s3Q?K)/IN-%LVs.LO[nGBU4;\ErFtH]\AF15S`FUShSP'[V)%AUbc6J\Zhi+\t[LW\[-Yq^3Trf>TTcUTP,*
%!]\,2'(_P_!VD0P@`\:a:!j(VW=p]=Tg?@<j/9$"kR'XW]WUR2<Y-4&._NomL%!0Y:m4]#'S@E(at./,_MU0H@[`#$Sk3#tp;n0"
%&\5^K+H>$3'`97,9M`O]nD1m_FM;L9kq^QmiGIt8,t(0q0bc1#iNf>"5"8p<M^5KZFkdfJ9<jHgJLQjG%5!6&;oVLrI>X^j#h/]D
%jDrnG,8#eW/\&mOn'`q2Oi@3W)b_&BIQEC/A:eZXRgD-qK7mWYNY+-CfbaTBBa'G`f\8lcUP]LpTW+h]:tNhRWnT(fP::Qk9*"^&
%GXIZ2na_GgJVj0ST!i+bs$6@=Y`7EK!g!PSf*!906#HPu-</IDKd5!3j`.P2H&]dC1LX%E#qfoYbtM*dIDi!XVKlOMK^0mAVHbMe
%"#h9&f1$=R$OS'_C'`4)/Z&kSVn7$eI3XL4Ju)X3;,&'YOEm3cfJd`en-Bk2A3rte909!YA=8=XY"DbF!?AbUY"CNL5d4XP9egf.
%0`/@0YpB9a$]q\73X)+861"hWj1N=SCuY$Falgd*4nj97SDUD*lhAGKUCl"u)S-gA(!<ZJRBpqe0*V0)"=H0Vp.m3D+gf22^]+/+
%.9+iWWq^<V/G\brGO]OBIsU%W^Cmu?3(SG0Z4_H^i8k9;+EKtXKZ0!3F*6;]r]u@iS>f%UV@=ffcs>DVnF5[[E7I?Z$q(QmM#YGt
%-cb>d'F[GZDW35TNefS)JX@3c.1(QX)%n$ipu=BO?%;,=q1k.npiB:j*#UOsHBI1/Db(SHda_V\H3Xucemulr/q-6Ch97(/kgd+p
%o9(c'n/u*kP$"58@W=A]foCp@%>YV(1p:86*Z]nL/-)KhMaYV9!>I^G#DY=MPCjPCh*H(#T$X(JkU>H?81Z.Kb^dhH*oa1aN39#7
%aQQed:%m<Be2k273SaUsURZ;W&+e*fj.<0bC>!a1_\jlGDSMY3/)D/a5KPi1_k&%mCDt'J$=A8j0oBi8FG!*;\c;8^$[l$(eKn'k
%Djc3G^BR+c?5C,id5C4iMELYuh\jmu.&'[U*=3Fj"HY0%lF%,(""8QdJ%mckrC06])]?<u:I2+XCS(\Nh7EqCL`H>r5C;n;'.IV%
%VdG&I%o0-U6T`7>mJicA)At2W1'M`a"n*5pZ&TrJWE\*Q'dm#T6"nI"%*4AqeD(iEac<$5E7)+Ca[p@6\(&-]L'ei\)+o\3[EkQ6
%V#Fg(-:%iol;RA9U/9\q[D@R'=;71RG=-if1"tU5:9dIh^PV62rRaoC&8j@+ma$odE#GEfrJJ34qqu4*A8i\?*/X/d&C_R3?E\$H
%^ZI.;q^o5EZFRm3#2@I_Y&+Z`OQqVl2%8T=S^am7DX^1Y^Ytus$oKLmCJ^8;$BI/^&Qq/G_?YRQ9J<H.[ZD=+7G5@&#cGRpJ_`No
%73;@q1-K^l)'*O(PjU[<[>qD<%f_XU'*5d1XH\c]KlWqb^0=jlE6/Q`^\moJ@9*;=>O'8qq<h"OaIE%tO!XBXZ-9sg*b5a2q*9Dc
%.c_M%9%gCrn+"k!@cm,WZ-7]&j9)IuDOQQX5+>[4L`<ajhi<o40,4#cTI_fo@VN%$#_*P<283,oq;[EN=d-1KV(?PlI+O8JbqCt4
%emF,Yj1Yni@"K#L%m]/,%.n)uK>QGm,K=O"Z!Yt:1RZ!fbiA0.T#14=;u#4a.9(1+Jm;fldOaSW&2u,q<]i.4>C#&Nb(W;J`nXb%
%q_cQV^$CYep"mHlHV^i,O"i/9Zk./oK16Lnc.Ymu(mK)-n$PtfoiqsTG[DeNHI&AA/03gjrjO#qM2`_RCJJ?&H;CRWe=4E:ZlTeU
%24\b6gF+n!h3`"h8p,u7=t%DEWYXs8EIj?CH;EnIY6R.si+nP6]Jr$I%6l2Ekr&Y@\Jb%:pq^YtU(J:>oD:5Wf;VU77S6iT^VK-d
%=Y#_`:SUesC4;pUM_UP0[9jTi<gpF$YZp_"pOukB/W-r'ID7H"8uZ!n(E2hHbAS;QPe;;Q?th.$9rs:Q\Ug6o8<k-q.?%6:5uQg7
%OXbQZo=:Sn4KK7^01D:eZ)]*\DPYMT7V+3,M.i^.NHD^n/iV5?7_7A><.CF)Us$`Gbg>QoMs(=XF7CS3i;+GFF>ebi5r!`Tk:;%A
%>Z\1pK6ecW'mqP,@Q^o+c7""RG5A)glpf`b;*e$!JCN"SNYJ_`2s^-g?f(.`=+`(`=)MsB60"Bl&*$NF5nW[-aF(^_F?[tiipb]M
%*uSrY$8sGZrCC7[TtKJU+[(]r^0IL:W@e-mhd(/7iL8Y^EGU7GYA^/D'k8`D+P/1@[I(`0Q#]]]6c>Q[d^KP&T3o0-XuH9NRU>h\
%^ZHn5En'G6k$_dc0d8jIc.]:l$aMcWhApAts)/MA6)1<8`3Nk!S3bb]D(F0o#$`848q!dTr.m(e++9J1N[og(,88BO[.*sIOk%)f
%UZI6('RF(,>PUi*HK=B/fHW=+3mZ,t3<kHE'FTn1^X,t!*_$bR6Pk!+F714JGjT![lc3o*O-VdcK=qdTc5c=M:of.[-#q40[lnN[
%&%d=4n8!`tI48jJEK^nJ>9&=sr9l.#BY="N*!aBeTa*mN/eBQ/_PNfi\KAS/'Vd(K?R7\bUF;aPZfuh$%uE$15rWT!g6)IqCAqk/
%2U[j_EO-D`5@V,I?[<\j%%H,CQmkofo'^@C^<hg[=okm8ZcO#@IN4.=&1V8++WbDq0@-i!+2:P,XOO9EQ"&i-#*Trj2<6&023#]0
%^lu$i5eQ)e/rb\=^TnM-m.s(:]bXsA*,M^X^-TNkIE9k3>o.mEUL7G:@XO,"_kB_^^PO1V%1<VoiG%g:[d&?<M]Z2m4n+CX`r6AS
%iu.Ch"WK1Tdcl+n>RlYETGZbLl!I4.l.8coM;^Jiq>!1%Ui0>6>;XY[EhsUoWQ._,k]93[*""Y"iCbhVgVc'P_np9!$MA/]cNU/<
%gc4f(6cj@@5&W'.lYn7/SXUJ9N1lr[<W`7p4S`["I-a"1q([oP!/L_O*X84UoqB1Zn"Of9OUQX,*0D(SqA(G3Fsm`J`3AM8%B58.
%@0Z_^a4QN@*hIBk1JHu?:b9VE5UuJG6iH"OrqC;(Zh9bEr*%<kVD.m),na]Kq)DAh'NX*ZUDVIi&[.[]@nK^FrL-?h;N>a(r*6C-
%C-L[GO3T/2gokE,$g#0b&bVdfMn+I4SD`c?C>Wo)$oP!s7nK`QD[s0?WiRq8>WuM.'Y_OIE!E^WZ\fpC7Ag?\+3I1ISmO!s^Esgc
%PeF2!8oaX+7-gmciKjqK=QF;WGE(Ma'P>P%W(7VH'T"RVMG0O=2([mJ;'a:,fk9>E@2ldSPh[Z$AS=D-rgh[.%5-0PGh+[.72Zg5
%1Q"U=mT>_/98Z/pTc+>2/4qH#2u'X+08&#<@Sm>ejh.NoPh_1W7BujpYpclu_naa2;(Tl*d'o>[MirEYYpck0beW-45/a0(K9p0e
%@qoK?j\Hl;IdZ<:(XJ!SiAK>Gi@F+G4<*fp8(#Wp]Vt[\)gg1@ZB!(M+"RhQ[MX#NOJD)#I4t0ai[QV]A<iPp?2GMN7RqPP`Y+6o
%g5)nkkh8k[[I"lfN5W,j-*@D\;b'f(7+M:k<,En^]dR<+7+Fb+m6==qU)p#o55;SlD+S1f_>ie%*\%EQkSjEt2.E=r'OqG=f4]8c
%>0b?Aj!?h+8rsmPI;5i2Z%Dis\G_j2-\9<l^OtNcdJn[OLRcCN43P%)<9]k?5:YO<pYmcJS?aM0:qahCfIP$8fS'9A-2=)IrgEe9
%L&[6Z61MjHE^$ubPe4^-[H/6+"2D)UC\&a[rL2H=!7,^B)MA/Sor9FVdsGOk<Ij7D(9csK2Z;(H2>tuhI\u,JTSZ/<Jnir1Lt5\3
%jrTuDrKm2g_K_RA?OYu`:E4h[<3=Z\1j@H.nbVl$]/)\1Go?D4jK9;G=IiqV$,M_u`6rUcL7SabV!;_Mk40APk!/S0il<`M5'HO_
%[EQH)m!\(5U=D"(gi&Jk>7;HqL(`ZSFkaBk4gFlC#JX;Qgm<U^*$.=Dbjjl7ZMto.*(EH::\*.Hg!`fqhnmJ747`D@k;>6uh`__q
%*43%7o)FaJ^],30&KY=jXi."d,G4GGk<&81r[2'a1@k7$I(ghtn&X\hMi<W?TC9ka)h0r`#K:06YML3r/DT&?35T-"Pc0PG3UI@L
%lb)<e\$sUAmhZi[H4\g[Q]5-%]ENY4B;N'm>q'hX[2`h[SikCZNA(R;D:WU8(`7JG>1!SFRL_GXMG5?c(,@,jO"=i?TTUthrO,>b
%=LkI96$\.tO^P"^c55mu/)L]!@aJ5V"o4EUbqF9`jGZcF,Lb>eF>bnF]gU=P/7!%%5O5qcA@jQ948t:-WS-M/]"s\L!R-"`3uVTi
%6'6YTBap$Zp=W-G<KR&a7U3%/`hmQ$73eRGpi%;O36H%paDlr9g]"h-fkE!CrTPPT'=)-'!uUE$(aGV9dQb1n9oXQ-(-bpaQ^,N&
%ldh%h80c$qaRJbIY2@DV]P'*Z1;%9NN3p?Y$nijCbK02D)l>JJ]Sm7P,K%^GnBs859E20CbDGg.(^!Z:/%7l_6$eq;qFaHgIW8@7
%Id5Pp9?uX<(Rlfg)TR<#X8-iSaZuA$qGEf?_3i-5f9qF:QT"X*,Ym0V;2pFHat>@8m3F?;3KC*nNO\#I$IdHar1lG>n/QIJKkZ&t
%A:.,55K=b!dGOp:]QI?MF&[R%iQkBoV.$I>['=hG^%_,`^IBlUq-ta@SYf7bIfC.Nhj0Pb:DP_Xl0O\igNq3X_lj7>R%#lg7kVec
%0_7#*_^^cQGn/Yt>g",d*ct"4/9h(a?CChf%e*8M`N\^ocRAsK[PKSd*'M`s?Clm`44[s2'DbcR+"J%"j7S>:ff78fmXoam:^413
%doj%LN9S7m2u4q>`1'.7\Z_''hg`n20e0Uo6Uu<Y@8JFDG)S^$J7#Z(_gMQ/N&YkqfeGs>N'Sa*_m6<f43#Wcb/fSt%!IU0NeZ-S
%@mqcYFT(R7k3!Y3nZYoI'4@u7la\(6q11-Q;f7n]pq4A\.U3NRman7T0l..`,Pm`Wfg_ZtlXgK@YmguOdm>e?7^ZXuCN<H*7ZEuY
%^E2akK!3FlS;X0'[,LcH'`R)W\UhFd0:hHj$4ZYPOSpafoQ'4*^!r3,UH19M;l@W-`H]L%UCp)&Xn6NI0=0A-*(f@\(>B^3U%#Kk
%.E,`(&hU!=nU$395>sK(G8Yj)S$e_tOe8(N2@>K0KQNVTs&6U?W<kq$Wr9IRYE>NcpZ\oaQPAp(CGJ6jn.fRk"!6kFB*tDAYJG0(
%KS%9f[p8b/OCbE=9.V#?G=%6*O.l.lLeSf`'8FJu@/VScKmq1B,@0^D#8l]Gs#Rh4BlbM9DPYObcXrutNO67rVD]5Xm!@pMg^=N$
%Mc"h/UsG%m\_j@3`AiDnF`+##NRYM$3qr9PN7>BT)A%0cl<LF4%#m<WBYOP$0&@jC.c"L2F;L37riYD(@=p4=T8Ok=Nlj*K?NL"_
%)5@;H4i?h/\5?Og6,#FUqNrqDY!aB#b0(r7^SX7cIuMcD0$($$nh/f6rS6F*6@gUd5?DNG?]J]$X#Ia/j&i9<?GFckba/hN%9\]O
%T4,9"46#0-jXkf+bl=:M_&6Bp#F-29\o^c8Kc\\rMma)hqss`tO-OTfe?@/(I-rCP2l?P)IN>uODZ_!uU)j-UL=r(=96=sc*oL2c
%X\;g=o"FU6'Y<ucqDGl%Yqbo`mFKSeEAt!7IAF:M4%/)))n^#-j.uN9$Dh>c?_G7%f>c5U`N=_9rta(2+2R?rPU'c+6VX00,sH/\
%,]1iFF3$!3c@JM1OO8[':eGeKMRgPB@(60=<m!]Z55Oo6!>Z>VYWj9Y4FO#4o6]`]peSSPG\BM9Oa-UN,KC"KW/cP*Tb*)N1=7`s
%861r?Tb`Ml-I3Q`>n=Hmrhke4bDa.V1eIa$Y^\rL+9jKKN-"_8qfqeobb87>6H^@=_4F$'H8dEs_#9`iHo(!EZ]c5\K#_ag/c/uN
%D[q5ud't_4Z/3,I<35VD^>`_B*!_E_`ZYC.ju=4T0^-aN-cPn4B97,YeVHL$4>$QYn]#"E+HKhe3;c+hbM8093f9Un&MLACc\m1i
%>L0;u_l0fPkYaVE;J"EfnAYkA.iIop6m\Ha(Sa[A:se];rcJ+,i/qHDG':aNs*"6L+MDD=5K9CLJ2ds2CKRNg9]nE\m]I!WR<Y]"
%5$hpJieum)6XM(ukU!.K0#iuW#JNaKi_-55nM3gP6X4.gR!$BFSA)(f])RGR%=ujg`PpL.KN9o\`*g*-#jaNhDB2>h3_JXGUu)Uj
%WV\[_4tO0VkQP_+/XNq4D5U3W8LC&n''qp=iJ)gqB,QH@3f+J(>YK1TkAa4=/_GKK-9KImmUR`fa@eR).@.1N0E%:*NfI8WO.#t;
%M:lKJK0uGl,O,Q)f)0Re2U7d+#4Tip=X[eP$^8te3]_b$pZTZNMm"-0MpaN=V@OR8[S\UT*_J,F)U?Z,aC.*,_\Q_WRmun200u&^
%fX%^Gm;h'r$q\<l!*p[Ib/_.0=e]M*_`*4[694ncT77h]j_q<umC:g0IilcKZg\!4j=</T@^FXeh^8p3Z@<\?&kB>l+(MJr'C+2V
%?Ruu\']7B<Vj0ko.=i/_7OiC%hYjbP'R)IO7m,8sKP`mLaHPad)uPO;^;<#T33>#YpJ66=D:J%5nVp`4W-mqjmTZ8Whtsfd`@iPR
%'0?6p0rP+:7r>1_Jm,_&PM&:m)onOEV"?#'NGI@%J%2&aq?V23\CfrA;kK=P85"fGZ8f)a"C4X8^EOA+.Dc%iAPA8I9,d`MG<%L#
%VNF6FB$MRj5P<'S43rE/^UcnoKWErartj&cEtUACs68BiA)EEJMpA(2[smAU45\ZdrN$K\6Vbg$d-j#2T)+H(O/sb]?g#Z(D7T4=
%=ah#(F64\peioE\XuK]OjB"Z'e81gX/HuF$8fW]&i4Okq07<j]iI@[@Yn3O+MDC7(=FRIci_rHpQ;&Cuf]@j4!.t/%^Pd%-r6kb'
%r?]bM6/ppiQ,s!IIln=5MYE7r6]oJ/Jt#0]MC4]619'-2F6j]q7O(aY35156m[9+`r:tZ6-G<9(Q,Fq#Iu'A*rSc'eNcRG4m&#"n
%K5U'R#!.S/d"k1slF>h^6sW.T#OE#lh'UdZAKrX_)'\tgV&[YX@>UD9<@b>dlI*W5Wbm*F[bH7]:67g`:UOb:2Bm0_;Trb&@:Haf
%-Ih'mnE4XPPMK5l$#bE>g<t0ADpUV_*qi9LB*omCGl7TEbr[&J=nST03jdW7PA[bh%*i+Vg3Mg0p"c:<4?`bsNDT57PMOL%8W]#,
%U`o$&j3@'IR3V<EG:^YX7*E8iH=@W35J5ELUlmrS^R&gf7FBWbMi(\Tcu)#16#TbDbu.AUD#"NhTdR%1!$JGXptDH%E'QglkjWY;
%)4_uk.K/.=jqm^=9phNbIT@>T]UkN@f<;sb[JEKk9o($P+*q*+c"QCE?\a*0b*@!cI?EP)/%N]nB2LTJ&jT_>L^DoPb2P:A]joeW
%/jD/FTQ)Am'4[b6oNuklrqAj,<o9F[Njf]+@7lT'1ZIbCh[dTM'8>Odn]?Bu*K1(Rk*^#9)jShOOMB\!7$m5R&=3P2jnCJ.8c:U9
%9t#85l+]BQQZ\SZ[snk&q&TT0?8!(708GK"ih\&H8Rgp0n;GUd44[WcjZp]WW:tdfeFQQREI(D6hL!f780VtQn,EMrY"H<lgN.g,
%o-;a%#%UbmbjnX71#-hV4d/t..)$55]K#T;XAkd\cV:7P-&kT;gGl2JmX"bqjC"QC1b_7MUmB/g-Jq)gb6[8=;&HDF5IW1O_lql"
%%5)N(UIT`N/(T8rqTqJIs-`iGmG4=*XlT4/>Jm^a$cV%,m++`ud9i&2_<OTKb*<(cFn"2P$!WaromqZR)negQV:m>^$9r!'9d85B
%0gD`%<WCeFMhOV_Nb358@WK/CBXLmOWs/0BiEJEK:^d8qbcupS,$m=9;;th5*kdH*&'><-ls`f&$1`H-oPpuWW,8VM5'^`_juP<4
%,QEV<LIsd$>YFI[FV*W<St,Q425@Mc-j)1LbqPq0FJ&h=^\qpj`_d']Ibo!b9.9e-_0H"O@)hfl_&)E07^-*2q.;>enj7=WO#1`B
%&`J[Bg_RkW/dJdPPr#5/p+8g7^'1pEn3bdEp,YC".i,.A>X_aps%_'q4+=O\O2rV\H_TZS)aS?2>EEW"C5EnEkf],ND9Kd<Z4k6s
%a\Q]YRb0?3*/eep&eRWkRIA.eQT,99pPBR:O$;ugPFu522GKWTgB0sj7^^p*nH_hPak/@tq6&u>"c;83[97?.Oo,6%SZPp2WZFq^
%&#4:VJd8UqZ[\l@T0t%$()/iH!0&P-?Z$Pj*8U(k;jCsi===E2HD=Md%,t_TK"hcdDJ*CF_AZJRI(m;1P$`]T5AkVX#46Y_lnB8m
%,fkA@OD8!p>br9G2]I+#NFnqp[d4<UQ^\,E,4Sd<j<",e&pLa@fq'h+"hsAQ,=pT("6g)=MX;^iI[)Qa]hiGZrQ#:2Oo9*P"H'3d
%'?0Eb[tQq7rt.@R).(1`2/Xmm/YC*Q3%@3(Ek<MA&0IIRbrp'WS7r7-:ZRsA-n$7+F@Wa6A*Aag*CEW`E""YD/iKYIl-b%VRpXLM
%XCl&oO+E7\o$a)\c5.Du9d-N14AgW5AX%"-I,d/1B:2B;0+'1-QO'-.)M?9>):\Ag>&^7OT*i&bkSd")mA-g_1nj/R@rJ8J/Aa6i
%K3DRMl@q;6Xs%#ir3n/RTj3#ujbN/*OSJ4X)^,H2#5:NQG?^.Rl^-G<8>HDh5HT`T9t;u!REDD6a`V)D/<OdM"[At6A?\kh#Zs^>
%`oN5UD70@j>,au@1tM*N@YJlbPG$V\elrE&F>i./W3qAI:HG!4H3Dq&D2l1g4iem6C.b#HK4inQ>>:-JfII9jODWk0<f/*,=eC4r
%!(V_sogBaBPgT0h9L]5Dk^L:/3%GgEm_$A5XG]D*?hp`)6YJtPn8hG.h"Gf_jbgH'ZWGEeRp6c@4?2bLi[WLIM+p5/-jXoThefYI
%jI"r+XK]AbG.>s8N^RK_,u2"PQ2"mHZDNN?`-\YYL_,iDm`^6mGsD+trD.dY:ILB`cTu43:NhKHGJF#1Fr](6ZcX@$X>PB91V!1o
%'g`jFqhDS^,ff#UUt<W6Qk-0a3F*E8a(#N!6U172qp0R5iO/K<VlV7d8Xu\dT98eFO4df6IuhY>5?e]qj=kaA)ssR:8)oA^E/4+'
%-2OND(W,_>-L)VZT#"J_cRf@uB@3c/N\ftf;RQ$X*>FG)NgnYsN+<V-IT6Y'NNN\oopOW.L'n&J[#7_&Ofh(3njnC?i*uU3hGh"$
%?7@i2@Z1J@addOYR<QSN9SLfge7k7ROLoO/ar!K(Gri$g)'u#SY"hV/1AHk*;^U)@gtQ%7:Pt[0mUrbP0`5b_NM,<j,H,IC2gA3U
%[2"7N<Ok^R+65L7=(:EudV/S"7[i:>(s%TS(MAqfNbtNo=4qb4I_HpcpA*p:QJScT9-(80WJjYAH1USU.FLG+WjOKAZ$i/@q9IK"
%0m`_26NFQcn?VOTR:inK371lonIjqUBSo@qb0n_4dr:QPq=,TK(Rh2A(p@,=8[X.5/12%IK$^QP7:APc'LLn?.bVu\V1t)_G+Xs6
%]?_/G,Ag)pG-sH>TUgfa#=bGg`c76S^N?W;8"2*M,J+EZW833YHa2',Lqd*p]@V)&2IinV6LMNpXa",P9HhA[1>Ur2G!?U"[tVSL
%,$-:5KA7+TZ<c5/QMkPGo%S_e^r9Ia]a.7AQ(-8tTi(B71>0X$(WET7Po`j_6><OVhPO918159t_(YVla8-Hs]>JSkRr?j[^*Z`H
%%8U+P:CGHK["Vb]=:F7G7*\f1Y3M!U.^.QhHXbLEcKts\N>Ji/5D*1bQR_g(=H5V'l;O;*NiE/;6d/;0>-6@4hK'(LO`\@BIJdDq
%g-CZ8NQ>U9=1":/[dL7hXZTSlDW@HL.WE8(ebN#[e66AcbjBu:EZ/Tc\`1(]T=F]gfW+Jr<U4\@`:IR?WG0$,&@ScGGHC["H+.!f
%'jW;u=**bR:Ng'=8b;1&8:iDRK6lLZgrTQNN[aG9N=O9\[S;Srp#A5okgpP`HM1MJm+2,[3osg&<=8[+h,&-W1>he[0V^ik%tSK6
%L)ZDlfH%Mg:N7hS;g#j-LsqB0bPBe=V=l,j`-"J36:qbTXZF0h4b!Mj&gU-&SaVn1PI1cmCHW9EopBGV="WRK5=;(X;Qa8Sp+19\
%7\SJo7d)U#^0sIF)Ikcaic>cp>Uh-0KCcF&=J42uRel@OQ=u.`7kVe;\GX9($B=N^V%Dn6H9$s$6;/=MHA:n^6H[h.eQt48:0e7h
%gIa-3=sS*tB>6bf]CB\0k;KPEI#,"o(tai3]Qt_kq+M4--Sgi%fF`Sa)`]sB:A<t\gdpOb4fFu>Wn)&<:T]QBGkL3Y\WaPPDUnQ)
%6dKL;iM4\0:*HJu\*<Qb3OnZ"@/s@F/>9Gm8?_4&O?hm.Vqe&TU7ILFS#7`P)e/d&cNgl9\^_<p5somFbC"]rH?<u,%?5M)rI7mI
%XWIGfV;$`*HQp^-*PN3P>pmJ'';B*"&YF3D]aYR=/%c*:B6_bs.Qm3LX8^]SZVo%27r]eDrOM<^)#<;M_@FVbCVSV2_X1qfC(KF8
%Xc4C]8hFDNa'^P5mC$0C4a41GP#f-<l0:AdM<gMO-Ap_![%7UoXqVV]B$O<-<8o+3iEEhMi)99HRI%o?nYb'Y2q1Qa.rc^d.OoVq
%&<8#8Z9nAt,:Qhp53lJ<qm4^SLfoj?E[%ADl1l*LU(+n67(gcaD0_]6ggUkcoZuufHpUeOo#l7'h5k;54Tt0KA"h&!f^a+,,4K?;
%VUt*!V&&o/]:fQH4LC`(T*`_%3h+]shQP`$EB0b)Tf3@`a;`h)hO[BKpd4.T]p?cN1:c65NqYK9POI,SnCH%8)fK<.T<,/4AoA4"
%1O/"8RB0[raXQDtankSUHG_9"*.7VA*kcLKmnE+\W]tt181%uaCaG9ddppM\bl/Gteg6aOUEAGZ]UL0MYJ&\sq1jfqpj0NfY3q2F
%_rNoYf9j1^\K:+;&P_'h"L<K*olZRMR%BUN\%h"tp;PVuq/m@_/$HqD,DCOA+h'#:k2b,'pDpF-%l7^inQ-[tn\ZsY1qP6OT(6cB
%Vc+NBr6(VG)EZWCHp#@Fe&%f'HokW4T.Yu(Ei<M!Fg>-4*u8_hlV9L>I2-,8`7Muq05Fp-`!;q7jcN8ZIoDP<eSI?32G-Rb_G9t$
%C@qi15caY62lG6ZcE")07LEd7cf*-F`T)s,YP$#.mEIZ0f6cXpqds=5j4<ViS&qeA:&J.sRTrY4S!Q2j^G2=m7pC?8!,YGX>dhA:
%gF#479N<HTl]gfRmc`opq[[@%\[]1l?WrqS4lMH[s2g69>Bk=l[rCd*K*"MkSZ))/)'9N-4b#&7ic,Ick>Rq#qjG>D$\1@J/@Od+
%RfB[;&e:;N6aQS@qqB#]%TE)hk5,Z:)^kI5;k)N7j,P,,9^;'3kP;6fa49RVb2qFHjsU":o5Qe*Yl=<D@5Dqu_IekIGnVc"Q68Eb
%piW?2\SLWGg=\Q^oPO"Y?!)N]4MQ<+Z.Hb)cE[34bg%BN'@#<n+%q[lDj0d.N>g9H<8M!=a=aQ\dtPEHW40W9T@QnE62`[qrc#KU
%\\<Idn@8,aG2?Z(O7l`2GRddJl>M]kDleZT`nU7J[sUC^ju4*iG9=<fnpAiu\]s,[&T8H,j:,Tloio(+bO+!SO5?/3-tD`>H/G%4
%7^e_tTASEn\%<T&D/k"f4ajZq/uHXsDAPOrXj)KN[J#U148M;cjr__8=aMk`c:N+u/H=iURG>Ampu/?OPKDGR%5H9c]j\6g=(BA*
%_oo7*\Rf\S*d4s'*(AcAR4IfEHtT>9>!M5i@W?k15'uIMT,,Bh:JN4VVQQ5KisT(HaU'eRPFQ1](/M%R&TJ2UQ`]*)bj49/jQq&u
%P+6m2P"O$7)r"%=S:<^u/q2N'8>^8?B9Pu4L"2u!3e!F&lRYTdn]!s02pZ0#9YK.UdY75;8S2>]P4&/I:3o"IS)j-CnoJgt-S&IK
%=/RZQEc#[n./E^eoe*d][c`jDbB$n0oZ-LfjRuPi,.VdmFZoP4ZMH#\G>oSY^0PPm,W#G\Fn5%pr+tqKMXDeJh/!dgft@J8H"L?R
%--r%kA')p:_KPLfp$06Sk0rE097D=kr07,"8f!RKk9nqnrj"SI]ZmWkP4tJR-Qf7f2p'M=qle,a;//&c20\RJfiULX`fb[tF)8M#
%Gq_.a3Bf;YF+8Hn2P5G8N@i^/^Pl;#rlQ(d%naL(1%MQ]5NX"^c]"tWQTpJ3:&D-6ena`hNhu2?Z=>tgh`>7o=*qokbbmBi@n6=s
%BC)GhXupmY3'SF1Dt/QGD%t%1Y-Z79Z'uBpqK?E\N>9``"/YPQeQDLsh%SU$VU+K$=LL+B539Gk+.k.?>`:=Jl'lZ3^N[`?'V6Cj
%97D<eeX)QUnb&*$&*$lLqa][bZI[<Gk2LB'r:n`&BDhC1F`I?Xq!@YJPuetFpQ,:,G]9!$NBa)F&%nD%nk&\,]KW`C2_fLJqK?=o
%+al:(s*=?f_HM6^0L:k7V$ZV>p",&.\(0P-HHVnOG_7pj-P#8laMc1eI<FNn[CeTkC$GP?_I"Aa3,s<7p3u#k9>*>_D=",HP:OmX
%hTb-2j^DbA^,c.+dQ[<HPI.SL5PaS`C2J"?]$4"<hS6[p4F"J!4.0ZZouZr<NQ]Gi`Q,0Gq1f$BI(9/r4B]ABQ)9^ihjKp^beKW>
%9pM_W%NAW?>!BAZ:9><jAp?75]Cc$geA:6VH0TKd@<LkQ]A8r*h^UTaG6.M!<Sk;X9f3`"0;bZ4(Q6b#_:%GPF+0CC??s$NBmTAf
%`L5REb3#U_5HVVj^*q3)Va!-/&#O:0qt]JSB((&Wn[SR%:rDP*e`9Ehf"7HG*aP@?I;g,]gH-pP1C'F>cCC3,;_t%0q72pkIPio[
%gpH9=A+T*?m.=nORpAY4+4%5dAo787kB^ldpZkk.p,M`4T=s#U?d*tu,i?l_ekSXmZX8VCR@E".3^8t"qD^Z/YI;0j]mf!(cFq%-
%_;)Z%MEgjL&q$;2@aCs_a26BI\OP]Wj8A91h:4W./(aACDoQ\W\%YtRo7m]X`VGFEbM'Tn<hGn33,hgfNNj/:]31N3*oC3f4*u_j
%Y8/W1(UiWkKnZ:,I=1#PeM1COIDOYGV45M``Nf!uj5T(ZgAE.!?JJZ<3;e*-ppPEO=Ze((nD]d1(C,kZWK[4uk1p7m28AtW+@W2G
%MQ-:GWotf&p3c!HFe3k9On.D$]h&t5bJg<_IJdhon`8bCaj#m1V0)=RkG=s8#%%.F[f:W0+%NX/p%\-<2)DT/b/.fOO4J++mo]IH
%j)OD_DX50NH&%5VjrN3?HSZPrNGTc_0%m;YfmA(l[gqc2$:FNHSZ^W,2ok)pnnVY9U"/CQZrYj4U:9C5n'U6%C)>ua/43c#j3r6r
%.pL$CRJh`djNAE)At/\mb*uMR&",N2)7ql6GW3oG,<bLs^1($drqlLGkAkI7i<8Tsl:r?qeB.XK>_@8;ClI_Xe!&j/l"HCD(@NgF
%F^^<X\[fu:e@!'(Tf\`:=aGCW]r!a-R3MUp]q8bTT,c"dg&-lgE4_b"?F'/[oZ6U2arIJF"g^3K\o;#iGuJkCVDfOi_qN8,>BmdZ
%i/Jh\,7arrO1if;o;_P&qu2lT-(*ULhgMo:4BHe-DL$M?/BQ#cleU[s_0pI:E4WX"]31PH>HFncl.qnqXf^jab3@JWAgMr35J>M7
%Xc$93bW'mUSpi*#3kir-^%0uTZ`h+"Ie^4[q"fDbF_r`q]6`\uk>ne4-f2",pBb/1fR6t.>MZm$>!%*n\$pPZiBSB6[;)Brom1U4
%rV1^+Y]f^9W1#_qmI)TB]rk@`Dggk`GA2JXiT^%%b[b`W?[Aek,X5X!DIEKS@:MD!rbgcUmc&EM@G8KRS::/+Yj&i:Q8[W$XkMq#
%c/%p7C+VBj]1Jn1kAY_LA_,;_7UnZ2HaA(520%<nDm?(TqUYXC.^aDAEPJbYrGn"U?CG%JCi?n+ZeK,bOrN/0\^LAGl&1>ncH=SK
%[rWBKT'b;Q2<qfqjk80iZKQboh4$PAh<\HBjplRLcHk(u=Phg)S#t`)j."6hmBnmL\`2H%_Wfg_]oC^uLV:$T\b+a2[p.UZD5+rH
%[:"B25C7^+[=<ZIXM(/bqH/6ZqVh&A>H[UES9PefR2NL-5-oQp7.Ii^G'[XNF+=2ZiF(53Sfb$K2U_o/B*EDHYdooZS7d'?LDt@4
%j5C.Z5<LL1qQtC03nRRqgA5WZUQ8p0Kqkj+O42/5hB+u=Hi9phI,4SQGaH(SD8((8.V%q-]U;@Jc+D_U3dWWgFDRM\`XhFsgg,5S
%;E?qpcRoB"BA)+;PFLq%UY4pHEpV9QWI+L<e`lVpbgGZ\j7_VO/pBL.[e]I\o%AfbqRa)fl,r$Hq7LI7+5F%?SDR(Y5?uEMAf]aQ
%`Q$a$fu42?EpTND]=*,Zhcr<L*mN$4>i%UbjPJ44R:,KmY0LqA?[Y?1LSS:erNL[AH2Z]D@Cbs&ZosoSB]%D(5/,![T0MI&hlM6p
%?-OZ[V'cWm5(1#AY$E?W;H(5tX-LTaS#`l>g!!IX[)bEm4rsZNPl,Lt\\R@QY#AtGgXgd.2S77?hTp\>FnV82dUi=GbNFqGS3O9&
%o>uKqIX^7*=?k+-c+W.]2_-8ra#E2WoAc=ogs&F94`$Y[DK=FAr@qB!]BAAA_VITY?-]J39BRC0")$L8_=?fGc(LG13P!+I^?0<o
%/hWX&O14HM%O8W1GEeZ0^3cq_P5"`WH0,$MWH<SrI&tj*cDT?\_Rm/9O+m.57L5k%oJj>SOSq"CHDo]fXZh&0`VeclecpK&5?.U@
%X6k+KnU8jr8n43a[F4oPCoR%EmHg1;B>!L"p9adtS6N:".gmoYW9h:8(R=le[9$@=*K=-]Ze&QaQ20K)n)g\JAW;)Nf^m-u8Xp-&
%l`$rVg@ZH?Xj9c!HN1GiWjNj6;mp4'<-p;af)HL*1lI>[[2<_e=U+k^QbQ@G/CkbF0b9I:6.+O>5:/dd`2J\:c(AYW^o@0AA(oJp
%?]V[>F=;q69SbO89"Ee"-Gq_:`0'mF)XtS1(CBhM7>jS$4KJ*9YE,PEcG-qmSR1h>(\[CKdGj;7D7=W%Hrj)2mj&]]VUG]5<M,ps
%Dmnp*o(q&-g4AjA3V-t]@(k.8Z(5`Ri(i!d1N$@gXbX$j"`%Rqj`>0SrRF6B^0Z;IQ?Y@S/"'oWYkB$*GAl>LemCF'QE+J1\ZJhG
%qX-p^RJ_Eg+kt_=>\5($)d<hSS'Hf."g6$[l?np;p[`0B]XbB19O)Bt'W3U/2d<cBr_:Ga-CB##cJO'JZuMO0STjN[MRRu@rp"Ld
%C43Xa.a;l`9K%*,G4W2U)nB9:?`oHY>IRZM9^$G^bI<u8NV#C2@(35YQ`7*WSb]krM@4X.+[5+9qX`P+$NDsU<To"UbshA8@O&KE
%?<2]go^bf6NV>+_TA.YRG;JK1kBc7?`[%.Eh`P0=+r%i!STN5K><C^a^ZR)-s!U&Gk-o7bpSr#`>4Pgu0_&_bn9I75=e'k&]i^d(
%eD/,UVnS#pbc\/9h[@=&>rfZ'h^IZb9Co1h.na-`>qNE3UW^)[1:OYu5NaQ;V?;!mXo*2_^#\cZ[LZDO()MSI,!.EV3P<[3Y,D##
%NF-KTGXUbW>C.IVp_le,50pu)c[T1h2rduFh6lf!T@+XK)].9"O^?CYA[,3MRuamt;'40VI)`Iq`XfMDr)ZfYanZH)d1$gTI$Um*
%']+gl1UcJf0Crs@YOn_o(Y`jCIX5H"MeW^77sk.:?X!&:CYK51lh0)6DWkR&eOoi"n?^nE1Lf4td3aE^37d6+)8]B5"FFbR6sp1Y
%KTY?Xf!Sb#@5Dld#PsP:3;rmD^#sQ=8[:5M^W5P^&5[TsdMo8M:3]W4GRspU+G:b`qsA=G)6rnl1/M!6lMUGFVc2,gUsLm-1*a]W
%bf)eB0>9Srj3,lO=3#f[0<ZJQ]l8,a`ML,qpM8[LmejM:F)Ej'YeXLlp;[cUl-87b7kZOq(sS4!ml#'3raG`3p2T6\eR?l)fNNZL
%J*@E?<1a!PjQT<-c9KfY_NX(=9/$5-hriI`lcZVA^V52ZcJ<kmRB+j.`n)CbGj<N;q5sXDkA5&9oZ='SVFhX@O+PJtqVmPLbDRJ@
%]Xsc]aa^J'%=QU"np5*Fr9F$oF0!p-s4BK(4'$E3lA*o>o^rc/M!(Tf1E1BsVs;=9^:o!Sf]SG+n&rDb9<[0*;iBsK^RfG>1!bnM
%U,+QnNg2,90<TZmgkG!ZbLj*ZAeqTK=^RR2crFrW^MMbo]D[-Vk46CDlco5EYMUla]\348P&ub-\2+)h>^SM[Gko&tCA[;]Oc):*
%JI#,![!mAlb(lbXnufS@(bfuKcTU(;4l2a]XiX@O^0g\`piZ&'c_ju/k2cHJDd.,r2SO#BMU(H6GJ_HHf<1.KlhpUiA"0d%n!sTF
%h)p,UqW$nZ>MhRYR24nf7orGkq>TBuk1op%f,)bN>Wf9m%sWI!C7/;>\b0k6pXO&_QC$=]8+N)VVqoeMd>WHZ3jWrZ/0?D**m);!
%kY#\5^)S*K^l@pTQ&=g9:QDW7XLre*mbZ"1V^AUZqs(2;_W.WPH[fdBm`$@C5J\<]9D%1p(UL18f^4BX0<9Pk$9<6Fna5-%kM&tQ
%^#e>l-P*oRLPPs0Zn>Q5^Y\M4JH^#/LM`Jmiq?<F<j-<kSQT71-kgn#Tks6h^R`)\YseTA6Ale,hr*N)iKDa1)`Oop04.i(-i$hm
%c+?oHo_R+-ZUa1C??\2-Y:&@i>2/.u;ebt"f4XE?X#KMCf?YP_`FF[P>7)a-HbSFA/?I(TVb=nkrh<VHII=C*F(4,!L^$4^qb;Ac
%C%ufl&orPIo%.o3-/?IH0Cnha)\t].f14(kQsQq@HLY<dnbD\g0"CrgNU&l5*5-,/=5=cZ87-ucDL][mB_[o`GF[hB(sX.^M1`Uq
%aFiVs0_eQEAdf%\ZjPN45&L395%Eb,@F0A7Q+mfmL.C+X5,#XR4T<J6\NHHX]bmNnM>[#6r8#aGgujo^??9QGCW7lLl'L`5[hiPp
%9#tdk/;E#7q&2Jf+2Y#24sLm>?/o;fW6qZLN!FnF_mT`^Zkqd$E`mM2r+Ye/qUY2?`bBe*a5>ea>eDigXtd]XjBVSNT?c%WrDr?Z
%@7Dl0^D[pGhJ6GACfu&.BGrPlpsRQsSD4%%bM.fY0YWm'h=9')D8mN6JoA(LmA2Q/nmY;4g`B\^r+Ln17Uebge\5X`F33VEh<CLJ
%`%RO5ZORbd>`KkSBeO2ANuRK6J&[FP':Z?:UGm.VpIb$)Dt>>^K$h'Yo)$X8&a+X5;hTSee(hXGmr!rtH/nK+r@teXqi+CpZeg0s
%pugk+(G[T<7%(8]Ib[)4@JRn:ePig;h46p2Q[XF+FjP!S^J3>t':-L12eqnE0Jr\32/5N0T:U#YHl%S#`dBd!2W;b*5BXI#q8Y#/
%F7I.dfBFSts.n+c+-<JV]'ek3oU31&n]'ZDC%=.Q0@o=SICfGdmf)rrRnKY\cCW\ff8n+]rTNF\kI>_Vm%3G\Y!#qd13\(RrXLM!
%Zar'(c&K64Yg0\,l\#F>c`]LA2clVX^UJIdl`$4t4^]mLI<KJq`l#EmTl"TVNdeM/mIpBXZO'^U]VtD!1F(L\k1?cTYPefs*.r$X
%Vq(Y%g%p]I[s,UC5J(puM3udc?P_-.O5]Sl?[GF1Fd;#FPMX`T;=SYkLd.??]tF.'_\W\"J!RG(hejK`-`6>]0@Ot+AZb^`CghG7
%A$a9.h"r1cN?8=Y[\s*(bOI!Y7Y-1bMsmN=?Ih'jNL*t/!I+G9_Y_f3/=bP+FRbm'fCl2tk,Ne?m[mW'HcqLbPO!2N.[NEW)NQ#`
%YbJdK4?>3[TD9JI/h+DnpVEE$+5qI'h1P+/_8K1IL\2Sonk!ap0>DmSW@qTRUV7JHI4;[F-/IAPgq/>:52G28(oJqp07J1jna1tX
%=%$dV08>[/Q?4Y*SV9]".`@oc3;2<Dql;>6Is1+uo$XEX0>l2Of`i5%E9=X9:Kh%.\NYN;cE)E<+.K_j&Fe_@UN:Wth>_nKn`61u
%%qD3g3p,^_+0Y.CPoHnkO$2`u_27[V"4h)CrR4-s:1(U'il/]?cXp]*B5YqC\9V6ds#Y/>S+dns1=,,JKStW*Ii&=tgpoA5+!#IG
%/PPs"EEiWAi>uppmoPtZF_c"2J"F2tqXX*Y^'np^Xg@2/r,GhDbkHn$5Q(61r@;gcPdS's29\6De@?&oKSq4,KQT!*>Q+XYmIL-m
%5If/?Y)$2*c1>$-N7Di>00]9bZf`DMT:#tbL&CK1q6rTVr&M7_i7/q?L3"Hmo$c8?_mqfkP1;W]*JgVA>i'f(1VWCS936mc4ScA!
%\W,XX+QT_MZ3t73f])5(IfD(1n\du&NSf;\QVZK6G^aom57XSErUK7(mRR89BY_Q-=!kBGr5srlS5QH5V/lOTilo(pdk#VZl)`EU
%Gkog?72(@YVa#[ag/pK7kksd$V8q36^0cBh&l\YO7X&G6U5@?S(GdmtR,>Q)$#4=H3H?Xphu430bB2Y=[WM@FGrq_:`nUfR._d#"
%dUpfgr3C>AmFBhWB$WVDSpZdFDftUICW)p?`@mbWUKlou-hOrTl;!-ss*[VmnF?=np!:*KBOd8O/*R=Q@I_A&c,8T9fAAfqXGZ/P
%r7fX-pZ^AjgXS^qLmQD'h>B!oBBPj;XkietEebB@dEHf)5DXFKL[2FU[sjrR?(&Z\m*iS%J)S?4fBN9Em`rMPcd$AiDf94;+.g@'
%9NXHXT.Z]M^0*HBB$8X.b:h/U5J-NhiR4&e=m:-c;#.I^rWCa;a'<uiq;%"EqYM/*aYLb/>Q*s4o^[j@IWEKdr9KV`@Jl(Hb/L#l
%:!\=EFDlkI5!1HacJAJ0pAF+AGCQ,ga0h%&CV.3$lDI_RP&kQu]`,56P/l%0Y!5+a]Wb^+bcNM3o(*sXOljNK0,q7\DVtE67@OuL
%]6K1cNJhS5T#g%s]K(1SFnX!r#!)6k@H6@lDmSVmO1m*1bG-Qq[haG-4>Il!TPs+LNO:-lf@KBGR84@2pKaj"r5^$Y-LU<mM<gL0
%qUMLehp"EpKq&`u]2?l2phfHdik$G];Eac"AjMBONDnk-WB#d4]j9Lsmle4#o!bAI^uQ;t?CuZDH+R4^@r&-cI_3AmilJD%nqF!6
%/j97+q\mA<];P;DpSHL5VblGpmcNd/A8ZP_fV*.5F8=PR\LSHF1>Z,1OZ`R<oI!maouQ^@gbZ2UB<NI>\@d&u235V53o9jEDJ=6r
%p3Z7SH9&_hT/l@hH3s5\/,3!iVa$_T*LUd(VlfrIq8;QQ9:m<3kjFWr[`:2Tk<BsdIXOEYEVRB#Mbhgl^\+^@s)!,*M4(8hc%g)D
%`'%8WRbWF)Fpn0:3pSb:-c[Ik5s4SqB:SS\d&lDnJ)'i`GN056B&]p/DqoZFph$k)fp;/iZ(2H"J,@-qYr#LD]_1iDT%L?DgkUdE
%e$ldb>^Y;0Ip@ALC?&u7H27-Mo%_8]LD`J8_),O#,QuHL=ucD$n]$OrB@V_EGOJ<\0DW()QI!h34$9V0_\8aM<mR(ibB'$4bL+X]
%n_1%)7sBfaO*=@Alo_lb_)eoIj4[oE\p!G9$YOqDq."^$I=ECJs694ITi5U:ppgoS;\-0di_.scQeTH"j/E\>eH)eQp%a^KRQ\5,
%KkL!rIegpic+3iQl)c2RMg''q?U"<HM4Ak$rbaX>5>L65C"AFE1q(#`#b7siO"AMss/sXRR%?=KpM4`uYq$)85F&:8ipP'7jMP4`
%1&kYG`4+@E+B/3`q/YB<4Q[j/%\E[[kHDG21*99*?/>)irqQ.FE3+!%D8!]4C=9NdeWqNUO.='oDLbU>rWt@d=Ket(lMd'H=,pU4
%eq@a$r0Y"hqo\Ic@=d+hBV.!/8K57bhHZS]rVjY:o3NnZ[['^[4B'0Z8k6kLR/P*rjn\S`p:KGVb4Q"'h`;XU\/^g\T/f%-o6590
%UalEBk3__r)cums8s<iT5!=K^I%7hKqX[p6-pp#mDLV1rqfBW)R_ARnb@l6_oaP:"0OB!(celEaBC>b[#@Y)na^5jfD/O_74Z:&(
%6i:&P?f!p!Ir6"V5'I$YY(`?`<fZO[k(BATqUX?-V:SpQVuPbfeRK,^/\QIUmI:&9l!kAfHc0V32Tb&bO(>d[-L(SS4DeO0meTs4
%R("_Z+g7L6,3J[.>9bFg@J]0=j,]LerV4#hT75"B.jPW#K^6oV2GZ.AV_^sfkPtJOcKsPu2g<"i?9`F=)>VctRX(A!phH!.e'du#
%f+&7n^5hjN*d6qn?H0*M\6k<0!V`.Q]6igskfgG/5:N,+s7l#b4h5TAa0li!7a.1+eT83k^](M9np/jjVo;MNrp_7$?!O"ocj&.m
%3YP$>LF8fH*h?D\HgL?do)6T&Mp!b;cCE_iRZ6KChT:Y&4&sTi5CFUkV:.NX-D(,L`CNP'k0ie[>MVNVEH\Kjq=YhO#\*"'HhD(G
%gW;s@(N3Q.p187B_Xk\*78o9*AJ2ELp9R;QVe=2`f=-h>h:lpf([p\Te`@V)T1pub*a`:1T$](D0.(K>^Yt2dle1Os9jW),b*C"a
%p$'oje[^Hnn+*`C*Kk4a`!6#p;VWb-Cg!(6*2n<O.WaSIP7(``kO-QC5'QVQO0.fs`)=>EIW'4CiRN_&;]BB$l@laT^@_3f[A?_k
%PF('k]mkML]'@gBSH%XW-(%H]S]>mGjjg]\Ma-?khRk@NaRSN6j\KqV7AI#WSH!R-_R,^_4!+2mK\cSKX)H"s+=\8rTm%$nkEF)f
%ZWVTqDXlP9kd1^uO4[.\oKASR\$be4>l&L3_k^e%Bq@P<@:e]IZhZt/DqH%bF?*^&NLt)rdOor.Fa`fQU\/u>m4M\Xo#H[70.ASF
%gZU#k5?]1f/7'$15.u?>I(an"Z5>ur7:>$J1=%\76E9#4M=9B&$g#3q2eQ^F4uflre=R<@qX2$QMq8KQFd(^U(Ou/?pFgIJW$.If
%Y1.MS*^7.PS@3h3n[hSTDmu=/AtWka^pco7q1bj=lBNGIT:aHcG^QfV=TB`Oa-YA+*.Ha^?]D*LT"0<!q8JcZcgCY!d=YJd[W\V?
%m14NRnF$8GETGL$[R#rqn@;elg\UL./4rBL00\.cj2e[YpK/-"]Dh*iS)YsMk%roig\Bq%nLI+rYATBu-Lm`Mr\h*-rUc47q<F$u
%Ip6*'IHD!^&fueN7c$7T%'0C0L>7K"1%Jt"pAFOH+*4Ijon@XfDo<5P48io3CMnQG4?@m_4>D&/pAD6%oC^S?<PS=qh6VXA_#9>#
%B8<CAkd^4R2WD^[q;uNpl4U_$`hcEdLQ;&bGBH#rHLpF2rpJ`H)=1@R\'Fl)NC-K<mC797eCp6XpY5<fWr.6XiKP.F@Ip]_!tS^F
%6+HTdO5%hi-d1m(.M;]\`:1^/CEGe?@-@O?f;\cV+O=@_MLPfC*Pu,Gd3rJ:Zafpb^ho!6s7rIG:_NJ=me,/0Hi2K>?hsQ`^V@:(
%Y9(m/>8P:Bk]aKVXR`D2GDu=:`i!0dq[RffI+IQcrq3J`q?u*K4Wt#aQea!UbjsAfc+1%8s0MCk_u*jB3":'A+OP7G?aj@VqS)Oc
%^[!-.L:pCc`fm\Im<3E^!X!M&7$h95qXeA4'BLkprgtgr?\?%YJ+1U;`Vp+Ej#_KNriUCQ',rIhg#bNSG]W3"f!!^gmtl5WG<u7Y
%136\HEM^Bf.%&APXcFEN`O*WPK\O*6lKa5U]af8]Mt]ohb"lCbrr1jZ+oc;"+Tb\'5-Ef#%7.blj^=fahq(res4D_tl.*eo?T3E5
%K[I!:=VhD?G%9$^]f3gGh@a_X#Q?M6E,Pf"jO]$uV[tN]r<k<fiGpH,-hcc5S\3tV7(X9?H2kp#%!([_pNp#\^F?_fPeXsOU$ZA5
%>jNBehcW0hYcO=BkG1TF$&[%_f[[/ES(J#XfDc2(k,58g3eFF-266(?9`K&fnEq=/i?rR(Zon,lcAfP!M<"6S5&=d39C=I/hqEFf
%D10`1s/R0S\+oqAlJ`VX\>6ksgn-!Teb:9cVo/e,qYkqlb0^'`^'t(Vs*;BYC$M2I0YdH@"dA=!mi)Zo2P@_ZL-L\[3JN/IAr+(r
%SZhgcpMG9HJ%'l#IJtY(MRZoH7$>#e)#DU'Y;SR=D1'e/VC&C`1K3l(d/uS7Mb3_m$P-EFT@tCnl`7"GYOoR/i^f25T,#os@enc>
%[J(O-[82_!VAh`nhe_`p^A/qIhKh7)d)NPo+.k`EP%C9]\S`E%aP,7*c[PtN1L)MDf]UTHIn+D3s8GW,pTK'dWUfeDZQ+F7D;oLD
%+7jD5<mN8LQpgfGq&Z"bKApfV^A;UJX_l\Hq^^16mA&NmjRmSH60t"T^W%;K-Dfk6_28-_>1$c?]RT+m5t^SK4TChKMd7o$m-iU*
%@\>hgJ,T8aqLAKqq)u"SQ?8<C]_\_M[;:d1f=b%WIO-jqWJ!FnWrBi^<57-I5LGtT1p8mGEiE6[$R:FJoZ,c?m!1SQfD:E%:N(st
%2`SU/E<qE7DS.1.Qkt>PM>k]5s5g0N+".*H^U6l5d&'.Tnk010jn6CgFlGVpgjOSOGgVT<04)DVENFP^?S+pafBKLMXt>O'D7BI.
%H$Qob5N6kZfA-hFs1oNQI*Zk937@2lZ2En(h`&7MV1/:NR%+umrg0+C_g`a+kMQ=9_1,8Z^_A>OGT6[&1VLic)WsG"ji"h_o3snA
%49FWl#@+-UOU(h$^Km1urY4(9VM%$K:-EmbVV_5T0"q#JJ)qY^>&.he3k-kBF!stVs8H*bIAR-SVP\e,1T?'bQ"$>A+]ffj\L!Lt
%'oO#[bC43nhu=$8c'4[6`&/^JR94%J`_Z0%c?Sfq`%0qUn"\[s]MN[;EUp$,<bI"W6A]rCo3EeB`XmKgah:a18Re9[:/rVg7!SeT
%-21sgF7;=f]J?rCUYm*36S$:%3(f\ZIm>H"-MA#C,PAO!]>jFr\n!p-UBcdVFlJ+oPo63@RM].`1'9\)M:!hFT!@Z-Pq#HlSrE4"
%7PhKnC<F5._#qP@1$+g,RnScZpiLd!f%S5JJsUh3/MfutD^sj0',-u(H^aK-(>3D1`g;MCM/al.^es2mApSSoW&;d5hqM,5IO<(S
%Jbke+MqhOu%0a'VS,BOGaEq]nOf-?G-80k0"o$04K9s,Co&,DYa@2sPklg+9-;u\-+O&8EKe^pE?7.s_5ICQ-S+.'u05m&dU+C]4
%1o--ll7uR-$`V:DPn[jD(]_bkj\$Lo/%@K98ehreML5_:m=d,Ymr`B+):\K<>L8mZ1Tk*h-Oc[Dq7/?pIeU:ZU!q`hO#:>t^g(3[
%X8%JcME^"$#up`"aXi2ke"%L]8Nt1MlDN]$R@ahpQfW!_4r)hP7UZa(]mQ0-@EKtn+j9VXdUc]p"alKR`di>YIAY+Ko%#)T8?u[%
%A!Mmf]WfKV+;a#\?Im=.mkn6r?#Lfi`<'UZ=5!Rn@1LpC_BQ9N3QMS,DP6\@iD/?6q/a`(FV_\@<BRQ<Z6Rj=6)qMeYjZ,ESM0c"
%(1r6%RYW6"UL`^lfa;"#B53J6gt)]joftsOPB",U;HAP-98i_a"VCsUXtn43o(U)8Jea=m1PDpR']J69AS!bC39B1H)2MGVVCs\j
%.\*`G_K0&7>ZRk7c%U/Dk8'<<.:[(b`\(UC)ame,<XUuY-Al7G"RK$M.-,Uc+VLP(#5=QL$6'):]m"fLQ@c`G(%Tk!Cd,s+S-\$"
%#C+qF_C<Hg"+SeuT!6,JZ(jst_u@P_NLiMgc)H_0fZ?j``\oO[iMPUg:QkGcj"6D[RmnK2PTI8_]2EDck",8CTB:aMA!N1:?`Oh]
%q"<ZEO&flbBqseE^;:7g6)nqRRI^1u9>mY[OHOIRb5055a`c`E6*M0a.PJ\]'a"qJ,d.PDG+6.;2jJ8)=OU4Ss$K)p-H]%n/dW_T
%[sc"t71gZs34Uf`7g8]S52XO;j:6Ma2I)L><g>\(XG@&oIA'P:a'X]0GDtEY-:GPVV&/R8.?3A';D05@aR[64AD'BR#!]cI;$pl3
%Y.6$3@plUo8q7VQRc*[(dO?WB*Qq,k.)U/J;X3;N9pr^S%TBDJ2]BkQ^/n\X@F2,O/Bmn<7a&8hM&.N2Y6_&SYVQYtFcha=*2ohG
%eF'7$_D8^,:$lrN_OgM)r0/[3OmoUeTpJ479jn5o;rTk-FI/*n\L=rt\QtrnbG9Lio*H`S7!!DaMEhRj\I0>^lPr>o5Ze7G"@\rp
%RF'#/?5?V>Rl[A)<Y8iI]js:BUTbfNm!>;cL=f39iH(^Q76A,?=%)M2&JI#mJi`3;9#N@LUrFa>!!A1+V)>$*<l6pT<%U7"gB\2_
%<lsG4_F&uQ&2PSA;6oDtf^t(8N(P1efl&TW)SiW\WER7:Lr*2>/Ejs"C)]bR?_D5NYu*tD'25S!,4^&WEm?GZ-"0OE9SZJ:1J<Zq
%R904aM5qnJ>qY3@n@0W,DPeV0]F37kq(oCD=:)2c7*UTA'+I\gS?[9![7r%eC*+'cm%4L%KJN&$pPS=%&rTj`@WR>HWQJ;,T]FX/
%<,AN>O+sb(A9t8sXsAYiA<8>HBom0pPs%*\b99M-rZCM[[:ifEd3'E1AMo1**3BA&";0h$0OteG9dM?u',e9`kH(iQkL+@fbHf1s
%BtQ?4*ltKY29AaKp^.bJ/Q&s$fN8\%@_<IY@o5s(fK(iiA\\l"_O*+!:]spg04EmtNLLPlPo+'A<ZqoUZ$]cXl3]?qSe\o-J>9s!
%d]]%.9S577$Lq,)eed19Wi'<,Wh9,:#od2BRG>O^Fld78;*6TBR%g=g`CcBB-EKjn*KDeTEi#-01*7O[*.mNueI$8;7.jtpA:KI`
%&a)H'FJL)F4'YYqp'm<5Y)3[3R<ihH(1g77;;c]?Qb`-AfSEY."F!S3P""LZH4ELfS7G=C$bKJ^?eInm]Vt"\Pnb32h$g`C251;4
%CeMhk9(e,pm'0\+Cmlbm+H&l,KKJ[O?8dUU3Vcq=EEWAe)Ht?G&b7ZU(:n7t9*+<4$(!O?&tM=iLmVF,h,kX].,1gA?'m:RJGGOK
%/!DP[,BO2.$-Kk]n5_:@N(aU`PPh\D\cOBQCbEbY6Pg>?KLt90`C=onKubO.(ukG9<L"W/lk\r/E&n,WVZI\#!`g5@6k:q_)Y2%m
%[[>cY:A7af__I7&qp^Id;i_ugPFuobIh8ml(:*I?2dmD-fpn!aN8c@76u)E$!\@"L+"USL"<YE-)H-og`?#eLfYdD*`U6RBY)il?
%PW`J#]-8YCH]VfI16=?(7&)VVi]4W&3dfoSi6SS$d-`=1JjkgA_58oo.j,T$MHh_AEMPLt!dhl%[]eeG6]f:UaI1A-D'OcQ=1Z6g
%B=LC?]0e3/ZkH@FY*]JFnM[sAPJ7i)Vs&)$S[]pjgf4-gF(!@P(HM:Xl9d*0,:X/o-MmmBJO&$)`P6EJ=C]dte0u+V,%]EtY"n6A
%?q*3&?(6(U((ojGD1_<I?r$o=s3Wb>O$JjZP;3Am$bU73';J4?dkuHsG[;cSQ_?5$jKK2bWYGBKd$4Z42>N4Fe6t-)@51GLfcH'N
%9+CF\A,'-e_Z)TI0H&W!E#,neJfP>Zf8(K<j8s*G+qW8g/L,e$4bqi<P$>;.L<U/*-;"hb!/gQ!_T9#4V'iRJ'!Zp"c1^*OVjB:;
%<1jr:PJVLIf7k7/_djT:nti,b=Ge!>#&iCU@.4$,MqbE*![]Gk+nf:,WaJ-;N+mOa"VK^,W!NZS4JRZ@/u>&Z1a^.E'VA&@-SH:6
%!Q5<YZ05a-08YR:l/,'qLGF6C-S>l&W_j1>(Y_nBUjGL-'^;?fk`#`6E)#d1N/*4.&B34F?%BbmUmR.Y:B74J5J/jQ7*\'j:,F7g
%,nD8GRj;S!;]p4dpPK_$YD'.peLpGI-":kk3`;WjA\8I,eeZe)'ctYHB-@'h[:+;&H#me[a>Qr7/@&JK%#f'uAI)\*Da4rYbt'_O
%o3mMfc5]BL;MKN#_l4c%fuYc0Hcc"j?Jn]s9E7NuW8ne4CpZfF24M2:U0r*pg^Z#F81is0K%5btT,pq"\5C5plXkjd<lF9'/=@mo
%L]i\>M"=G0VSk,+J>Wq5Z\8Ts.O$@ZOFh80Z-**P!oi6:nobJr,1c!%'SABd"gS[R/qK+;_irB'kS94AHD0[+nRSL^l4,Trp:G]=
%.O9j0!s;n4gH2;h$9&#@.C!DPO<@T9U/V@T,ZHETT.kqcG-G>YC#Sf@<(Vt/8OA<Aq=q`4:2WPF>pCM%*GPR<-2>8";aD&$b2@]6
%G@W"Rm(/@u2q<=FC'dLL4mAsk8`8)$LG'*cK?"i$M8EC5OZ$@X7WUoG-u=5F)MhAO3C42-^VV'-r2,'/@D>kiF]++L'Kur7L<^qL
%2*k$>-oEo%3rP0@#*q4B:sAhQV:2DdA5RrI(?1ua;]r*s1I=s<-K,JT`u([_5R+s)0YL/>QkHR>J4a9%n0d'Cr/_Jl:L_a;a/'t\
%#eW.`JI4]5$9g@Eg(r@[p/3%hYQ5qh./42Z*d\AtQuJD9?g]E7VP+Mg8BP"i.36P*&BA3],Xf[>LIN"2GDMoD,aK0t"H4@FP.J]P
%BAqA*o&sDJdU:SgLTrhY(IdUuSN.AnB*T\<&58:]j?Rbdd]+c!B)EJ_QjrW?KNegp/ffH.apJc54jZJ4*0)cDhC+hL#m[[Q<YTqF
%Qq5DpQlI<oi3)>_eW?\b`8q1M'o%uO+X?Io@SDR]5UnNY+pYoeNYsM'*A[k-CbiFD8R.E:kVcZ_@!KQ[.`e<7,_dKrKJ7EB\?:B!
%@C_=.L>=AlYUEMqn#dJX@MeS;8A`6*e.ArjcnPn9G7CK1`8eDK+tXu.N.n<pE"f3HK%L/\07'O4>?s*dL3Q/(T,A?hQkkbpMkW#S
%+kqd!6)>ma.GTR$+!NT#X!6=GDNT=%33L-+$k16A!GeTh23//r6M,Wd.o8&"<D]a6c2oHjBVaj\P!U1l.]2.B)e`7=b$l8L$G1@t
%M40Xi_O&'eWA"Gd,kZ2ahCE)$`'^JB+W0a)Ta/%GUs`Kn.5>rG;?FTApMqo$;(s1&p"ig$IVnQun/2M0qP5B6TjbH4SRUBDo]&>E
%7D5p8.)1"Dnd(!6poo2:>&%u)70T04"NA4'%F+S)?I'GgW59j7itJ$F9B6kAO[7D(A>*('8+1SlDAk/"2H:=n$6Mc\rf^J#8QQn2
%;8rhE+=fk?9t#pm25b4:6UP$.6AK;TL/cJ="K8/1F=C,D1;tBQTmOJbEE48=OUqa0$#UUM-"3.ld9'j$QR7S8?/C*>E^<sA,"ish
%We.K/1F$t2D(JL#S<o07<bC,j"Kbd?%"8sS7p[E8%K`_V#@]Y`?R;'A9NI!%-4Cr<4[=/fAl-;r6:l:,8P.!WJqTOk;H3o.p^D2Q
%BNGGV2.=M0btA5d@r9'[Od"BJa%mcbJ*+ef7WVS-e3d:l@j(WI@JUZ.,E9m$X:c^h;>,@[OC4f>KdASa6E7<qW3T_<%#S5H#ocI;
%:M?7V'jF)!4b3_X,&3e,;+ju(,H*3;I^fe`6u&tS(1bT342a^QTue-_&`dH[TN2:(c+mtD;s9L2K;O(8R=rQ,Pa]As&U=SaUM3P,
%1)^ZMa7kF>J9t(;LFbmWU*s#?hU-UG1-XI5GQbJ=0ncX#/EAi,.dS+YJqcoHZ4Nu"JO'jpko&iKYZGD17)YnFVH=^TTuTfhTL$f,
%G'(hs7="r22KCsi0oQT%bX'l=dR9;"AYelX7/eEP2Bj_\VeSbW)a=g#2:W;,!tP\GMrI%8_(gn32:L0=@gihg-Ys]@@Dl\lqD_<>
%c6j>WJT,gghW2^BB43#0*[n%QkuJC#Yc(!U_1gikO,-:oXU,T"KUX16!fiYl&kISV.PcRLoG^B-%nu["e:H8cZ8Tt+[<E(oMiqo3
%;kc&d!ft!bGp+RPd?9Wfe@>T"_F#6u+gl>ITXH`mW3f<FMfK_\2#%gucVY'16C5[]_B5mXRtd&X7Ui-h"ffb7*g!!W-RZfGMOZ?d
%*bJ2Yj6AI/<n67sC;hX:P+!8lX"97X#Dsco]Q?3@gkLqiN%iW&5YBC38`e\/?Ro`C6akO2[&>G&&H'qP(X\;A($oJgPSEo+_B@hg
%Q/U;]YUZ:UkuLW5k+kk9<1H-,WF7*=IKeJV7+$OTD:</-#+3I>8Et>;#oPf?*_o)f:Son_!b"!V[3nDN0&44;K+8?E$=mld!HdV>
%X9^sP=F/H;3)sM&G\]Ya8l]V_**n1L$VJQtCr%38$tb#8*fKGgqLj)D]K'Lk"+j*!FA9n(=:Ei#V:)T&G)^Ym9]&[29#3kmiQ$fZ
%0)N8DeBB1V..XZ*)`%YBK?1j2Qg&VO>nH2g35l4J.;M]2md9j9"E>R9(oE?`U6[,T0V.QuXg7d8]Rrd:6uuP?d:I[*8(@7qj409J
%0BuiibB15/=,ogm@D!(.+\8n0\ubgeY*1-VFjoZTpiPA%<`2[^W`_\lTF)3?V1KjV&J!fbH\h/V;UpKp8183c)q:hDmu_@m\$Fis
%qLT.RZUIURi]q'@a++j:[t?)r!c\C,DnH@D`0Q0_L"i(o`PrsUC*m+_LS0V&i]ml7U!+#g]8jkX!UUd?YU>b!P>[TCRtb:e:`WeC
%dE+9Q;9K#/X7d0.aAclI_]A0j2EZoJU=PuoXao_6Nkl!46.l[TCgaLR?#G]YJikHUc3+d8`<9<rgD]))!mmM)Nds]pmjn*8:R[dV
%[GoL@+6;BI7^nc]CG:i9@RbbO:rM=!nVsgX1P0=+TdJt2NNBpfi=k/d9qs=39Nlh#8<D%%Uk.n!9450SP6\KWY>5j(:9tZNUA(U[
%*OJa3BcP@h!.-J/c\n'Lm(<g*P^.e(&us"_\J'E\#&f>t:dL*39pl&f"*_Lj]9=NcGTK7#h"#uALVTiP;LC/:"2BVJPHLag$X,Pn
%)/S`F3Fq`3;J61=n&aS0:/Ygm.BJW:4#>m3Uh2=5MGbZk]Lhdt/rSE"%'_&Fj@P2*LQ]"]K+H1^ja!U:HQF[UpcN?tq-YL'0<ASm
%rE?H4=eeTIT?jS-Sa]s)=HAcK"LZ:QeCmbk6ZX8lK*58<'F'Ua&\[.Y#M'sk^^-LdH!uc8\q@C#[L.ggVFV=tpR9`$M4Ib7Lj1+i
%OO_&J<BYH/gp*B'fr)tqn?g$Ij:-eWN4p)&n]!2S;V%&sP*Wa92$QZ<\=Y$2:o_eKX<8G-*YB?9YV9fT,E+h(Y<e"/U:0P65]KQb
%i'<Nt4A]I%j"%>h-!3!*G+<B:c9.]K>-[3C+G]9H7<c^68t,B]`%u-CTgObVQ)K_gMhjAa'lb^6LNVB,m/nA19peAfE]!jaOg;<&
%"ci_9UtLJ2F"\`hJbk%60t1cQ&kD_E9O2p&2F9]pm=N/6'2p$!'G-C+O@G'$aNC=nP2*)J"K7`V"AhMpl@jeqb5,m5/t$_C?mI6U
%,W,h=f-)o-&'7c]1)eh;V/e7eK+QKP%%RJL*HfcYYV<Di`sIkGV!bV`JeSuUK#6Lp:`.;?NhmN';7$bfBb4jYk^,=U=sEEu:nu3Q
%)HKle$+qtIR.S*,3)V_[73<U[\s!39HWh(1Bt,h$MB!?6eLm'SO<#JkEC[ME'iK95.M]d=]F>`?/9/kcfS(+FA1FGqe5Wd/&Fa89
%\_\[!D1sW*NI!o**j-or1$-XSL-t?D7uAjZiXjE>-"D!k,?`g6/iZJd!0T#FpAucIGdLq.0pet.&;;V8Z'oA0_QmoP&2Qs(BHkU.
%JPqC]ZM4I;N%"=;a_m("77;N-W8qc6R!^0,.F"='1Ed0ooe`6RKr1"E.\LNk)<7&&=h=e9#F&*u4JU#o#rp"(NBLb']dbU8%8.r4
%eMONXCaSb,k_3V#@#;_e@mg_[iG#lj6ZgF;DAs0d%SB*mOqbT((r"\l(68Z^.`sR"UZ!cErWZJoN%;^]do'_@Nn!%%cM@eX+WhS%
%C,!j[WoPZBK1q(bnS,980i[9^&mm%'-`qkc*4sQA6,jBY(pSKtIq>,[M\4O%7LKe0.i.u`K0o\fQ5+FBD3d5f+:;K*0GlJj9Ro#H
%oaj)lTn=m7eF8>-RK!AOP7J!6(6L`h=XgG_"f83cKTp!>S].t7Fe"'2aJe>[F=1>=h:_"G?e*e&_cd@UTD[LhRib"'NO*d^r,^lV
%q[K'C4s\43.-Y#Q%q+9rVSjEa1o:=?CWmsfA>-CmUIrn#>[QhC0n0OC]2UB"A)@Uq-W&sB^Tqc3$1P/#>Y!;J?uL14[YPbhPNa3a
%R$pE_s7C#adaL+i%*6.QeiU0j$0go1?!&5B)CZtJcigtbdif4J:n=*&qkA[31qc^J2M@MM@VBJKN&Dl<*?!'flnT]M7meOG`do^t
%/7maP4+uQ.1hnJOX"+c/m>BKbMZq9V)\gkF`rB0BMPQ6aBi@]gYW*%g:CXEL6'LLO,='tuG;(FIlA&cYA$RU@^,[e==WHPs(pF-=
%Tl<[pM#<sAaG2"d/-(@!)XJl#Zf!3eLu9^ZND"LGOVr1u\`96d(qHSJ0,bU[2Bibq/*[IbI2U0?ME2amEE5e*7jd"02LV.Mc$0'.
%r9Sn?X><0m3`jmY6j2?R%,lpV"Z<3ND<R$Tb>b/ZJR=H,A>#TnF_(+&:h`_cUa!S;LKlBi"+:oY]1-XZq+5-M&u;6K90o^lC6)6[
%mkeR.M@+,!0hUs)VIlf-j)T2Uh.Y`2?4hK/2.3sFL(8!X,_rH$'%a'A*(YKKI5N=-l9LlO,?r*!+TW]0!%D/i[]"."2-Q&=8sH/J
%,7`O+^&`"0Zgn2F'3ndqE=:%Ia<F.GM;cacbmW#.[18?:_Hoe;'<II[/9;!:;FLU$(N^SS/;b%=nQqGlW)s'Xe&$n!&r$eQrde#c
%oH:+_kDFhfFoBdf,Sj0B9et$/3(cIWo!8VZGL&<Te9)P/RNRkB3N7gUY#q!E]G==Zj\oOk>nfc9N]jUGL5bH"=9C'"X2C$!pWSSX
%MKBJ%!JRGo#[#kFG[l5k%qT#Cp+3Y7AT:?>:sjtH,XgG''-;k<U>>6CP^0o^&RO8j7@CXl7>D3[L6CJl_!0Y(8ronS5FuHh2CZf0
%[A8]Qer?KD49E["8@$s3Ti<MHU'cQ=[g]'I%hj(`Q'<l1`i9]lISj%/QrHS&-d>$>4V:l94tAg?,ull<?m)OKXe_u6fchl3iBg[X
%,mF!rJJ;T4=[peC'pJtda<0A<FcVn"Kpbr'.N(dk>4MrM-\PX#`G"L5Kd9@fm.!?Z_(eu,ne@3Dm49Xu6:#s3-\9rR5-,kr(MR1]
%)loD\p_gZ?KAAU1-Ml!9M+ZLn"A5`IHfFJij@2r:R4a]i]Z;F1Lgc[$*WBlU**8t*_Sgs`pB37A@mfit*-io/SL-r7=?V]D-sUq/
%=o':A>s%RNqV[hg1(>3Y["4@VIN2/q%O-U(><6V%dY/1TUa:%*=$j.V*mqUlCI!ie:_?8p,pdSCd[ZeiMC!Hs9Wg-UfIXR+bqmiU
%b4d<60j$r/Ln[Ee/2>fnaZUN6_\1Qa+r^cT4H^VbHB9>qN1J^=Iq8q&^<XTAoFeLIL>CM=S4U):GdKNJUoRGrkX1A<&nGuTF!Q>.
%`pQ^,8o9C+UWrs^PLY?ESAGm]7"F3i1K@DU:_M;<NXh0?27()s>&p$2HjJ%EQ;E./gJF2pIZO^jY$9<%3@%b=ei$Q`pmFlC:4e0k
%H"^X1Q8M)K&i7HWPKW/f7<G$03Yo[\e4ZRp.!kTTbL1^[dZ`D[&l9/C"Y$-j>>+/;TnARcI<JYUWa?)_M\ZC.,U+6od5W:?N)>2V
%rD8:tN2W"iaS]&l]5TMc]Vm_E.8Z9\I%h6`b!aGL4@1Hd!4\'a;YZM.jjJe`e0!]L?9]KKR9'!#QF%DJiBl$K=d>FOCs>4b'hUA\
%o?`n#$lO2]#R#7^Q@<I5]Ku.QUh8<]TY_^TdBJF:;'<`o%bXBpj96P8_U/X>,N]j=%X8TAK%V/AHOWb;TP?#^LkVrm,U-b"P1XDI
%8I_LATsH$j.&ipGS.E!,7T+q!&HG3@3X[s%"=#;dDUi!b"K*8bTX)2bW(<M%(;'9kKU=SeMukM$ALOL2aZ`c&b:_e.bZu(m=UgHL
%6qC4WUO*R`*iP&7<c-M4ai7Sn-5iU[no/Nt/PU!1pKDNg,R!a*8oAlY[G3mCFdQd%F9G1KNCZ*nc;%cDBQ,-#H,eu3",tN>N`\k$
%/g72)6OUlmY5EUcj$g@!c`,e)4UIaHM6:8e7D:2-+f@-?DF`>-_WYeM;,C8KLS;Z#ZD.YQ@=q$9R"^5@XQ$?VK9CqB!9dE8W4Ifh
%<G+"H4VUSoJ/RW4M$sED$\t$=\Fc>'8SEkE.-[Kp-Bs'RA1`>f6VdZejm.Dh#U$d%,`$SW=0V$GY7Z*qSjG'Gb=M!1ohaVGr.C'h
%fVXV<MlD\FU7&ti=H%js<<?6@8PuK@Mh<362KpB_ck2],ikSN'*IL0;S1o8"#oL'g6-r;I,o/CRG72!mRl>ftW@?PY6M6/17b#cr
%T)lJ)(0=#Ip7Rq.=GFO*Y#XX?_D.d!J^--mZOlD_a=<m5\SK#?N$hgLb$,dU_@%7\#DO&#G0co`+t>*$mY-T<3-3T*@_d+TRk1#K
%iUb,%U69&"(6U0=b@jd+c<cE">\#`90qok4&pZ>M:Q%;iH]^-ME<H?o4sK&hXT:%Y^g2*rl<,tKmhn0<Ko4G_Y]40+cSJ.nM.dd<
%fOEW6aGQbe,]`_1njX.6;Pmhf'1lNR$Wn.o\/*/81\-U`30sPg7W(@<OniNao$Cp-BXUjS^E[\D[fSF<$jK_g_%c*oTcAg$pD1A,
%U8kKKJdmH#9t*Hr&LCIcPHYm-T-qJUTbBhB$;CkNO=/l(XSug@%+OEBK,q$Q!RpI_;3LBQ=JQS!Q":>'X%Yfr@^E"Ci+V&iG!NhM
%($AmD*jj4G_#j![[b*:F&McW&NR^j=VCli5ctLh%8nP9PQ,S`G9=AKp08L;'+U2:V@8*"H418=7V^W,@HoIjRB[*;X!%ooLY-@'2
%5g%=#YRS,)1q:^LFj.5_!b1PbR3i-fM<P[88`CRV-2!q]_PdNKCD>#W&"Ee[:aCK/lYhm#bcGgU[,rKtHQ;Iu9`Mm@ltEB7:`;+i
%.*A5Jg7^!0HLPjp_TMu14'5$e67aS&cqVK+B22=kFLGAGHAU_l$X.Prg]:%.4\@4JJJpP!A]n11oGD;8Ma8DlJe5ID`53,RM@]"[
%kWo.XNN=2d(Vs"q69Jq33]';KQJ1"$")8`p)h^qY8qQYn`X%@U*=Q>4h<E-O1QOqdhpa=4XU+W%d4fO>:af/'el,`hTg=M81)iDZ
%[=3]'BhE6@+[L(UZSEeLV!S75.Iu'.9O8_tIA/TsET,F"ZHtGnR\6o__I&B6/6No_R^4gaW*6uu(bA9HlTeo-MU^8kDblLD+<Y6l
%6uCub`Gdq1c(im4NJfO^N$L3Ylq=TkF>FP5K0]!MGbRXF$[]1\1rLPi`l<aH4YH;XFuFGZ_4`lkT9_4XH<h[)ZP0#APp\1<E"7*r
%Dkr7%)Z@5WBRln,0PEU[,-:+JA@')#!';NRM'/X4[DV>Hnoee6@MLm*Q4.N/4!5M(>.n&hP>Hn1NG.<SC"3Fnb`@eVYk9#-N5GdN
%Kn4soY'*Q@l\f'f2R`s%A=3F>I5?`^G)E5&N@a[/4]5h<O=Ab4AK[>U!,>(+-J/r`A<b.Q&O^:9X]ch\bpt$(_OOS&46h@;bSE)e
%#5HKBVJ5N&\?(6R?7=2#*$*1b]%XUoOX.h#Jc@B%(1>5WAtAT,Jf66(XYUK<$6-03.tO[I<\C)b&a:6bNB,&Y+UI7%r"Xu2(9;O#
%RKr;(89jd#H:CPT42!&na^in%TH8[?AKZhidp!J)DsW$(WLF/m#c;E@4eniaaC97FbCT9qUhK':V,4VS*d"Kf'H85@Tg)^P.;J6D
%`@\aS":M6#eSGM:k]VNr,8R0-9/ZJYn0K8p4bs\L=N`#mWDFa=)BpAu%!mkTY=sEhopVZ,kg4FfL106T``J:qfe):Y3Gd_PGsi65
%(V-=R7%;M+ng1FJg_s:'`IJgG3^b48Nf"/Jo^Gu0%`3pr!SCAQGL]k"B<i`!%)In`&e(HXHOXi0lKX3gRUJS)WaXXC[QpQ'c3':=
%)?%R?5V675eRgUA>q\;#jQ`___Fu@_eBtP=MIM;0A<8Q-nJARWK2t*j%F,nVOst41$;)*_k9>K>E`*"/Efb5k6)h`bQ0hft*DIM\
%5i4UjBVg!JMVD=?+DO7\/n@q<6CQBIG&66V60d%K(S")C-0cI8`.U$H"Bt5Lju/*<r6VA]$EN&aSnl8$1$WN<I"]/G+Wto<-kkp:
%39Z5*/i)[Z5oca.Z.[ln$5LYq[;[lW&H[n3k'k\PQVbqb't*HriFEb,3<s#`&6)65e!'Ke0ol[b$N2i=<EuIN7B4[AM*MM`6WGV9
%9LrX[/CQ+@D[f-N9]<r>(_Ymo@i.nDA>b<bCZ-^PN^6n+,"o'Zd>(1#A1\3CD&-_-eJER?K0-4VF4$T3&3p4e"*,YE;hh+EXOQ[_
%VZ8R`:[A&t+t7b`,2tSX3,cKk_,;)+5u;?HbU?\KdV>ikJ<cU$29&86U^s6'[SA80bn[!#CK<sY8Ce@sjFXdm^W9pfWd_2R'DoEV
%E=!:gaUktq3Er>"67NAoA'r7@\,^Pe"G*q+Dir#9Y-SlXnppt\$`NAb;9`c%L'2YDeh.Aj:9*CpC/6(Se$:=o<GM\deZ.;i&<\9<
%UW\N<L-U>lTIe.N@Sn1CD)Dr"Ei'M^ef$K$EJ):!9].4o;W:6.GK$Wb2/'KAHCRg&6A7-HSh]k^;.'oZ9ruK-R7?.I6YELb;ttH7
%HYO/%lqlD=AI?VF4*Ug/BGjL\]pkNQ-(l$=-(r8P;,,u'd]J3.fmsJ2*Lfq&_h.%'fpDkM=pM^3Tf>,boa%jR86%rJ<pLDi64kN$
%;9a]^-5*@>KVZ%;:f.Ql'!Vj1$HR=N`993P^1[LLWG/"LZCiHXYuoRppSMJ^F3Po@Of_I1W9E#;;R1XTBJsIKaXRL#+5Q6_)d,J8
%oc]1W1(i?4N@$"+@(@\E(eI$6>[S_6Ag.#ENLPPsddXd-\l#3X.Q2s7FsHaOWK2ue#H>!=&E;7aC-\.2(.^aZ3@d.O0YGnqL+q0t
%*QutX1NA+%Fko_mq5"S=F\IIMlA^EUdF9S<WUL*.\>l@#3BiNA`_4BWAlZMMf/H._5U.dg,et>g3lrj/!h$7'`8VS,XHa>EBHrt=
%89Y5BLD"F+R\MK3"0W7S+VCrr[D==eM5loj!"@.6::5h=,K.6iKRjmjr*WTBa9D(DoFYKS,N<(D_6i4N>dbEXJ/mQ*9o``g.*P*q
%p'3L%=6:#smH+pEg[8L4mB=XPEcLLE7nmnF6;Lu,'Fh@""u`PI&.ZfAKoO6H/*O;uZ-]Lr#K[E?.ttb_=p'c\UTUmLC.#,?j/>eS
%$9nX=,'l*p&G[3S)c:Id`\nJ^I#$>0l%fG6VJDTG$FD>2M2(k_+SKqZr321];%:FMZPa`P7R7Rm3?%$#.)'+`,*_D.0iOcHPPh5&
%DbAd"m1=eZkp(:dKr@HD2)BQAl+"RA,f$-(*)t,4EO:rIJ'aCEV9%!klu,1U/LRrd9iiM7lVem.a'H<&MUp'?95<)[D-$/*ThU@E
%7plCj/;W8p"Au.pTNN06m\gJY_EJNoWA1N:kr<Dh%/sm:$r+[('g*LPl^Ej;,.tiB$FpLN;0!_gqRJ(L6:?^_5R1,Zj%\P]T^'=Y
%$$fAA%bMH!"(N;"GjK\Y*$B",R1W8RU'+FO'i6G&'FqooLD(r.RHgRP)e(^=$kOAo"RpOf$UMqhdtH"e6?`DX3jZd7+V6.5+F5r$
%Jj_u&"cBgoU@,l+KOk:#<k?+3(DD/bQmtJ<^ip?R1=8c/cGfP+e77$J1T)b$Z.Ph>7a[*j_2at%`?6C_!t8>`"='Ydmt)+WXuo$E
%ZU>a3%6^CDS>Gq0HO*G:(,Kc!b(bh,Ne9Ng6GUtm-*ZDBmL;7l=\DCOKATOX'cmJLS.e]&%o`b.#=uB9&V$%k6Veui&^al%MhTL`
%N\s6fM1DT98E.L@4s2-aY9$^rpAcE76TVDpo*#I/5r6tu.\nkS(L2(sPS&WSUhEV4,c7jKXg2N+jXJDi2]W,2'NqCW[IY&4FVra!
%HZgkS`/KSr$a>?JdM?<dFEO/iiX:_u(`,j4BGi%]AE>$-`$8oFc-e$-#Q>5qMLaC=!<NEVP*$"_&mXESb$jI,0`n@49fM2L8;%I@
%#RQkXd999iC,FSDh7+5N&K$Hi`F$H`W9C"5$HjZ7%n$CqU&L(GQYLB9e_3;TUiIb9><s@R3OH1)Fl"\56bn75B)i!5FCV(R0,n4N
%N+GXWZbY0sb:<&rK[U@b"V?ColQaHR+IZI1'M"-t$673#:TNY'Q,QXs@a7Pcc:ADaMcL:oJQ."8T'3<@&Ns*t]0Jsj">)ksJpJ"r
%pLkFjpj`>u]Ja52f^.4I>t?L^P&_HpBQ.4tJp-I&.S>S"ZUWX9a&N1Q49A[eqNQE*5co*%gB9knel8'M[FldW=&aO8]]$Ot(-m(A
%0XL)lor+HSc<>'TWi(+MWjNXF:S>9Q0!Ut/CSSH]ct$7eU8B;G>Y?N`ng6]a_L.0)D/LmL[4]YF>#0Zg&;(E(rXuOTW;s2@epA:]
%rX]d'_nmN?Ja1a&1MEE*X8oXr+.N0D'cJ1=)qlkQnE.T"6<$iZgd\ZD_OsRn2lY5=YReuZ7Ze'i+&%0o3%JadB#bC,kZ)d<B4)>a
%_'To9Z3(GPed\!K-^'7XE$)+n(_D6p$4827JoN>E-Zb]5E'j^VW9UkP/./R'"49F6-n(1"eK`PF,r`aK!jEeVUf#A_Gjrs^q\jM3
%PZO\s,tULV70/+BfAm%7,WtNag,<'N'r"pt\5t1)J/n<`[IKY5oo9/gU\TUIb;-)R8@i53%u)o$+[;-P)Og`2FY__'!UXIK'Kk]6
%U):ju6uG>FJXT4kWrcT6)deHb"Y<kEeX0B:oEnSq7Ib\-+EJ6k==HQFZ+`4s2/1)ToR4l.Dpp%0`Uf+eh0N-plYZ]%MKKWoEGDo>
%4#5_@EGM6R,%u]M?;#Qr<YKC+\&^0I_MD8V5sUD0c2_mpS]Eo74`?\gjG",N#p:""+9aHBE1@]Z=eNnOfL\7.J;YOh`1q9n6`k8O
%=j[fn1/TdACaHYhH%njTV^j)X3<F7U`F9E@[&ak&%[cC=2=lC,Ea;6JEhEOn&JOrP(;&,]i<(@B$R*Im]<chceMp3BOu,if4^:="
%J-pXW,h?jr6j&=;;ZrotLm[cYW1&6s6t.>TQt?JEB(l_=NZ+ob@D:?&0LVur?dSMR_"%Na'fk_>M+ahOf>8L3Pb%Dh>"sS$<O-o\
%R2IB6>#<NGeAU3=V8bX)quepq!f;R9:9fi+pX/r*:`g,GN%O2%2d9=<eF)[[<$/4-p#Zo!/h+%M1MF*F5GeOr/Mb.JoqSi>*5I,!
%gD8dDU:(ln@4)79o`?@R7s%2HA>D[HUm7iJ>$-g&.Q'&Skijq>0P$@JCPihQX-rd71>Y8q))a('9I-!Q<dmNn*sXLij<8!hT]XJ!
%9h-\>?)0s]Qb,+A!'/"A+ir;l;s9GOU!hTFXhcM1R&+7taRDDr>F5`h:OHSM'f!.RdJErb\2XR^)glMl2PYBp*02MR!5sEr7"_G&
%'oHYO.n9YR^,,qT8=%g.[1Z\s#T:TP"fB""E"""!gMh)ir)$.^(7l?TXQ#"Ca%8FFkbrBPrtZ(?!g#+PCjRAZZ(AA%m>RKUW-9=@
%E2f4If$LKt6G7mf9nb&TlP+nQ]#%hDJPf-S</6%Q\mho5n:;1SKqSsQUt'W>OX4ZDdDmE+0V_t1DZC"fK3*WAWG!2(@o.(ccu))h
%"/CZHik^Vi>+i,i&C%>WBn:4fGVh)r5pI7.%eCQmSj'r=3m56i0cZ\+oZ.=UfJlsNELMMgg<t5F$4+O1cSjFU4%u+A/a5MJNJ$GV
%SWWT4"5$9nRN%1pfF]XMq-7'F#N@.kk?FWT8tkK##-smb6XlM\JQgUTmp=>L:_eLm4WmtN3_'ps%5nm"p):"*-qu9#"*)NL!f/M7
%.n-n*\o#E#`T4=(Y43bV5eRcWDa>?4$*RpiWX"q7K:!CjWG0NrKHZ6m#QX$q&O:(8*aM0-\?$/?WQ`DF)XY0OngB0EZQQWI)PIDT
%R7#AD@hR>4DQi9\WXd\85t%X7'VUfg!s!Pph%9fB#WT=X$muH2lCfLiOlA]-'50ZTeh[-2Q&;LE8?.Y7)/cP`5?PtJ2F&607G<A]
%A=2?L0VhgNC&M3?rD]ka.0.ZLmNbbGie]ZV?lZ"RU^A&15IMG-*3%K(pNkE-$W&q^8W,KJ#/._6MD/83:Ls,F5i"pQ^)/#%7LF`s
%YiVSR2'Gj/VFNom50Y>4-6s9uKjb1c%[uWbF<YrTJbA@QjMR+Ip-bJtC`.iHL+__YJgEf,JiF&)Tu!lCN\BTS64#tjL:j_k`LmTi
%>=nGg;UHR[/hm(Pl%35hUnH42`f&NRc"%khGcjkY)L#ObF2<")+*,+eEe6jjX!E5%QcSiUU,-ouJ2l.;k^_)Y_A<TF&/CHO5c0Y,
%4=l+k6Hd3Lpo%A1(r1Eol.5ruKgN2_2?A5,6CCb_3/O#@LrA%;7=5Z#Q:f)1Qtmq04R/"kO<+E%TeI)_&d@rq&3,Y^;d]g@VBd=f
%)"\@`l5ANki]s4P3Lt,!Qu9]iC!!S2D+Lq*JBJVd&F-JJE/ikmd1M+f$!f:,K`ko=C/uIce4`5_/f)u4g5cM'MnmV,>Dd&P#14U+
%`?cL]9kjA'F,[(4=A)fY!30YhBd+]mc%b%@piP@#O/`Y9aBR^3TF1lXL#GhRf:e>ARi1J;mLWKiD\/Mq&.<e3]:5(#=@FX>m(/*S
%P=FE2#L<tsbEJTd!Djf\5hklE,S7ni`=kB0K,*&nh`<79'`q.$)^$$63'r`VGok7*1oq?g=aa)G65*b<MJ>e;*Za5!T\m$mC2<ts
%&@]5MBq-+gOgoAsO_XST`2[N*&B#3p/!.Ze;M%W0ck$ZI[2KlcjiKlU\Ko6@D&htM!cURk.tG]eXN^6OhlHTWDK`?E>bM+WemB+9
%"CcTg:)Q3C=B,gLkZjg+_=pfe1+'oe%@f`Fke)HNB&pG#os5]eLg,i>GM<2rCM`?MpZpmC.0m'e#I"[CYRUoB%L93J#I"[CYRUoB
%%L93J#I"^<a20n$.F2fSB2:<u#-\H(9(`PgR,N)$&P(l:9@ed];$b"@%q[ad.S'cIiEdL`_.HE-og<WW69RO_o@U=lpjt:']2$rL
%Xc\A[TLCctGm_MtPQJ<-(+AL^5\R)8>Z7u9FbSR<FqnU;,]R<E)_OOP!!+T`]WqVu%sWY]WNnMoPn]8I5^[-VbDhT'F:F"D!]8u,
%`Qi^k%6hPEn^6[pX^9Cu6&Kua;b!]D%(A9pGhB'T\nh)9Ko:psRmMg)LY.n>J-51CXU-$82b:r@jD8r-VKI'+XQi"(JoJR?74B-Q
%@>A`894:+N'0B9`kt+8l,esH7W7[8jZsM3NfK<Y6rIUCbE]fQ[)G:Kr$\2n$q\'R?GPZ\iX-bIKM$b*:!8n+r"quVt"G7>+*!k@5
%-::%=#hAII('c,_C?$`h3&-62/l,;4[.s3FKl2qbD)pnOWRg'egb*D`+KdJ,O7<6i3YCqjlSfrb^8<p&Y)!LK^]SnJ.S/W9JR6If
%>obtY&IRKf^b'.S0;:9''EP0_*$e=DJLEf<d#m?bn;@jpRMP6;m1r.`-d68$'GL3[/gR%JmWI>u`^-o?gD8,_3]g1oenkd-S!Vf;
%f"H-+2AFO>fU.FWTWLBlXib)ZY'07)=N%5egIs#>FQ=ePlkmFtU$J<$CXT!HQrm5]"eZ7qADtD$W"1k#VI](nbmGX+o^F%t>T;$X
%dXtuT3Do"a'=n/U8049fpD"qtPcj6b"E!:UnjP5F"U"&6HQHBsMk.OKkY[$3S2KBcHuQ9&*`;f7B[sBq&`[@m-F3W*f';m8N\rC>
%:on4B"'3$kJ2RBek".6hBLiZC7IO*^DRRWpi2STjU=3Uq.VgP7i^WUu\$,/P^2f5T9`KT*!ek9P52fl='C-*uF^')i'Z!$1?bg_J
%V(g4Q6kM(5Amg"/f*l?H_41ACcjIaj'r<B.7;",'N`bq9#PIIGa?`dQ(U=S;iA0H9h!mpN^a_</%/<$t1#N&,9R671U[.uUli<gI
%!2FAqs&P(67Q$:JE@RnaMN7P^9r/WE.;CR)Tt^puJ;uV8,sX$cJmY'2en@+EY>F/jP2fu"5][!e`mFdfB\u>f4B%)5"-O1/FB!-W
%Xc&8d42-Pk77XVgkoc/MR#D(QL[O]7&Z;<ZSS@IKLQSdF'I4L1/MIKWU7&qEOL9*?eAs[Xce&l#9%]8/(TqIE$DchV]?jn$e3tra
%)nl$S"o]-1kZ++;H*'2r,2"<(*HZ)nhSLTOb]6%Z/&iPCqlCr&(mNNCZ)]o\^:!F34Sm:o[HG1JT!f%?:[HkHFnaQ\9u/llOE!dd
%EDtW\FXKPcHCfU*?l^HF%gO/29n<uq-AG]9=jM].KOl?2+oBU&1:2]LQD$[B(EO+gRj"2_O52bq-o@m`-C("JBZJ$VFg/ZD&Ij%g
%O+Tr:p'ZF+oUWk#RGM5s;]KcO+jQMY8S6U=+X54EVMUJO1Q)>3o=UYYR^+8dBd[G+7o*A0=;EG!Yh/0^(T9t4R>71S$-4A"%aE(B
%*6qpTAo'F4-2Z??^'!($E7$@8$B(Z[$'&MMF-AHf*OM9Wb[%-4[jPcSS?cbFTEA_(E7_tpYE,,S$;;!Qp]t#4WK?49!HnfD:f-dt
%>kBW>(nf/Pnts[V%JD^?U$/Co"(G&EG%&hJYLj"k;-7[*p3%p?`DZ@W<X+"&6];L`c*#=CSnF)dDh=::p1#K+KkU*$HAru1!im3a
%:Y!Hui9fLSXEdCOJ7Y1^[@![^S8p;23k2kt'-W;P[,I`./:jR1Xb$YELlJ-Fgd\7Z6Y3X"[1b5Da_PNCCgeUFmCb5g(HKA/=U,cN
%Tq*1@P+LN&k8*)*eo<B%7r9J`@T>e7Tb=:,2L)VPlaEYG?d=5"bu$E`fc$>P/R!dXQr-`TSC[Zr$ArmO3[.=#iZVQugnDs0j!g6_
%jJg3s"1+VkVd,o4ea\<kBiHfG$Z!dVZjNQDeBJ!oM+*+DYs98(5Y*T[3r<Xs6_TMn8#9f'HB81iN%eXp:aOGUdUF!L1mbX/TQl^"
%+.I6+.503FC@f+[AsEH_/84,"?J@8qEZBrTMiKGhf7R$6HGtY.7ZTj885F5sS/lG_[/;k%=u<Y+dVJVVR(PuH"=`GGG`t75a'QV=
%Ugu&dA""6iBK##.G-1*p$QU:H9K-uOnn:t$.5H>>qG<U_(Eo7P9:<%oP](`/oVgDMW#2"\:'rfu[4p<6G`8GaV0,ZU_`r6##KN/7
%X52XTo*osXZg!I&b"kLsX#%HJ;2MWV_1`d3@GR"\jFq<p)gNhZ%XCkUY$+5YV`ljm_d;uVd=ni,=]o"q,0QhP#S[NsQWE+JZJ$D7
%87LV@lCaq(Ni@-Fg#HX<<RHAA]fEqlr0E&NXK#`!&4.#a[`"tK&5aLYVN&oY?+tk<3`0f)oJo0W>5PpI=ne>&:jRb)L3g=(d3;Da
%'@^n"?loJLNB8O=.4!OT"JXqZ8PM!eCKBH42I/-C2\biR63\\@]`ro#;E"3@J[(pG!J=6s0Mpm.$]D"b4uWp)O?u31(o,<8K9T3g
%]V`5h*m@2*ZU-2JaOKgk0G(,sK#?8A/2XZnIs8e<4DNK9l&X[lL!=$@"g^%ULg4>U\6>u'$Zk6V#JgdN@1H1(.Z!a]-.mSLpm>ht
%0#YIiio:(+MW)=iHS`u$9`0j>U9.6Y9?WdD56HK7!eGfog&V]%$m74AU@,:tqeIH5*e+1>GlZ?>!7Z8oe9M&Dq>[u:#AIH:P9Q,3
%Y*)i;dUfUgWA*m/ai"]T8dMF&PaE-h)ud&^2@C'L9mL4QOj&YUg+nfDfpmq=@FsM@Boh:3K5*;piq:I8CEm5TgrimeY*=kL7Dado
%4s&6UQ3iB6VX!m/KRbo6l6tdT@[(/M<4p%mZS6c$K:*l4AiO0AM]RqKob^C=aWWJZ:oqXYLu,PHL%h=,PD0iN.9Km62?f(V+M\+U
%RCF7G[6#_eohIR.7>V2LcI?_<QI[Rf=^st:>17.m[6Q-D?l1?r2'>#u3VGT)P-5&!@3cO];c4[0$0$J,L(Ub@T+DT.^8%A'fl`C>
%B:?LYb7h8"MUG4sO,,HW(Zsce1VH-Rm(lNqbI2MVglQ\18Y[<FBqH;bC!`TeN#N*</K?8lLptT=n0['*aChT\Ba%<Y,XjR_,d(W(
%-A#..3WG5gK+*Sp-A<A#\+4L9CNaHqJ^i]gpc:C9817K51-:2IJ84Pg!Mmf@UI]p[$D(m(gFbdY(!@sIJ6]AF'JR:%/I;K8QmBm"
%VJ?'F33]kIT?pDKB*Ti39rS+FdM"f<`1>L=F<gk@n?ktHWTY"/oPBB^AJ[*06t_k"C*9>aXQ'eYX^SiJV@'+=FP>\..V8LgmWYT3
%jdW>+!\P6<.lMPGZe*p1L9bS&0edO^0$L+=8o#%iZ8PUi",j^ZeN64,9J_rr]Tk4VRi%4hG!'bTq1l)e1S?6oM[5Rb1maaB06B9S
%>>907E3GoB!McSK!K`ZP[gTTg%+\*]<X"%\1'"RiorSpD]F;Ui6UVcO",<UEauTs'$`U*m?sh[]+Rk&iC'5n>1I=N%&Q=FpCO3u*
%+O<O?A&/"Q/=cti=LOlmK9:V]<8FeF,>S(I"Hp*9;Gl\CJjrO\TpCQ]Y7bH.[JaJ%3Y%7RBu1r7>9=tl+!=c0+Bop1>9=tl+!=c0
%+Bop1>9=tlX8"kD[QZsb5!ZRUpAqSm!ODA!ZLn7(o`;Ak5>"?FO/#4>66Y$8<$R>R<cV%5+lNQ+&aUlS8#&$X=D9H3/!DU(]?]R:
%Yrp_jYs@@T/W[p>+DPN?rQL/_b]Z(M#n(R6<uapOs2]0=\u("IaL^*S6nW`?ii/?r%qF0$g+"8qJ.[-MLCm>:+k_gX&hRdm:perG
%\0XOW">tP_Me'?d8r=TD&dbYX`>`P4OAHMC+5Z<F!EbF*Vj'lR\4`Vcce$U_o(poLO>h]DJ7ZU`=H#aIKid4.-$'kFhec*7J`'>O
%-J>W;&R42QTZ;/8<ScQB5&eT$RR>$Q.pW`N@A.YP,=dMk&Tcfhh\fD3K9DLbJ8C[]%Lpp^!4G4*>EN5_R2+B.7>_-,U,(%EQnaoP
%U_<c,OY70nD0d^)r?7i$';f#&0k%N",3RO:Qk<LG2N66@6WFTV,"kgmdaH4WEaCsFXnrA6TV,R*/n'aU^^+Y[Ca^fqZZ8*X;"YR%
%F\<&d=M2JaG5>j*orFrh#&Ajo*=W`KC#O?1'NW=e5f1Cp^fPf@49F7OI5(As2:195_i)qG9N*(J$84gFGE7I6BBKb-K>_n_]*f:1
%S:gLa!%/U!=r!nO44^)+.M82u><i0%*YR:d9d^;Q/OE%A%pm=p"giXi3X]jSS3!SY!lD&'BR4RYB/)$\Nj-_erG^1Ah!D1T4%N'N
%A\6/7>utL71cC4K(P9Rb/'s%c?6;s9?H]q<b*UuP*TBX.C8;V9&I3s&B,m"_*REG?aangU@7D)HKo*eWZd&Ps;ZYL/*.uj>.K5]N
%bikNDDDE2!GXr[XQqp`6,8,<aZ)qJ.<)C9BVMJ*3QrKK5#7TRfX:(7m47'5^q^cq0Oq(INkd,eP7WjEZDl.+(UVQgO?uXN)[#W^L
%eR>F&.og?jlE@2,.dUeY!?4X>663(i5p@K[+J'48roc(sC4+qX0Q`Ka74I[/%(9YJ$$lY'&(FFXVhM1:U1TWU%@s1"P^1*+jFpoU
%X,8fHiGg.t9SXgqUeuTj(2:B6/%VBX0P8onKLljh;k@N'TsS2?%qV#kS<lB\B%8;IA=im#+>iR+-*r`(@>\I`URF;13<q_b!Fm!M
%5pd9&9pO7aO'nN3WB8)fV[&++<<LS26ijD$<Cse=GCR/Y$,qN!4Uqto3&o:Fi'<?U"$I,(oJehWj5<1`K*+:9DQ&@4.GrRd%`_?;
%n2+<77CWrT(E9c=803U[>C]`%NU)#e,KDC_0Et:_,PV<mo_dd9'J^>t*d&+snAk$6$gOOti=In5]U6Df]*(B6)DK8%J%]_b#A;lp
%#+gfHTLKWu+gU$H[L8K5!D1+in@6o$p[UG"XAkd"!h2_:Ak7)2<$>;Gklb+q/XZQt^6`9k=*Tk?OHPIQm=kNuMYV@1BR^m$gF/+.
%4/:+CHBZ_gG/6L[FG<X#lVE+q+;W2gB:ZP((CJ)k+;#_2!"A5![eoIc,8/rdH/dYq4?Uj,WsRKP[.k#K$U@<TRg%q"S/J?PNC#S2
%TUDFnLuIWA$j7;%j]-_4AIio1Q@bg#'K3IFV8DM136*d>"BZ#$&m\O/,TK!U/DE%C!Q><E9<tX&BkYD<*t['TRS:_D6NRFV*LW>C
%$)cT$g/n_\62;*`SqSck#.h*UHE1V&@8AD;_+i=<9do2RH]uH=9@=62]s_[u$WC8]%bVL#.l3N`)G*r>PK>BuLIbFl_Z^T#X&V0V
%N^Pqa_*-@mJ!ih*[Y$r$%Ls473)o,":n`M/KanS-3]L(e:E:E)1hd?q0/u(qTdCO3R%GKZCcrYncjNWZ.GA8Oe*',kZCh9&0j4VA
%<eG+D`%%S4JZi5dlcmn>!NErh,lAUT,,##=6>((;B@GP=!,B=[dL3V;!RhN*+pP1:C9Pfgmk"r7(8@-?P3OJcq7**"R-^%a^*cH>
%fNHZp?tbs-7Tr+#%,g\C[TbL`7OagZ`[:Ie<0:,MAA[F4?HA/bU@%8mCBNUY`%t0>o[]TOEC:e[TPMhoDJ`^9EWAuI\e^+D.9$h/
%(CBI>C-^JW6WTRUXADDsar[Uqcag($b!#%HL>rLq=4JmB+B3[S$;HmiZ;Zk-AlOE8YuDdGSTjA/6E7;L\^4V;35qmU/3op[Yo^MD
%o[403<a>affD2gr8`1T_C)&9B-&N*fj/Sd\pEEhA$C7;>7\Sq!HdPaOofBNL"SOCIi^(X^+jHY_4aU0`QGD^P#e\An.u[S'DLesk
%iFVj@g2dM!X4_;*O"q!&!eX!sa&^jQ]'<8inBG3cF@U[]ikT#7\M25<@MFDn4<K?3'1:5f]8**\[VtDN+Fukp90uq;KjDa3CN]B<
%I3LE_Cjss]%qM<R;b3o_<Q<6Q!]/:(/5]2/!\(A3+4FPu_M8"<K\,5s+ecj_=i4DK!sjCL,0IcY0+7r$:"Mqd&<[%U-L9ANEboE^
%"U]32TLCVk>r'#alrL^:7B)!SP80q!>TS!s!\Ca$b?>X_C"Er,V)j#NA@Sie5]Ti%+JI-dGh&oaA'Y?]gGM@'AmHSu*]=E[UrCQ+
%_7)>GP2#E0>LB@LX3GsZXQPs-at5Ti%S_T+>CA7tm)3$_]M-o9d,7CUM>6/"+s'$HN-P*FmP"%5#sh4,+UkI>(0#,Nb(NI]H3+0<
%ju*)>7F.PR7]8UF@#d*e)2^ItW2K\]CLZN`/Rd:*i#TBJDRc&&e!>sQ2H!J1c36!O/8QMR74"duf`9A.KAuMl'/5BZ'=sDE#)3pC
%Xals0"K90+b13M<;:e?Hb7'UBjB[U<V']%EFI\W^&ge)&TA/RF*W6jDpcH:ufgs+0[>mdpopi\9r_ei`*tB/S*g]a6T!YqYB/pOu
%"61m[U*(;E@gQ_UXOrtf=4J\qgk6A+858F$]B//J=P`q8[mW.91G74?CCAkahcP"nUCb+/E6E3/*R$a>"9VP0EX?>o7neCu@JcNp
%'-lRqZ5t4c(N889e1MsRCqnCf`-+JWP:^C>AgB6QAn"?J/qageShekl2$S%Xpq]kuVSpup?Qlm\X58(R6m/IR(:p/'U[-kFTI/JA
%BR+B:@CGDk-j@T]?"U_\=t1J/9goJBGliMc+;0@Tnj"\4L(TB]2d(iB%gkR3?`Ie#TOrAUbC!:_&VJ#9^n`9YC4s(_]_Tn\E5Q#>
%Mfqup19EHpcOXg!I8T`CkV.i71n2>dWD03MXl@gI?K.3@)Ph'`jM6:fdKrk)Pa%B+I3IYcIBs<0j+U&$0M[H/##CV((459R.$5CL
%EWATP'er9T-[H;k",k);+b^(c.(Bu9?n;QH5V3K_2Kr]UXpHk\NZ).#;+"TuIsJQ!pI!%h-L+,s&OAqtY46`T,be0\,\S+5oOqD"
%L>`Cdmm<?KTJSbF![^C@l[&1A<!eu*Sg]9!=2XQAd@bCeBIMpR6S;P>/'lHcC_.7,W)`Bj)J7?mBc7lO<E@7oI8^ggF2tTSZa:l@
%/aF%rR>DE*9l4\r2%N]n&2NH"+JPr<h[k#NJL<Ajj:ndtI>Go4PR^S9$CN-uP_@:mFYWcmf];Dl"g1tT#pElS]f)Xs#,Ds#Bh1Ws
%.O8/JIY("'i"T_pCm,pe;8ru$9o(]sm.F\%$"iA;!""\>N+2_oCr_QhRF,b\QlNaRq9WfN1*H>l"]^J/dF8Vi:kAj$)d3R\di!Oj
%"+,=j>#bDYA$LW!#=q:q4AaVi3"cp4%$aL,jZ.^*dpn4o#G&/m6&9"!_NNtC(3dO(LQ+pW>U@+F1(OdZB78Um)`YIYmWL2%:cS8Q
%L,Q6p^"#o`+E32i$P)^-5RcOI(B`#C'H#%u5=L0H]4N+V[@JPGip9"6'1-dMBj^R7X8;NY43-`rSL9Ai3CMH*)-"=.hP'3=.&jGX
%6F@<5DP`b`#G?3TQ1LT+#M@q-D%*BS:g1-ekM`KYa)_Nd;E^_1gsBYjiFS6FJu%X[c^)C.@QQH'&=NUM'X)#65I:1k=rpm&%LmU7
%ddq![[@@eeK23,:a@,^FT"@+\>pbn]^HJZ-7smRg1rS7p_s1E8*SK.GeAJQnHh9+_LK.Tbb5>(kcE%?m$I^C5?+V5%2)um;[XLh7
%aat9(f0Sk)"O*:4NMoRgS03fl%;\-?#DNI%:,R7=6bBF+L*s9IVIIqn#bDpY!^2JqYSRu90j"7034N(h,?*]TcAlGe.D)>oO*-$;
%Ol/M^.#DWZ@)n)cY'gT.AK2[/oN4LaiaDdOSWf:i_109`X%!MRDI?3`S*`M!O_6olcGqH7[V.Q7_%UW5&:pKBVg:L>and&/]?dR2
%^6$WWSIB9DXFmNDc!@+<'rmO30.8:S]%^*LJ/6n:SVi9k#BiW?69f'0<.YFOP;I"`$__5I8W=!SOMk-bpgZXkU?X+J,6nC4Y]N&:
%PG,:4-.1LUeoWG=8iS]1>3TcgYrd],MV;!/b9$0c_%3(cCs?,33U"\gBPSW_Sud4_7S8bc4C39.Tq-a&#id*TBc=RG")*=/)dqVr
%jn^q%V5^DJ_g?O%KAo2a8Q9e^Y#@c&$bRYIhFT7\e^#Q"K.S$8D_P^?"h='H?lA<;gjS<+4eFAXTLHY)F:9]*M\?*LVSJ+Lm-5sa
%"qE<3frB3WX0kf$l83\"X;(PDEV9se;*e)eS1$F#W(8;m>;oaW#"Kl4kmF9'<r^2#[SqDse-F?7+gd+_P)C+CJA8*t7>:[C<UGQ:
%n4m#)+S"WPSl1PPF0n</S/$]s/:^V&`NqlI'UJ[D]]5EQpkIXG(c7:kZc#2:Aeu)R3Ut$jI2^EQ!MPjRXq8jIK_42ZAm&sdYJ?d/
%DM)98=,!^bJ(S>cllC<Q`Mag&@K[/CYnMEL01W[%C%p<;+gs+V+TO<XJu_VB3p'Igk*>6Z(4.i8kWHkEEtX_uSP:KC#qA"KG\U1+
%OB&>t=n#aE<`ui$K0:i4ZQCZBef[[+0M"KM4P)sJ1$n8`VU-^KhEcTiY9!@*89HU:H"#VH5k(X)ncnQC+C:W>M.Ht!<Q/lcfr25e
%!4)a0,#mJ<An.kr.2Ac)Xf6dDbo<<GkD3Q7YuALQ>?BjZ,nIK)1;JB>4kGa)l#=C&C4VogHMh-F.W[.r@I6BSD29Zd8hHd0,CmcA
%r@ff3-g\+Lqoh6C1R[k\#V[H0S*FZ#-_8c:PEm60'^S.$a,$D[S39i<]54]tKMGNdhOrg<HK7,\KP'b*,c>Le^h*je0Z.78MA:d[
%$a5mc_O@/jSrAGD87p1d`4AEZQZ5>"G;AM-(_\#L]&YtnKXdBXr!gHX/st-tinc_F68SsXio-$\);\p):5<H%F7WlRK2^E2`$8P-
%%QnVe55JutjgcfaZ.\KFAG"(o1(D\$/@9*q3!1[b*Y`u(!_j<CfXK8e+Nsk+MBaUj,/^)WS3_jk`_^h1m=#:b;#[LIC7+:b-S</g
%BOQFK6J!7#5sj2#\"I"6HDlYVla3C5c0@c#[$)CA?:ce<B-/j,12KL5K<Ph1+deV/*<[At$&Pe=XLH^C"g?)PZd])ARo,QI[?V#K
%+?YXSb>lklai'?V=jLHpFOm%C`:La&GD`+b,PoK&58!&N2S+h[)e,<_*=1%sMuhijAX`a5'fq8TfotXYm!%#e-0=I<f&Io3jQX;H
%:eNXt@DF&P'I3C>/ZbiE9dlJspS!"On(RMLmL2lR@H/D")%"8FQ?JmaTfe,h=e;+=n=*$Eg+JOjj.sIuTs;95!95W"!>Gg7C5)A"
%nO#O8L1rr5CpuhgWN^mVf!H&PO(eTFi-)c>(ohpkT,i79d&*3g),-Ct,nX,jO*>k7V+t'`$u/*:JQCne%0ERLIHG4`AEOssU"!%s
%^<IS0bs3Oh'`0f#-)trA8)SC-0aqc7X5RX%BXU#ab<n"qd/&jf0@kR:/3bca5:GYKW3u@C#Ho_O13=NY_''E:aNUYe?9WN_2,QaP
%H\l5S4F5-UCX)sd_124-mPF;S"g5`KeuSiN2Ks>X[VT#fI7N9]S/3Fal(FIe266#Y&,7D9-mo@BLr*A<AM+Mt"#>soJ"P9F(q$Pq
%CM\d!ZR*dJa7J`,p=cpSk/S=P\";=43"%Ip67>Mf3TQ>d\dT!aD+h4XRI2:'Ya\oZi)_rI<9O,&p)2h;%#p?aTYF!Vpl!MJ2Qb+/
%%<!id(a1^m_s[j;nFVY*Z@:s7H_Wc`cKTHZK\#Is6E*ISYB,BS4TCB+#K%sLa7(^(l9ac\=!f=LZo=9D<!>TSal8IW54mkk#:BZ[
%7ZM8\,4fL5p1YjfDuu<0-QZ]ibmD'/b@YPcK=B')i&tupa__H'<5-)"WW*7s+^c!*g`?fX&`:Wt/"QLNq=T3kqrcl8[r;%Js."+?
%ar60c@f(gPdq=8^*X%-<T0NjdT4jjGo(/L%_t]Ff@ab,+:L?oc+2330IJSm%p&"2GU_eU:<@i?bhd$A5=(1%5aRCBW]EfX`PKKM[
%k!ee83sk.?Pkm1S^!:1B!o3+/pEC-^#`^Rtjm*o_,-_'7CB(ONl'r8:MkcH>0g#:gNJ9b5Uh1^g%='/B+$?g_WqP6WEu[CARHGn!
%pdgLTWHpD(eM/jj[9m(@8:I"@=)8S0F0ff@n>pYH0[;7j?:QQBr_RuMqK2+RiRi_bcH[bc._oOgf.H_0-Z9B$%#ldDP=bETrq=]Q
%H2)T_b'*!]'L9/"dIGqM3pj%]YUe<V,-!j-:U5"Sg$p/8&bWKdn.em$+s%L/Z,,)$!90FMc/'O'9o%ojgG=@p&iS//dMZZR9WQ@;
%WOoJ2?GH.>OQr9kRR%9?hqGH7$8pk)n%J>kF)@;&Vnt?Iga2h<2O:*_7L/?D[Zd2W>DAGpKH+X<jk*3'ON+b)k7,pk1_]KpfEQ%^
%'bSpl;t86@F5HAP>'FB@FVi%J]<EEM8jXAR"IH(I6b)"T%D!kU>=Vf.VYXWf?Y<Vk_<?r>8*5T8'LRc?aS/Vb8IOcFnhHcHO;K`b
%Qk,MDSNJ.ZW"E4\"Mau:[b9JJ9od?=2L`DJHYr:9[*2M-.&m$/b:B6[pf>/sD=^LtC6cC+Lutcp4J-&S73q(YfqCjUBG![:B9j=l
%VKE#VR?dUS<IH3tQ3"*VOR"^i[7l:&VT2^LZZR%#&R&BcgO<[.l9"gc7FZ5f#[A_^(D4PR&947C>XTNt!Q]C]nfq&C#[XYIRYrTW
%,4N,OL+WP'MjW`iO1GV"Y0sH<'^S=pFqLbQdJ;"/Ea]Q3=%26$R<h<s?4kRdBDIgdIoS=5R3>[c%6bsBlg2J4jKOG,/2Is3fnrc0
%A"D+O,s#)3O(CLc&L@1.S,D4*_Y4+1M[7ThW3]1ir,M;j1EEht&M<!3Mbqh_^%;nWqTM7-o2:KSeN//eaD$(@\JC=2FZ/SB6ad8h
%/H]^Fi7]C3p4EHGhp5tb7/fAkJa<6l,&$`h7pP3m<rp?1%.ZK"acBQc3deJ/BeJG9+/.#'3ckrYr=#/J6`I-Ul:8X4SV(2PAf%H#
%+.CS^"N-QLj$aZ-SQT9PRhl\#F]Nf#Wa8/u<uLBoR!TG@?>%/?1ZXIeq)XZ;&RA`Hgj<(Zp];cB$6=>c9G+ZZoYWj>H3>N$#Sq-1
%qbrXBaku\nEURt7`$?uYO-V.Hq^J"_RcEF\iQJU8.XJ-*kUMe/*g'gU@'D[XXGRoH!m0`gZ6J;0#XU'4dY_/7GJ_t'.;_MD>8@!8
%Vo'6(E^eVcSP&WMYBqPMI<8ZH]+L%K`4mD7!nR0u<R>+c7p+pi('01Z$t>co=9^8kl&0+Fj!2jS#^rf'+eL3H7FYic8QeG_54U;K
%(sG#nZcLYoaG@i[_J"jhd5$Tdc7FBsRm%K^l_N#S;RHd:/JD<G.+]s<[1%e<k/S5\ZZR1'&R/IogQj"mO0IC`;Ras.I:i*e6,$pi
%D\3F`"UN^O_c7oN1U[!F_e@q[!#IoRME4thBa]mePBC(cEM)aU!jVV4Mtb?[/\o(X!OtAuf0J;H4Bs"d$]o@&4>,"%:OmI[>-<t2
%"h=A\+i*OHa:"C.'6mf(YmZ)*J_@2Og]b4"`d8LAn,aG5@)Zp\GQB9IE97o/]YL:D&G;L#?=;H%G^E#-J)K5mB`(@&aPR:f-p[V4
%DSP?)(BFI_jhFOmW)<_tBRqpki"9!d6lORs#EOCg,"A8b>:<quMXZ?]je5;!-mKt:Cl)d/`?V>@UOs*68QpCOGPjGVUWrig_F!NY
%OXb\<`sF%\N(KRa;?Wa/nL8V+ato-ULi%Dbhk^U1WT.HZYqecG9G(0$L"R062pYm%%o6B._3kI\Z!]H?:re1e=>1rVK1Qj.abieq
%67`MujV*JRTed(rAjPE-M4Fh'Zbh2mR*^F4q@7Z?5pn64VBtR#6c#2Z+aXUrCI*e/BsInb[U@S8&DMe[>;L7lGj^V9]2&uV%I>[f
%^'4PG"pGf2iIX-r",]a7EQ(!l_8m.=ne8A-iQ0kZG$>53$^kY0#;(V(n&S.o3n-L#qGalRlIS?L>DR!/eSQJU/O[7Zg:*:M=5r1:
%Ac.W7(S^"ph-A$o$aK=/bAQ4(r'(>FL!73\UDLf?6Jc&7i![AK+fhg>pJ7?//`n]cs%di(@3I&$#)+@s0J:ibLPHJ90MBouMSag>
%Rl!<,o)G<3k[@^Fln.]%?jaeF@B1jE2hau(o^\6<T-&E4$3O/m1b(%J&*$RTE%6fCKitF!<>G5.g8%`[\K82__Ar9c<hoC?NeLoE
%Ygq;'];JH.2Y0(+J#,0p@3M_cL4q)Hl!1;1NeJ4R0ML'Cb//a5fea'qB5.6jQpYX*BjiqP9W9+MEI?)<>o7^"4)a*T/I]LMNO\[$
%(WPO6Hb";[5Ma\?A\.S9(FJM&Wa0k\$hJRN&[/n/L$?7SVUlm__X(T2i]l.&r=7K=M$YS<!q/qj$9UTT0dpH8:F8C;:+-AU"cD9\
%CFHFt"ob3G7$KNb!]s8`.;FT+!P9bB(c=D8!SJkt*$5W5GR#Zri(9LOP7i%:5uDB=9$(1\^f[2LQC@2=6!t%!9[/eNi%kP2VInKq
%d$kZ-;]p/heBX8u;fd9m^e]L^qIl\K4"REFNV$_0;U&>oJ4pJg;b_J90Mi9Z<)&T,cr26_Wo-uBGuk.`X/9Mm0j=g?lQ'_AJbLW:
%?o9O;^l"EHZ&`I!eHEPea&YI[C:[W#JZE4!'iaT%T.:Iq--GXI]IU42'gJl%m?KZFpUGV^^gE'%/9l^l=RaB'_2;,mi!`9Bi<L%g
%hEc?$(s!U2=\pD;r8[rX=jno0m,aFj=YhlBfOf]q/CC"7ij/];QGh,O/c#I/etg_AdBp]\epPsKUfu\W58`5P*\b)hd$C3U#L2ta
%]R><MCP$Fmg+@9V27L$pr&uRF,qZXB$GQZbXrt\J@Moutiu3k]!0dl8Em8*CJ=?qZo>^rcho1cqaQjphZ"nf3!ST/FgblS<$2?,,
%i:$0P+'A%G4^Kqe+#*9fH!ZT[+8GI8Z!Mt5T=":nl!C^R91XGaP5eWHH(Bdgi:T_KImrZVYl7GnJ"73K`<d6P"(aGX&RnR)*RpJ_
%7<h->Yu"sc<1+2V@#$cDU54[T![[-mM.]4F&S1FjR0`9"Yro?UM?&`!.HD?q;?W&nP>LgD19';/MHlBYIS(3X;Pp]];d688QSJW>
%Ll*V_Aa8?E,,1qEZ7-H**mlr9JBeD?Z+QD+<J1\od6i%G;%[D>6lsn387dTT&[bSN1-NLDMMS/k$gO,t<<PtF#uj>m<=rnE#%*Vr
%=]LD]RCDhpjsoB&4us#8SK,3bd]<^<HS6PELf18Tf?.X4B7a>"o2ath'u=lY]Nh!p<s7(hZ$,Tth`ZS^hMK^.k3eK8I79*%&bfAF
%!Z'aG+.P^mXmp$Un7NPSiq&@/@mViXY]k^2))RP.Tj_/Q4fc'n(;#Bpr;<JIVa("AlWO&::KtG[NIs]&l4l'nasjSS@n%EbTmg:J
%f69L[I2Vp?F94;K)1%7fi"JSYN,5oNH29WXBsGXnbgBNG4FJ6d*Jc(SDF*jg&tjo<oIU7lfbHomlV;m<dW4GO78';Q>,7J)l6:S-
%)`I8:_sEHC99][@:K!u9_@Mq1!sZjO[H08Qkl8@V'OE`)`GQ_OcqH+bAiDt,T=+U$)o^AQ8<%00Obq0X8lPmrOt1!eqad%n3q?4Z
%^_-8b7^eV&?`2%e<'Vk*Gr&Vt/Kd&f\E?\Tk3YCe'9CjO33-b!7P0;bcB&OP_1s,m+E332&DGQAmr+&@O0AjB^d4M!%-"2\RO)6f
%%iq,FRgUY[HGRsXn/PpqnJQs(LDK2KCfG6GIHDW!2D,2fjM_pUnXOfE@\<DN\'5L"'o3$&l%Y]HcGL7>TL'SE)cZWn/9gt<Bue:9
%S(`j&=56m`3+OX!b'[<p^W'sVDlCqKd$4#ekn#YUGkWYsSBdU/LCh!OHE-RZoT\ls)KsH#AtBQ;bb:_oTe!['-QWZ?MXhfRDP:'-
%%c4/8Z97o/Z%0QCcHt\8n%GgR3%@EcU#a@Yp`(Z&W<<-=^9Df5c/%sm?kJF_@Y0^5@j2Hqdkmcg5cf%_:Uk%i(hKQ?)K:t;Pp+:;
%Y;</qO8-PFdKgs(QVf,MVqJ_RDso)57FE,t!ksPk^]T5^">\&8(61J"fNX0rGE4Psh[V.kldNRNLIu@=`bJ3SGuqHU_s'Lrc>+;O
%g_cgLkoXB6]%qH<SD=mnfA>*g3dG#TSY1)d;+]u/%g*h=pRIT^egcE/.dl5O]UgLa*$CsW3\k1$%(h<X.SbJs9E0jBI`=&"N4?o)
%FL'/Zc@0d*](O_c>YO[9+:ks#:TG/ZPg+-G>mq`Q()YIgY#4P.>"MOcMl#Dh'Bq]WnRumhA>V`aE+nG8cks59#FY:h8kU1HWsaM?
%s%'aH`^$,Y^aoqEL6Xr[C:'^JDuoYJ&/L"\C"%R@[Qe7mX6;smQXh2LfSA:1<X^A?-'@bWLAC6u7uLXp^R]]]hd:sD[9LiJk!\29
%<,,OE"=0cj#U%Y8?j#[TCj0rK)N'HOo#MC&*9OA^W9[tQ5';(]PZ#-'U6IT\KIdH<Y^g`kj_m8V]Y1_gP"rK2Q8:G8?BJ7-`<b3&
%5RLOQf#9A]/]TG^`DS^$f56K=r5^F^fA61(Y/SI4,9iVBMTnB#U"R!BHn"SPf,cH*'O'HriRU,<p>5Xt@g$DZ:hb:5B1mst[TZ`<
%$H=L>Z!7e)+LIL*K53+\efNM$DBVUXr0hK!S[itK$a4nZg+h3e(=]g0e"c`8(!g[o#kjl-V'Y6M1"-91>PB"mQg`P_cbL7?PtlrT
%hFTo$V*G@k^34\/AZm76%TtNC;8:1>Sl`!GE;ig>m`9>A_Y*q2eY6%N6W"4elJ;2FFAeVN,O9^rl=mr(kDCHbXE&"2<9@A$auVE7
%Su.:Y/9#c?B[)9#cUG;EiIe-c#WA:k,+CU`[9Kf'93UL<"LK5^Vc5'<*([lT??WgpPM[/S]GXW7Oe["]*0LirON]50>/,iqBZ`&U
%VK/6I37C,_`#%]VEJ*e):1[))gdn:n*QjZdqFM-H*SiX!4ga2rnd1'+>^p'I6J]/\I]7X+Zpu<&UT\IW4(?V*>J=?Ba$RXo#asS^
%im1%=P("?H^!cU@/f`L.P^LOYC(W95\6#K[CBuA9gj5pt[h/lAi>rdAqM8n(,h!bj/oKi#,#I+,iX0pfo\pmQEEXK[6F9Ju>RiO$
%&'aT:gtSF-.7QJGK!]=(qdgAH::cP,p2-a4c'Mf*\t[SnM*G6E?!k4&]/:8iU4jP0k2+RamK"1^.t*2AZNK"ISfA':%!JicV`h%o
%LrqU"*8:m[gou@NeqTmOmo6(p*?I^rDFWCiq/0-9./4c:EeengPbBc\kV#E'.k*WucuS]N)j?a+SB\*$h#^[bVR?pGc"gts)M#j$
%+Vp4;P[/]^CCdHmZlH"nFL:l"_AUUK3!6gBoj,HJ7n4R,3N0ONfDJ)#Z%%)ei*KJ/C,"MBiU`fBXsdstJ]3BcTV7[J81MVU0=T1n
%1_]bF,=I&.X9R&:V:Q*(iDO@"Quu`uS_"Fb_8E/pD/c]13]\kH1:fS%J84<>9LD?\AHlfZ>S"Ic4"NIJp8AM+_7B.8E/dtZ7A\*U
%-jr?0lU"Fa^8b>uf9ZPqBa+Qm?TZb01%ANhAGLIE.2t)(TIe0VetYlaWB\Yb.j(h2I/EcSq'C-BXQ?2pkGZmI@isq]Rb<[Z;-i=a
%A9Q9c5V`J2^ZP>:F?8DRS^Uq]_03N+I[Hm3BHRdYLhD/[a<:E1&-qD,3FogJ7gVbTg`a.%%-dN/f1N!rWC.8!%\T7#rsgN#(RA?]
%_E4iK0c',Y/5]-imL_L00J$sT%[`:P"_/XbM!njPn<*H$Hhf$a%//:gL;8ST`RhD)+6hIl?MjQ.GF=S!FU),$>V([`Cb'O8^t[V2
%@U/2EmX'@.PCY;g7T&8ejcRN\I:UCT=B]:,H"=:fKHnE(j\/t)kVFiBUFtQ-J'@Zt*Od:aScp?IASf5"IdNt5$<:CkhAMq3cP*KZ
%qH!AE)i1!QnfrP!(tI8um'5NUMu=r.\rM+VfKl_')t$!3UM*<Za>]Ui+@&+"PG#f@E?bmDk_rfNke0^_(["T.&>$P2\UbLG5F8.M
%":FEQH2R!\do:uA/U1cr3eC)TWCbkgp?&V'++_c2V//jgVlVIt&UdLAEZ7]QK=tn&*Id&R^X:lqV3hW)+gNumR*lgdbhSd6:-JW5
%iLPQ[HsG9JHgPT_bp1?L`5U9E_;Nm=Jd73"]VE>Z'UG8\(trim]1\k`S*tSG_#2D#0@ZWYH$=0p_5N8A(bSdFV_.Y_NQMiWo+]3h
%_1UP%Q>\>uESKT:r?Qi,ZWW`H$#3ES\r?2`rfZNN;rXA?J_,m8;Ub3j$igK!nCKPnE+Zh$I;VZZYT],14NL??,!r<&8=I"l3rN=J
%HX9c3X58>bmPYbUg3Q`L"N6V&MdF,Fm9g#<[brSPg`PVCp9e*)W[NB,/bL)^X^.sa\E?uf0gU$%DqeN0@SlW/2](FON#Xi53&36'
%<ag`IiT9sYJ,[ZO%.CU)p_8\?B)j=sdTc1e4Ken>J:A@(7%]VUqUZR4IENj)S$#aTrt::1##9RcF%HKk^o'^[N.8G#S(0mh:MXY<
%B[a?&[aWgSBq:F2L?f9+.p\e73&8Ta7taQ;V(4*2g*gsd0k@'-Te%H<biZp-/*G&(19!c8B!MLY!5kQ]e]!W@[pXG^j4J$*Y[*%[
%FYk76E_Cb$<^ReVfRbCTB-:dKZ$;9%5RIOX4O3`<(>JJ3o'tqm8YTn[9DS'>^"g%A.!uJ[fM6/?1JN+Ok!Jm6F6N\1YfLP=dUC1a
%W?G`0%4uo`%`/XerfRj<BJ%*8[l^g7ZS_%I1+Q:9=pZG0.J8*Q"oC,@r9c*<G:^mBN(r'='\QW_*DmQ%l@aSXIigFG7Rk.r(C0E\
%cq58t^"gLahq;&;+J2d_AY3uZEbR[S;8>@,@!p58].C%IP*)p>P6mh<\h2_d8Psbkq@9XbEsm:GCo\0-Rc&RcWDoeX*$HWDIeL6q
%h/L.af^`Onf!+_#i#%Bj-0^)pN*8%I3Vp92;F&k\`YjVmQBk8A8=i5cH!5i5c(A%u4)aNhnTrcp[hDZso/C!1EUZ6jV9o]>rbN:,
%2ReG#kZ[_+ptC<s7\3-"_d+X%>`I$<81eYm!k/,!p2jE-/tnhd;slCLK,-P[e$<&-"g>C#8u)C>A[e_oeAMeF=F\&4@VsRsr_c=,
%jPUV?=/oC=+bh$;;qUcKbWgED&1H^#0>G$%4fbi`YFO!si<8X-g-GsN!H(!ZAK\%!Q=WGXH7/I_Y)#'`iY3U?ak"SXU&u>L:$2)>
%)O/of?2rYO:2I:7M*=qq2`A*8(k.mJlKK<(@D57A98jj/7I9so3k)R:poa@gEU#ednhkCBQUX[rY:Z(fF<FNF.g#FsQSKXh2"No+
%V5$`[[JZ9H[ZMc@IBt[=pj.Wn<9F29d9+VP%P8ni(ntR+OF9'Bp:J7_kQr*R+'Ape]r:N#7=0*Z*#)ciE\T=]AYGJdhVE$O.pF\E
%n^_j_/@VEB1@uCaDT,/-IK;h72Yss)\X\[-H^(]o..`&,Q8tsDAX\4e,6Tt=#$@%l/-Y82ib3aC4[2sAS0KBX+VtaXJjj<%]kO0L
%bha7JBWD!9=8GuOIhA_$4'U#.kW[X`%BWd_qN61Ol@Hb_<*V5b8f5,"dr:amU9bX9M;cNuge:C@M1.:(C$WLr6F=WODOi57@R7cW
%0[$R:U3eVR+[+=nf6dWZ8cYj:0</=PkT'EKcOh*!aK[n\r-OLZjpEGYhDY6P2h]8F4aumb$cu3is5mGRWF@7p5,/#-Ld<nn@f;Wb
%(+_`+?49P*@SO^_<k'"6L.YR^C_:Or[kH?fZEs]d2@OF_-)r&HRsN%%6fWu8KFOhtp>a3ZgJ2<I,uTh'g$rEX:L[9<;iH`A=OHa8
%>o_E16<"a!R\lfp$Ng)L$_[$Oh$d-6$f.*leHAPo)RN9>=rR-jG.Ek<SCab1O7('N[/adp&W[=](''mMo#58DUuZ'm0Yu+0<!2QC
%QqE[`@jLq-rnkfu&P[`ZR^'F#_)Dos/<8/&$K&Xa,MX)-Q295G*T??p1bd]>HMV]\JHdi<U$lI>EkDk+\!M!qrJ'JVZDg2.?jsjs
%@46<.%^#\YmEt\**@Z=#S@RE.4#GrlX9ef_U#UUh;KESJWOZ2LJ,@&4Id_aB=.jITV/S8)_N'ZOj7^4`4TpLpoi[_R$mifJF'tfZ
%^kQQCMRX0\p@NMsB<TcU%NS'c5F3&XbWf//1.1B=0D!0>PG-Y/3YX_l3,-8&W&X.f8maqFeX[>"pX0;(Gfu*4Lpe?Pbpti`YO0DE
%Bbb.MLj4pq1dSTi4+TsJdkeK;m>?4\"Z>:?JYG-CXAdQ\cEKFp6Y^g,f&Qe^(i>V&'Lbd#WIYQ7FW>`:Z'mBKdl;Zcffs)f'K"WO
%G@/*c3V-Ha`QlO?"D59do9f>>[c!Ii-oV8rlQ-Z)a2kCi["jG2\6h;Kh4YUr\4<Jrqin?`YD_F;HV9eG;4"$UppsZbmpdPcn3VE9
%1<K[5qn1_/n<'hn`Gq1Bk]-Dk@-u_3T`?.e*gF3OqQp,u:F8E<AP3GOVSAJ?m*:2EGObBMr>2uNApa)kZR/'6\5P75;+0%HbHX8k
%>*:jQBO>@Q\U0A\(>'kL7iGrJ7j\%%%e-I'2?T;_](2VAqHGTUHn-q^bJ9!X!0:d2)50?aftSE(%W)tG<oiAM>r]J),)oh16[DXh
%.@Sr0[*gmSANBHd=hmpO&Y$^)@EZZ(&9e;!F6h;l%s'eImHa1V)(4O2@2IHfVc'cB$Mcr7j!nelJptRZCJNCO3iX3Hgi<t2g$BPX
%p<=M3J1qnpo89$%Ip\&>AtbN4C@RMbm-9Ht<XM.)B)\/P:mYurrjX]4J4R6(YIsRgpSI\8NE@H0llP^7F[[#N#SFq%oJCa].'ah)
%(BST4/W$X`W+Aa*E?8A!RLCF8E3d(DTd3&c&JX*4kK)rem<F(>IrAJua\D89]M-408<HoO]3X!BVM42jbs7rZRNXZTlCuq7W/OFk
%AB:J?RS/?hVs1D$U*sub;9u)uA1%ih6A/sV),Sb=nA8qf<.]+(R_*ksouQ0&$Nf$*@RM*`3CY)56HA/:[1JgfA)?=LZR+.+rTk8o
%T"Lng\!^ebm<q@7V-?>Y?Rl80r,(RCMC<:laHp)J5"&3s7B8!go]qHd]eAVY=>"?DnR"Y%:NO'TcZCm'59J[!4#(]T%sV<N+\uGb
%]mgop?)NIQ[.bDPbmYYS]IYqaYEm<NRd3\nF';J*`os"^Z@J"ELh;M0-ibR!&U`,ir"9la8uWX2V.Gc!"hV'2GR(;XWcntNoQC^K
%+@.S_I&:V^';tOMn?71$i/A;K.QTH:P$R?ecr<0%`R"lr5rZ<>gDf.h@]/cS7_:IfUD*aIHlZ)aT`-KHbQe(b6YB%Q+`Jg*FZ^pk
%.]Jgc(E?US>51T%I=LAh\Sc6fF]$+(qX>5_]WO9ppP9q/cU1RCEW3VRqqu!+m60/IrTo?L3o\=?Le[?26b2V"pVs\F/ti+-;:3/P
%N+'a$fs8hO:iF;W2D']DPOG-lj%>iZkMQHtFFG;\rj'N=%uT(TmJoV%,9U!ZZu,LAH$7f22i:IJ=#L^M1d,2UF;)9b`g3e_LA]T3
%(@d7W>'mS>Y5<4pml31P8;i(DMX^E3/%Riqo59fhU=V]'4f2'9n-$Wb3aciQNDYrRNp`Y8pFT<t6scQ:fQB%6)d[kLD0A`$[ZIlc
%Y/m_0pZNF<LeNMOW-'RVHeOS^;>uS38OC=%_EufUF2YW^49Ep2/&3R<)dH046K$+&(7qu]?d0XBDTh]0K`ed4$%+b^BT59lB?*^'
%kLU:>mt&F2h!:HN0Pk=ZU?*ibS2jcG^2Sir#7e&\)mO0$<?lk/2,h1&O<\@RBbm[W9Y2]!.t7ZK3)..A/b%,uUR,^]PFE`Uj)2BP
%/37:5Yae:Y!MqE<pJ"d5As$t12@Y]A"WXCW23g8DCfVV>)k3[Fk%jM]W0h\Dj;/e0W4Xr<,!!6&Qq="HLj,%sjn;apPdpt,;O>j*
%r02`)AL;$t)EgIG\/YhY&\dX>fA3&ZL-s(Vb@WFqm>B-6+=T'fhYJfnYP\9/-[h!%Bo%S?R2A!VDj[6lYq+VtW/7in`SRK7gTP&7
%iZ%TYLfL'"p2J$FH3+QSs,94hTU'V"bd>_N)UNut!6cYHR+ug&[K)65eB]A&(8rQkWVnQnIG7?#CB3Oa/pRq8E^S8cM@eTcdsaFE
%c6,^GGR+d`eO-Au+'ft`/S!D:'YPP?RJf`&(u*AV3(+9)\62<M)XZ/B7mn!Z3Xr%o!!h(Bmi'3R/lqQP^$@kjD"OoA)EGC,!!6#J
%kD?0g#V?9C8GD9=!<tH'L:RFqZjsF=0SJ&hWC&*hGm_.r5g?j<7[VEM(qu\/Y5Nh2AaI*#DRtGq=g#PUZl'3:s#>E]b!8WDl%\`i
%:O0n#bL1"F5RtAJNi6*"kSiu//U.p<IpAK;9Dc0RUR-H7bK^!$oq=FrDs>B/gF5Vpc"mFJa?S_obZj:V;7:RP/A@Vqh0#b8p.RY`
%4j-Eq6`iH;IUDgJd?got+We_\'GFjen_*$bDTYE=\4:nIY69N>l]"`[NJ64`MPapcQ=0%ESB1oe'%dY;4ubndTK,K"fFOf6aY$MY
%+B=^`2+Sqq'at;bS3`qO?N\WZ)+D.*8ctB&[6o<0*jFE7)n$m)_gIC&f8rJ$.3BOWDZSQqm7?3c[e;4-gQ[#PaKVsn3hmP[W(E[i
%UX@mM5KqsY@6;!>?,ZF"F9PFgS6?3,`d(Xfg7.B[qIHCs)t(\d@E6f(_ECBVi[>'1V7I+t2#8%u=812tG?Q']5-7Zdgcg/Zk\/#.
%JG*cW38RPF#Ma_p-%R3$%,O.,nAHn6)Hh'=*brP0;Q[ZKf0OCm%H38>4bL0JFXj$?r<i656Rt!?qjD6<(n%bUd+i\G#%H[]5e%l@
%-`#(d>NL9W-LHPAmp4efbfT!?aK&P?K/ieFZ;D/immr/=?Q&[QY(U,`4b`Z0;/hSoi,rj#>f2UInk%'G4dEU*QJH]2N%@=6rHZ=K
%H;U`15ugSQ;PQeL:l+P/#a,"\B?j+/Qq+NXW@;)!@Z"iE0X@PtV57!r)PnGI-o;If(jUPl*jH_"".5H3PWjXi'5+J+j`,@A,[#R&
%NVspb#OtH6[.,9-?4%>0``"L!hm^NIqU_9Mkcuq7$'I?Q\Da?;^HIEPqf*ln<s#C.*.X9JJsVWe\5Y9/Z%26)b$W$J8f3orPj&'P
%+$Z6.U=Mb+[@*/&Uc8UoC..#E.NJT^c1n,F1?<8R\:AkY+SfgaUl1`"(A?=$BZuk;W,lLf_q$#(h0h#Q:3)g\m[-PuIVtPWFGd"d
%"qhu?N">B3WlNNoK.^mk<2X@SQpNj]Qd/@jC+8iA<u`!1lQcl8T))__eI=SY!Y%mR].t\uEW]G`N_o>*ffkpj7_9E\ZbP]-D&MXs
%eb8+gH/sQGThB6^AM2uR]C&?u8;:i[:X<n)2m/f?\M>tWWJL/j04Q:7Gq@F89aqT&ng[cc01$-Yn^4?-Rkmiqa$!#?8-hC'Qf8?9
%.phR-[*MQX9$?R(QagaHM#Sg;/VDW^JXA(%O'%+fN1aBsbZeE4($5boJ6a/1A;T[CdKP\gn*AUMkOs[F%lp:bTnLVk?Y?[&D\8U$
%Km:>KJ2YmQbumiUTi8"I^;IW3[\"Blq`'>=CZSEr\,<XohLdd0^>?.bGFuePH0?>W]B^>]H"<u^,.k;nLreB+l+lfB@6Jbj"l2eU
%!CG2)MHs;)ltM2Y4G@Q*C.oTp7kVCu&PbjK!IGOpIqHE:Y2%kh)F.mi^i6^R!.O%AS^a(?-?4_GMnZZqN5epgjas]5lTOP3BKbC7
%:G[,h3eZ04Y-ND"L<f1AG799]*;f-GY@EWSI8E2Sf@i!"BPm_8[9C>B\SO'/HQK0-*DDh1`So?,cO:Elf=-gM^'L"!>E<KkLLS#F
%1/uN1`,<UcSkeW41CVDUllAGe.a6M$L@%<cM2(IDmiZf_0dH5%c+&9:-Tp$j>,@WS*a]<5[[k>e9H$ft`5X0><Gc>eFOBWh7AY;D
%IR6Xl_FHOV/08M-.&&gBUH/BT>)Y"J*9[]5cJR^*O#T_L1dBYQ;h/cL*'EBi[.t>Taqcc+D%BlL7#f6MF+alo7EK[*j"50P7Y@f*
%i/5j$Qp<HJ'>T%5,'dMhE\E&bkZPH:\X+i;-(7?I4pdulLntLHHf>Vbj[95of9E#L,2#kkd90t3UM)339t"^Sm"1/[V2QASYZ%6a
%=mm39@RcCO/0Ic6<HkD)&N1)F15#-A\rNiRm`XY@p4FsK_4\thWZpHCk.:-bYqS.ZhWE#Ip@(-^LJdkul/^l**r1Og%393X3uS=e
%OPO/sZ3fos-?'cKN^ii)f9pQe+(>[[C]POpSA\+U<0h+kIKVmYK)<bH1b+NUp[?q@gjtL\+rOSK>+\;Ye_[0F#,u%5a<5Rp1W/4O
%K5c^T:Qt7-(B2O.K?;P)/aGq+Jl,To@JA-ICFL*7GB_VZ[R-W];\@>l@*rM)UC*oh(%NkPe@G&0Qm!9)15JOlX&>(R^jga4B8)tE
%.N,[]/0`&4_Vc21mjNSj&1>GMrLG7@TUXstYUdsY-=GLb27(NGWH,W&REdWGbu:l@_o9t\9R1NoZ2hZlohVdeoMSH1-!Hg:3@!2[
%A)p$Dj7X[Qhd"2P:E34iaHt$b@RK(Qb29HK)HJWJiu2k^5&t_W&e*"YpKAsH"Fiuli/?/1cgH$b@0oFGQJsrg?cJBHa.5[GB4CaM
%f&\qt$W#%ub)k7a6[BA;E\B5L56q=Oia,Mt&3)G&*SIpXnkhS2/nY4..jL4E(_s[#BY.GKWY0aFOj-uVAH/-('1sYlLjf1U)(A2E
%@[:g"d@BXJ0d;J=`b]];/RNk7/rC!t^4r"=lYYk;FT57!UH4*3WC=0/eNJ#'S`#&Y$^nu#%1`fn@nU_6_R_-ci4'E"WC.0^L(*6)
%!@MVaaiJK`UQ7:mk@3T-D;N=SE$o<OgrN#P7n3d.SL^`:q0kJa$<j\O3f]dXMf!--6?2-F-3^*>VkhSehr/+8p`Gs@0t\2**+HeQ
%6a5[6oZqpLe^lsaOe^0;/2;89O>s%/Jg&`X?d"n@;k*nBF^d!%)9J7:rE:0)p@;fMi%=8QqIUb$kLlWGRc0a6(-K%/Hg^%W<3@H)
%iLC%3U_TJCN]:uHRhCnB-4,W*Qi//eI4\`r$lT]E@#LS2&Tl/?(CD)9noT)!YMTs`6Rpo+a.![@.]G!ef-#L@iKZq*\(SRJ!Bq^#
%#0_QqLU#(<8G4u<KV43V4H$NKalHOCKo%KG`4)q8*m[!I#5AC3/]l>M87!1^c>F<)EXp$to884()<Kp4+jlj41*+WJRKUqodp8tX
%QS)q^Se\]+@=SnlPUkY]lsX*7::on3UN&>ga/4"9dCG5(T`uMLBkG?PRLQk-\J5FUa'1.UL`^H\?KW>_5Xo^]T]4.#<&\3.iUrtI
%jcQV>Ym#\)l9[S)WDOKMXepA%M_BeLU5njtKa&$H,Y0-&h>3D3#jr\tq/.RF!(V2uA.0KXf'99Wntf:>7*AhS7Q)437*TV#$qS7u
%Q]Mer&UbtIS=P5>Wj)3Vj(UXbrIN,?a.'s#SikEPkX>%Ti23QC@CQ'qFLRPllK-(rpKoF=>'%ZhK9qUue7M17FB;[aQqp3T1ldAr
%b&ZJR;40+N'sS52"fDI&ALMMRp9B7n%!LDBfa?-JE\0.#7ckb7f/&q*nS>7qM)[NHrK3(Tn-=_s4j*88cg's2kQ;U#E"d.u'Ce[L
%Q!A5s@B7(LK`&bB59QV88)W@cO(e9)&#XoS)>Upm54Ea`3HQ8cDG:of0f5)dbo&$HRtmqCPjD)cXsQXgAJ>hKfDnm&*Wdc(*bJ2?
%L-82Bqtor_Z`]D61:N4@X`;!6gKRWKa?ZG?7)f7VfqqW6$8i!0k-UD>jX]E_3Rb*GcT8Df4AC0M=ALjAm"V)rQAW-ao!51m((WN-
%g$Z>VACEe5<e\quh<i]$AmZ"D!\F%UE^O<Y-'Zf+_o8GrAs'0KDg?"UB*D_/o]?uMFV4+,[kuueca<Sm?$Wr\[j[Fp)GgN*B=]/;
%(Ub8?_C=5;ba:thm?C&77i;j!*aIbZZ/++IQ.n;Mm]f"A2t)"SKZ4ej1b[0/d.DCiZNrN_LFsI!nLYX(/W-U]b)]*c5!1L=YLT3-
%$4d-]d!;Vf&LGSS>e</ae]::HZ'2A&FQ=RZ<hDUCCX7-1b6nBh'joA=6B'an3X.+%4`A&A&%>XLY(3u)@pF;i0)!a=\-&'J(YV;'
%B+.5O-.85"#G)bP7uj_s59XUD(&S4$>KuBHOn3moF4D#ZbCG[GQ2:YRHOe=\#W"I&Pq20T>auskcK':pmntVVbN4R-;Tl3`UMaT'
%X^FEb%8kn?\J+kV@>ZQu4G'd$2r)>S1r\+o*qq2>Z4O8TYV!pd]A;_CM%RUDR;fd.QS#bE8'd^H+n$O=)TS:Djh?<TW\n6SeE%Hm
%)Z:t++tnZk\K%Qsf[4l8-:S(gO'F,44+e`8`->kVP!@%d#&[C^OX;S8(HaiF,]JR2PP]0:?&C.Lm`FBp1_<$leFakbP)8g`'A;NQ
%C4YMZi>tl7A7H`P)J?KCoI\(URkAccf1g0D<Z%[E"da?<'$W96YCbX9];eL63C)$TCO8%h9rrF)bQV,E(raq0OtK+,QU-J&%[KoZ
%&W3j$\^a]JQu'j'YMS#+b?==(W1gCD(l0qVd'PB**&f/i!&u4/G-tU%\Io;8G*?iuoceiGJe;jZ!^XC;$,^DpB(^Lp'EqC5V]//M
%pHl]!U:.tP%`Ls"r\D4J7O@_(AV_#R`;d(Wf&")lKc'l`f=ZMr6i6\sCQ3jcoGh:QkWQ0^4G!ggCObps!PtLpcM2e-EUS$[3O_5S
%8(V9Wr]2Yt<u#0CXupigcSCD`Ir^mrBP_eTn+?OgHo$LjX>4=S,DNMob<-aYF-J+s"sKi`.iD&C'[<?3:&'rJglQ&,3j/0lPDeiV
%HF2OYj=^+]',^/R)!OBf[N"$;03ti-3Z+JXgMEfW30OK,OjVEA/W)]<j9)$*^I/6R:7lO9U[uQaY4[>:*mH'tC?Un^_j(F7b5l&.
%\]t6_E93_`\BblBV_jFRis>$N2]Ks^5A\W=W\E?&+?$9*3E!*hY/g@LAc#GM!Y:*.%_iQeJgp2;jm(f7<9se&m:PB_,'I=3Faa,.
%++F'Es8JMfro^)6DP-pfk7I\KPm3(q38,DIjl)Sd0,9r>+?RFLD%OZ1*g,&c*c&3U2+QZ/jq./B`kkr4$4GQ#2)mBV^t#Fl63V.3
%!TcG)n1TB`FUG,,mbc5f`FI$t2=*^Q)2H)g@4*Y<alp+5OKrJL>"gI)JAB$/'WpTZ$7YOYNL8=qkCr]5?gSqbrVC;:`..`Tn,D;C
%TDe0OJ+o<0q7D.Q`S^UhhuE'?^\[h7I@jlf:]=;gUOW!n5Q/j!s3!X>rRB0MrM`$[p\3#3)gjCZWg?J(?.Sj_.'/=TU!?1njMFfp
%NZ5dRML_0jV\I"ILk@T2(h_'*i@g_G2A&_nPW-8(Ch6gB@h6&aQ]T%E]\#-h^W'BoCEKG%NqbY@PN_=&6lVC6Snd&Ya`:cuZa`P#
%8tc9V/GIuU[qmq7`EWJ`$uU"TjDS@^D_1m:mF%lJDUH/>>S,u]Pd`UQo+)W(hF@PN(:@g&J*jt/>a`fGrohqnKa)M#Lo7*jX`[G%
%Z;qdmbq7)2X;_r[b0TGG6^9RcDmMjAbNJM7"?'IB*f]-rFG3#>OY'-@AsolG,4,Op,<*bAs2\s'1N[kE-l*L8/)fMdI,dle7bt,&
%']Dk43]/TafKQ#X4lu^80uCJ2>.m&ss!-"4XVtjQ7b*1LJ?=FfID#FmjtP)%C:mO[Amm3:Q<^YB]B`WK\2`u_gSNiQQPAh^Es*.G
%OTR,?4k]Y>Q&@H&DMV_l6KnJ*F>!?9bB9YFFRK2O(ZHB@BX]p_FA%rImV2<ZB;k)=gC4Ng]2U<0VM=32J=U&PrVAsIG4l^DV9&Y4
%bq[P#epUhd&ZW?aL2oKQ]C,45Jn\P\1]%hOLh%Mrd=[&-0?K[[\O)ErI?'5,.S)YXp30+^=dYT7\4`.N%I,%/&X99Kr=Y1*hH6)Y
%Gq$JtV++pr?9u#(gsV!?63Yg?%'*>\UR#9aEjj,<SF@s-1>__<M,KR9#d$&L&1uX1YbPcG9o_S;JC8C_c)eYtV\4ZRcK7*_CeG$)
%.E&NA$9\bY23r.J"kER/;kQ1S4nXbikc_f"SC4T@"B'3#DU%U<HUlj1]8)]carauLDg\\S0W;`Q$Q(#ZC%@;o_q2Rpru##:<6J^"
%is6F*_P\7S-SBNaMdu6m!*=C)M:HWd2toT2?]i&Bqkn7_0@AdL"sM-%(Hc@rQb2VZQIOj!rF'/cR!T%^@o"PZaoLUP1U!rX.Ycn(
%%GZg[VlKeOeLS0G5J@WbpbGcfnAo526Boc301T]b*<`q$1JBhXGTH$>r'ff-1Q'g5X:<mV2)YIo_V#LCP>`":1j$_F%pCA<I<N6A
%?aV#X9,ZG.L'@@n"L)=lQq@YROY12aLXBM9YHom[,18_eH('o&#69'/R"41^2A'gG)]lj#K8967']7Vi`gU?_fsmL`>T:-,CA0@K
%a=D**;?=jbZ.M=::bJTeLVm4:/E]=JA$Y066E%*lI?A^4'p+n:]!nl&5Y>@KBY;6`3(F%E[#Hh>UTcJqN:0=<)74mr4p?#HiDff&
%cSqWsR%Td_'*Z@c<R;-'G[G^Y#U'2]q,WPlnZAuP7F3P%CWD`$$m9"q*jS-o=6+^A/!WB;Nn(1[-Hp)hH%3-U1(]uH;gL3s.P93+
%4g6kDTNI:7?ZT&%/;5/DB\J.b-@V8lLg)4rS@JkWHN5roll-?K#bjAcaOGa0hL%eoKta=c1"c)9C:*O0ecc)4fOg:o>`@QdDYhs*
%L&N0lX$?TaJ,9.GDa4+2a/7a7GUC"6P6'N(R:A_dS:>A1[fY!DWAUmZrT%U@qqWq)f+7C._ho:4SpflW1Q<gLNom%^!4%!MVc"d"
%HBaD\Xlh=ti9-5&&E;PKWd2^%Fm]1dDK;e;CPm6C*Li9NoD="([465<jbrbtQm=);j@%k1h2l-%E^Bp6*UZDr2-#B%<af1M[6D):
%9dLHU3%QQ)7'P#Ze\+TJ`V.(rT?1S+L+_sIS2QmA!m6l^P#M)7EIU5EZ"s]"*2,qf__T+<+ps#-,@P-h*2B![4CFWrLt2WRJmn`#
%V4l".RDAVV;bt]l=:ZS2Y[a?,,[DtLBM=&`dC)P3n)l)f[3(>fD8bA_$t`O'hfJ"cG(l-=ZWL::Q6K+gU\F[,7`/1!\u)P@cF$rY
%l-($S9E0i%84[9O*FrJtBeL/nT<TFdFZ+*[X(baFl6dgcg'^MHd?2OSSi[YE;qs<naqW8Voe^ghVHM)C@FTfXQLD(fAGLL2YZNu1
%kXb@LRrZb8r/QufF)->XXIpJNl&;/>.7W=Sg6L)9Cs[0!,UY71(Zu[3)X8"2l]mo.*YK(0Z-=7hOsCbD/4E<krRTe<A4%$"r#616
%mr#t&M+L[#WXQr^,!UMoUO<O8ThmQ"d6kO^Y\SALLO(jgV5Ubu2?ceBaQ[D0UdCWQ?&Il\@E9!H0=6f/n\!;*1)1miGX&IL;$Zgm
%XU9cF[[&o3"-g^,6qIf)/+)=!#,!p63up6RH0qSOc`@6K#2<7".tM;g)WZW%#$f-[97daF86h[hDV5AIoZf9_UF2;1m.3XXO;:Yk
%3X#HUS47%\OYI^!84u\uB4?AY>-SPan<M*4'`nsSaHP<JI\t;<D;-#Monlr`]nV&$LuV[X/Wt2Q0>?+XHRh^Fj9eRl>>@V#YCDt_
%7nq+N=aGsKrKf*k:s.bo46Le5J6-'Eh,_%\1j?V.[eTDX1OFs0k,u9bX:*eK/'>nrD7h8S7Kp-iG+0[?QA48o-o5A"L;C&<^WW$B
%Z)hEZ07BHY<V*!PF;9\JpNQK8[raiFnK3$N#=lgA7X['*-q;\i"1GN&f+AP<TNjaE[H0QmI@LIE9Oknh(eC\%62%-%.kkMgK;*kT
%.$+Md1]ctOpN)@9f%fF0P:0uoMuH[ijEe)M:Fq0T^0l+iR=&KgFc45#22aY^:rP4[qFs0SNJR#^1CTESSbjO4^o7VdMm`r`ZBm'V
%<O4TI_omJ9>[!iuNQ@qX&,NkR+C7k7A`<(HgqoeM=@m7O]6&c57AVuR)4RqPUYc5a@33rC:B9pV*E%)[Z%(^dfV<hs<R[Ydbj=M:
%qn%8HifFEQ,kJ*p.I5h7!5".9VnV<dgcWofZo2Uh9"?g?ng2SHTEn`rLX.7/f,ft(9dX6ANc"mQCA*ElO7`]8gNpLHj33BIaQ[,G
%R%qMq9!GtdhT`@U>NKYm.p)]PcD`idoAJCm@p,2q*8RjZC>;_IBF<P]nW&6!D8d+LLtBNi/,l^6PXI`b99<BPgpCPj4/<PmA(uD'
%9Nc$PT^*@b,$m,'omt_%EA1K,o8"7)f92Mr*Iq^4Dn0srRC:*WfBc4m:l-7mEUb/=T]PMW1=ZuoidR]&=pgQ/DDu!?&&mTA)[2jg
%V+P-0I:QLHGNrS.&QQp[fQtkgU4D3]R61sAcd]NG3mWa4U42HKL[T.?abn6gA`JG!-Ro.I>FUQi4<Q5^rn+n$^;XF?(b<P)_jLN[
%841@!gr[=kNuii!h&1_;7E)#leB-KeL>R2hNX2f$luN\W\^>Ot.p,^(IUgt`^tMZ>6_QV2cSp,:>9l=G+Z)2m8F+Bt$a'pXlbdbB
%()G20Z"GeWl?$\q(W;lh8iI%K;'f0/aJUJ-8CO+]X=PSqAK+8dQp\HjZ6XVt889:74G%nC/,X9r2@?2KbY#uubq+?bGRF0=aTFOT
%PKqE)WYTYa?eA5MDg;2AR>:$2CEr^2;^3J%n;%<p(KlOf-)^YU$)1eD3Y^j(9m50MnGc`-F^-X>KgP'qfB)-b_U/g"d3E\OPdFkH
%a6hKQ__)"SRQ?GT1UcLKbOu=GmqA>g1Yth_`8BSp`D^Opg%1O+J8M0Zaq4l+7Ini-!cT8%`=sd3R/3OF=?'k5k42A-DE3W8F>2uH
%'d429Poee_1Nn<>PUV*&pVlP49l4dB)*J$%YEYRq83^q__ZtP24YdGL*'#g-6-IfE8!&Qe:qksNF5`%m?Hs,)[J:rI7=9F6\t_N"
%Ea\JD\'QpM#LU(5Y12q.SFliIS89Z,?e;\g'=11%o0<'(Vk8J=QTnHkR`Z<IX&Gp2kkm'0$XJ)=)%5<R1<"$IDr3!4)u,]q'l+q,
%o?@Jk&QC6q4D.M);nTY-#XLuUos?YD^Z18Ai+1U>M[784X<4^q$t_8L%Wb6s]ui2PMA:&ES4gpR9UZ7E>lc;I)T^S`P!1OWg@J7Q
%TH\.Wi7;\@Kg;u*0YguAGQ3iWX=GcC6`e;Zn6B\_FU$6/O41)K2J:"V]""WPphb6(-KjLcf>eU*)sa5l7;?Feapo\,T$Ef+a6\[e
%qJE])]s(%06N(e/*,bSk4?*s5Yp4SO/QF9=#44CY2]_@E9/XYRAkX/)ns9.\d-TNpQ]Z)`.6>(up[/OP-?1P0lC5\i2)h#0BQ11,
%rk..b.0'<RHt9pR]fiQT@o%=+XqZTmbM"7;&Hic&hE>l^\U.pqGnB3jlstA1>2Rc=ISnt[ej]Tt_p<5Yk9ndS+XTp!X!?6's3-&m
%b^d"^-iC*;RK).pnEY/@^N-K6s73`c5Q/R9gbTK-f,9DlPUoW6]Im`iiGMg-[>GhI%s3?R$pX:uTgE!-e4OA#_`!35^NeKDqs2#r
%lo"LWJ%GZ@s6t5^q=V@Lq>OHf5JIF%i6T.7lgOlO=5Wu&^]".5^]/Y1rK#k7n*`JhpNM,-]7'\iYQ+7ZYCH6D5Q9-hs6BJWs7eO&
%s*kmE7;jjSK0T,As5cKErpTemqZ#%I~>
%AI9_PrivateDataEnd
